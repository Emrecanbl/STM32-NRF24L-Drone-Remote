
Final_Controlle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053f8  080000bc  080000bc  000010bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  080054b4  080054b4  000064b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005578  08005578  0000700c  2**0
                  CONTENTS
  4 .ARM          00000000  08005578  08005578  0000700c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005578  08005578  0000700c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005578  08005578  00006578  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800557c  0800557c  0000657c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08005580  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000464  2000000c  0800558c  0000700c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000470  0800558c  00007470  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000700c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014166  00000000  00000000  00007034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002df9  00000000  00000000  0001b19a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  0001df98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fe3  00000000  00000000  0001f3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ed0  00000000  00000000  000203d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017f28  00000000  00000000  000382a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a031  00000000  00000000  000501cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea1fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a90  00000000  00000000  000ea240  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000eecd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	@ (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	@ (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	@ (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	0800549c 	.word	0x0800549c

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	@ (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	@ (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	@ (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			@ (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	0800549c 	.word	0x0800549c

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	@ 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			@ (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			@ (mov r8, r8)

0800021c <DWT_Init>:
 * Initialization routine.
 * You might need to enable access to DWT registers on Cortex-M7
 *   DWT->LAR = 0xC5ACCE55
 */
void DWT_Init(void)
{	HAL_TIM_Base_Start(&htim1);
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
 8000220:	4b03      	ldr	r3, [pc, #12]	@ (8000230 <DWT_Init+0x14>)
 8000222:	0018      	movs	r0, r3
 8000224:	f004 fe64 	bl	8004ef0 <HAL_TIM_Base_Start>

}
 8000228:	46c0      	nop			@ (mov r8, r8)
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	46c0      	nop			@ (mov r8, r8)
 8000230:	20000218 	.word	0x20000218

08000234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000238:	f001 fd7a 	bl	8001d30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800023c:	f000 f81c 	bl	8000278 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000240:	f000 f9d6 	bl	80005f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000244:	f000 f9b6 	bl	80005b4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000248:	f000 f874 	bl	8000334 <MX_ADC1_Init>
  MX_I2C1_Init();
 800024c:	f000 f8d8 	bl	8000400 <MX_I2C1_Init>
  MX_SPI1_Init();
 8000250:	f000 f916 	bl	8000480 <MX_SPI1_Init>
  MX_TIM1_Init();
 8000254:	f000 f952 	bl	80004fc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000258:	f001 fae6 	bl	8001828 <ssd1306_Init>
  HAL_Delay(100);
 800025c:	2064      	movs	r0, #100	@ 0x64
 800025e:	f001 fded 	bl	8001e3c <HAL_Delay>
  DWT_Init();
 8000262:	f7ff ffdb 	bl	800021c <DWT_Init>
  NRF_main_init();
 8000266:	f000 fa39 	bl	80006dc <NRF_main_init>
  HAL_Delay(1000);
 800026a:	23fa      	movs	r3, #250	@ 0xfa
 800026c:	009b      	lsls	r3, r3, #2
 800026e:	0018      	movs	r0, r3
 8000270:	f001 fde4 	bl	8001e3c <HAL_Delay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000274:	46c0      	nop			@ (mov r8, r8)
 8000276:	e7fd      	b.n	8000274 <main+0x40>

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b093      	sub	sp, #76	@ 0x4c
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	2410      	movs	r4, #16
 8000280:	193b      	adds	r3, r7, r4
 8000282:	0018      	movs	r0, r3
 8000284:	2338      	movs	r3, #56	@ 0x38
 8000286:	001a      	movs	r2, r3
 8000288:	2100      	movs	r1, #0
 800028a:	f005 f8db 	bl	8005444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	003b      	movs	r3, r7
 8000290:	0018      	movs	r0, r3
 8000292:	2310      	movs	r3, #16
 8000294:	001a      	movs	r2, r3
 8000296:	2100      	movs	r1, #0
 8000298:	f005 f8d4 	bl	8005444 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800029c:	2380      	movs	r3, #128	@ 0x80
 800029e:	009b      	lsls	r3, r3, #2
 80002a0:	0018      	movs	r0, r3
 80002a2:	f003 fb5f 	bl	8003964 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002a6:	193b      	adds	r3, r7, r4
 80002a8:	2202      	movs	r2, #2
 80002aa:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ac:	193b      	adds	r3, r7, r4
 80002ae:	2280      	movs	r2, #128	@ 0x80
 80002b0:	0052      	lsls	r2, r2, #1
 80002b2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002b4:	0021      	movs	r1, r4
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002bc:	187b      	adds	r3, r7, r1
 80002be:	2240      	movs	r2, #64	@ 0x40
 80002c0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002c2:	187b      	adds	r3, r7, r1
 80002c4:	2202      	movs	r2, #2
 80002c6:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002c8:	187b      	adds	r3, r7, r1
 80002ca:	2202      	movs	r2, #2
 80002cc:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002ce:	187b      	adds	r3, r7, r1
 80002d0:	2200      	movs	r2, #0
 80002d2:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002d4:	187b      	adds	r3, r7, r1
 80002d6:	2208      	movs	r2, #8
 80002d8:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002da:	187b      	adds	r3, r7, r1
 80002dc:	2280      	movs	r2, #128	@ 0x80
 80002de:	0292      	lsls	r2, r2, #10
 80002e0:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2280      	movs	r2, #128	@ 0x80
 80002e6:	0492      	lsls	r2, r2, #18
 80002e8:	631a      	str	r2, [r3, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80002ea:	187b      	adds	r3, r7, r1
 80002ec:	2280      	movs	r2, #128	@ 0x80
 80002ee:	0592      	lsls	r2, r2, #22
 80002f0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f2:	187b      	adds	r3, r7, r1
 80002f4:	0018      	movs	r0, r3
 80002f6:	f003 fb75 	bl	80039e4 <HAL_RCC_OscConfig>
 80002fa:	1e03      	subs	r3, r0, #0
 80002fc:	d001      	beq.n	8000302 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80002fe:	f000 fa4b 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000302:	003b      	movs	r3, r7
 8000304:	2207      	movs	r2, #7
 8000306:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000308:	003b      	movs	r3, r7
 800030a:	2202      	movs	r2, #2
 800030c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800030e:	003b      	movs	r3, r7
 8000310:	2200      	movs	r2, #0
 8000312:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000314:	003b      	movs	r3, r7
 8000316:	2200      	movs	r2, #0
 8000318:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800031a:	003b      	movs	r3, r7
 800031c:	2102      	movs	r1, #2
 800031e:	0018      	movs	r0, r3
 8000320:	f003 fe7a 	bl	8004018 <HAL_RCC_ClockConfig>
 8000324:	1e03      	subs	r3, r0, #0
 8000326:	d001      	beq.n	800032c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000328:	f000 fa36 	bl	8000798 <Error_Handler>
  }
}
 800032c:	46c0      	nop			@ (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	b013      	add	sp, #76	@ 0x4c
 8000332:	bd90      	pop	{r4, r7, pc}

08000334 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000334:	b580      	push	{r7, lr}
 8000336:	b084      	sub	sp, #16
 8000338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	0018      	movs	r0, r3
 800033e:	230c      	movs	r3, #12
 8000340:	001a      	movs	r2, r3
 8000342:	2100      	movs	r1, #0
 8000344:	f005 f87e 	bl	8005444 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000348:	4b2b      	ldr	r3, [pc, #172]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 800034a:	4a2c      	ldr	r2, [pc, #176]	@ (80003fc <MX_ADC1_Init+0xc8>)
 800034c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800034e:	4b2a      	ldr	r3, [pc, #168]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 8000350:	2280      	movs	r2, #128	@ 0x80
 8000352:	05d2      	lsls	r2, r2, #23
 8000354:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000356:	4b28      	ldr	r3, [pc, #160]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800035c:	4b26      	ldr	r3, [pc, #152]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000362:	4b25      	ldr	r3, [pc, #148]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000368:	4b23      	ldr	r3, [pc, #140]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 800036a:	2204      	movs	r2, #4
 800036c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800036e:	4b22      	ldr	r3, [pc, #136]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 8000370:	2200      	movs	r2, #0
 8000372:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000374:	4b20      	ldr	r3, [pc, #128]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 8000376:	2200      	movs	r2, #0
 8000378:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800037a:	4b1f      	ldr	r3, [pc, #124]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 800037c:	2201      	movs	r2, #1
 800037e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000380:	4b1d      	ldr	r3, [pc, #116]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 8000382:	2201      	movs	r2, #1
 8000384:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000386:	4b1c      	ldr	r3, [pc, #112]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 8000388:	2200      	movs	r2, #0
 800038a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800038c:	4b1a      	ldr	r3, [pc, #104]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 800038e:	2200      	movs	r2, #0
 8000390:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000392:	4b19      	ldr	r3, [pc, #100]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 8000394:	222c      	movs	r2, #44	@ 0x2c
 8000396:	2100      	movs	r1, #0
 8000398:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800039a:	4b17      	ldr	r3, [pc, #92]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 800039c:	2200      	movs	r2, #0
 800039e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80003a0:	4b15      	ldr	r3, [pc, #84]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80003a6:	4b14      	ldr	r3, [pc, #80]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 80003a8:	2200      	movs	r2, #0
 80003aa:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80003ac:	4b12      	ldr	r3, [pc, #72]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 80003ae:	223c      	movs	r2, #60	@ 0x3c
 80003b0:	2100      	movs	r1, #0
 80003b2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003b4:	4b10      	ldr	r3, [pc, #64]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003ba:	4b0f      	ldr	r3, [pc, #60]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 80003bc:	0018      	movs	r0, r3
 80003be:	f001 fe5f 	bl	8002080 <HAL_ADC_Init>
 80003c2:	1e03      	subs	r3, r0, #0
 80003c4:	d001      	beq.n	80003ca <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80003c6:	f000 f9e7 	bl	8000798 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003ca:	1d3b      	adds	r3, r7, #4
 80003cc:	2201      	movs	r2, #1
 80003ce:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003d0:	1d3b      	adds	r3, r7, #4
 80003d2:	2200      	movs	r2, #0
 80003d4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2200      	movs	r2, #0
 80003da:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80003dc:	1d3a      	adds	r2, r7, #4
 80003de:	4b06      	ldr	r3, [pc, #24]	@ (80003f8 <MX_ADC1_Init+0xc4>)
 80003e0:	0011      	movs	r1, r2
 80003e2:	0018      	movs	r0, r3
 80003e4:	f001 fff4 	bl	80023d0 <HAL_ADC_ConfigChannel>
 80003e8:	1e03      	subs	r3, r0, #0
 80003ea:	d001      	beq.n	80003f0 <MX_ADC1_Init+0xbc>
  {
    Error_Handler();
 80003ec:	f000 f9d4 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003f0:	46c0      	nop			@ (mov r8, r8)
 80003f2:	46bd      	mov	sp, r7
 80003f4:	b004      	add	sp, #16
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	200000a0 	.word	0x200000a0
 80003fc:	40012400 	.word	0x40012400

08000400 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000404:	4b1b      	ldr	r3, [pc, #108]	@ (8000474 <MX_I2C1_Init+0x74>)
 8000406:	4a1c      	ldr	r2, [pc, #112]	@ (8000478 <MX_I2C1_Init+0x78>)
 8000408:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10707DBC;
 800040a:	4b1a      	ldr	r3, [pc, #104]	@ (8000474 <MX_I2C1_Init+0x74>)
 800040c:	4a1b      	ldr	r2, [pc, #108]	@ (800047c <MX_I2C1_Init+0x7c>)
 800040e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000410:	4b18      	ldr	r3, [pc, #96]	@ (8000474 <MX_I2C1_Init+0x74>)
 8000412:	2200      	movs	r2, #0
 8000414:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000416:	4b17      	ldr	r3, [pc, #92]	@ (8000474 <MX_I2C1_Init+0x74>)
 8000418:	2201      	movs	r2, #1
 800041a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800041c:	4b15      	ldr	r3, [pc, #84]	@ (8000474 <MX_I2C1_Init+0x74>)
 800041e:	2200      	movs	r2, #0
 8000420:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000422:	4b14      	ldr	r3, [pc, #80]	@ (8000474 <MX_I2C1_Init+0x74>)
 8000424:	2200      	movs	r2, #0
 8000426:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000428:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <MX_I2C1_Init+0x74>)
 800042a:	2200      	movs	r2, #0
 800042c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800042e:	4b11      	ldr	r3, [pc, #68]	@ (8000474 <MX_I2C1_Init+0x74>)
 8000430:	2200      	movs	r2, #0
 8000432:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000434:	4b0f      	ldr	r3, [pc, #60]	@ (8000474 <MX_I2C1_Init+0x74>)
 8000436:	2200      	movs	r2, #0
 8000438:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800043a:	4b0e      	ldr	r3, [pc, #56]	@ (8000474 <MX_I2C1_Init+0x74>)
 800043c:	0018      	movs	r0, r3
 800043e:	f002 fd8b 	bl	8002f58 <HAL_I2C_Init>
 8000442:	1e03      	subs	r3, r0, #0
 8000444:	d001      	beq.n	800044a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000446:	f000 f9a7 	bl	8000798 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800044a:	4b0a      	ldr	r3, [pc, #40]	@ (8000474 <MX_I2C1_Init+0x74>)
 800044c:	2100      	movs	r1, #0
 800044e:	0018      	movs	r0, r3
 8000450:	f003 f9f0 	bl	8003834 <HAL_I2CEx_ConfigAnalogFilter>
 8000454:	1e03      	subs	r3, r0, #0
 8000456:	d001      	beq.n	800045c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000458:	f000 f99e 	bl	8000798 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800045c:	4b05      	ldr	r3, [pc, #20]	@ (8000474 <MX_I2C1_Init+0x74>)
 800045e:	2100      	movs	r1, #0
 8000460:	0018      	movs	r0, r3
 8000462:	f003 fa33 	bl	80038cc <HAL_I2CEx_ConfigDigitalFilter>
 8000466:	1e03      	subs	r3, r0, #0
 8000468:	d001      	beq.n	800046e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800046a:	f000 f995 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800046e:	46c0      	nop			@ (mov r8, r8)
 8000470:	46bd      	mov	sp, r7
 8000472:	bd80      	pop	{r7, pc}
 8000474:	20000160 	.word	0x20000160
 8000478:	40005400 	.word	0x40005400
 800047c:	10707dbc 	.word	0x10707dbc

08000480 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000484:	4b1b      	ldr	r3, [pc, #108]	@ (80004f4 <MX_SPI1_Init+0x74>)
 8000486:	4a1c      	ldr	r2, [pc, #112]	@ (80004f8 <MX_SPI1_Init+0x78>)
 8000488:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800048a:	4b1a      	ldr	r3, [pc, #104]	@ (80004f4 <MX_SPI1_Init+0x74>)
 800048c:	2282      	movs	r2, #130	@ 0x82
 800048e:	0052      	lsls	r2, r2, #1
 8000490:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000492:	4b18      	ldr	r3, [pc, #96]	@ (80004f4 <MX_SPI1_Init+0x74>)
 8000494:	2200      	movs	r2, #0
 8000496:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000498:	4b16      	ldr	r3, [pc, #88]	@ (80004f4 <MX_SPI1_Init+0x74>)
 800049a:	22e0      	movs	r2, #224	@ 0xe0
 800049c:	00d2      	lsls	r2, r2, #3
 800049e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80004a0:	4b14      	ldr	r3, [pc, #80]	@ (80004f4 <MX_SPI1_Init+0x74>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80004a6:	4b13      	ldr	r3, [pc, #76]	@ (80004f4 <MX_SPI1_Init+0x74>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80004ac:	4b11      	ldr	r3, [pc, #68]	@ (80004f4 <MX_SPI1_Init+0x74>)
 80004ae:	2280      	movs	r2, #128	@ 0x80
 80004b0:	0092      	lsls	r2, r2, #2
 80004b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80004b4:	4b0f      	ldr	r3, [pc, #60]	@ (80004f4 <MX_SPI1_Init+0x74>)
 80004b6:	2220      	movs	r2, #32
 80004b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80004ba:	4b0e      	ldr	r3, [pc, #56]	@ (80004f4 <MX_SPI1_Init+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80004c0:	4b0c      	ldr	r3, [pc, #48]	@ (80004f4 <MX_SPI1_Init+0x74>)
 80004c2:	2200      	movs	r2, #0
 80004c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80004c6:	4b0b      	ldr	r3, [pc, #44]	@ (80004f4 <MX_SPI1_Init+0x74>)
 80004c8:	2200      	movs	r2, #0
 80004ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80004cc:	4b09      	ldr	r3, [pc, #36]	@ (80004f4 <MX_SPI1_Init+0x74>)
 80004ce:	2207      	movs	r2, #7
 80004d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80004d2:	4b08      	ldr	r3, [pc, #32]	@ (80004f4 <MX_SPI1_Init+0x74>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80004d8:	4b06      	ldr	r3, [pc, #24]	@ (80004f4 <MX_SPI1_Init+0x74>)
 80004da:	2208      	movs	r2, #8
 80004dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80004de:	4b05      	ldr	r3, [pc, #20]	@ (80004f4 <MX_SPI1_Init+0x74>)
 80004e0:	0018      	movs	r0, r3
 80004e2:	f004 f89d 	bl	8004620 <HAL_SPI_Init>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d001      	beq.n	80004ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80004ea:	f000 f955 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80004ee:	46c0      	nop			@ (mov r8, r8)
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	200001b4 	.word	0x200001b4
 80004f8:	40013000 	.word	0x40013000

080004fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b088      	sub	sp, #32
 8000500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000502:	2310      	movs	r3, #16
 8000504:	18fb      	adds	r3, r7, r3
 8000506:	0018      	movs	r0, r3
 8000508:	2310      	movs	r3, #16
 800050a:	001a      	movs	r2, r3
 800050c:	2100      	movs	r1, #0
 800050e:	f004 ff99 	bl	8005444 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000512:	1d3b      	adds	r3, r7, #4
 8000514:	0018      	movs	r0, r3
 8000516:	230c      	movs	r3, #12
 8000518:	001a      	movs	r2, r3
 800051a:	2100      	movs	r1, #0
 800051c:	f004 ff92 	bl	8005444 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000520:	4b21      	ldr	r3, [pc, #132]	@ (80005a8 <MX_TIM1_Init+0xac>)
 8000522:	4a22      	ldr	r2, [pc, #136]	@ (80005ac <MX_TIM1_Init+0xb0>)
 8000524:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000526:	4b20      	ldr	r3, [pc, #128]	@ (80005a8 <MX_TIM1_Init+0xac>)
 8000528:	2200      	movs	r2, #0
 800052a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800052c:	4b1e      	ldr	r3, [pc, #120]	@ (80005a8 <MX_TIM1_Init+0xac>)
 800052e:	2200      	movs	r2, #0
 8000530:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000532:	4b1d      	ldr	r3, [pc, #116]	@ (80005a8 <MX_TIM1_Init+0xac>)
 8000534:	4a1e      	ldr	r2, [pc, #120]	@ (80005b0 <MX_TIM1_Init+0xb4>)
 8000536:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000538:	4b1b      	ldr	r3, [pc, #108]	@ (80005a8 <MX_TIM1_Init+0xac>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800053e:	4b1a      	ldr	r3, [pc, #104]	@ (80005a8 <MX_TIM1_Init+0xac>)
 8000540:	2200      	movs	r2, #0
 8000542:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000544:	4b18      	ldr	r3, [pc, #96]	@ (80005a8 <MX_TIM1_Init+0xac>)
 8000546:	2200      	movs	r2, #0
 8000548:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800054a:	4b17      	ldr	r3, [pc, #92]	@ (80005a8 <MX_TIM1_Init+0xac>)
 800054c:	0018      	movs	r0, r3
 800054e:	f004 fc77 	bl	8004e40 <HAL_TIM_Base_Init>
 8000552:	1e03      	subs	r3, r0, #0
 8000554:	d001      	beq.n	800055a <MX_TIM1_Init+0x5e>
  {
    Error_Handler();
 8000556:	f000 f91f 	bl	8000798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800055a:	2110      	movs	r1, #16
 800055c:	187b      	adds	r3, r7, r1
 800055e:	2280      	movs	r2, #128	@ 0x80
 8000560:	0152      	lsls	r2, r2, #5
 8000562:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000564:	187a      	adds	r2, r7, r1
 8000566:	4b10      	ldr	r3, [pc, #64]	@ (80005a8 <MX_TIM1_Init+0xac>)
 8000568:	0011      	movs	r1, r2
 800056a:	0018      	movs	r0, r3
 800056c:	f004 fd0c 	bl	8004f88 <HAL_TIM_ConfigClockSource>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8000574:	f000 f910 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2200      	movs	r2, #0
 8000582:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800058a:	1d3a      	adds	r2, r7, #4
 800058c:	4b06      	ldr	r3, [pc, #24]	@ (80005a8 <MX_TIM1_Init+0xac>)
 800058e:	0011      	movs	r1, r2
 8000590:	0018      	movs	r0, r3
 8000592:	f004 feef 	bl	8005374 <HAL_TIMEx_MasterConfigSynchronization>
 8000596:	1e03      	subs	r3, r0, #0
 8000598:	d001      	beq.n	800059e <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 800059a:	f000 f8fd 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800059e:	46c0      	nop			@ (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b008      	add	sp, #32
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			@ (mov r8, r8)
 80005a8:	20000218 	.word	0x20000218
 80005ac:	40012c00 	.word	0x40012c00
 80005b0:	0000ffff 	.word	0x0000ffff

080005b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005ba:	4b0c      	ldr	r3, [pc, #48]	@ (80005ec <MX_DMA_Init+0x38>)
 80005bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80005be:	4b0b      	ldr	r3, [pc, #44]	@ (80005ec <MX_DMA_Init+0x38>)
 80005c0:	2101      	movs	r1, #1
 80005c2:	430a      	orrs	r2, r1
 80005c4:	639a      	str	r2, [r3, #56]	@ 0x38
 80005c6:	4b09      	ldr	r3, [pc, #36]	@ (80005ec <MX_DMA_Init+0x38>)
 80005c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80005ca:	2201      	movs	r2, #1
 80005cc:	4013      	ands	r3, r2
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	2009      	movs	r0, #9
 80005d8:	f002 f97e 	bl	80028d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80005dc:	2009      	movs	r0, #9
 80005de:	f002 f990 	bl	8002902 <HAL_NVIC_EnableIRQ>

}
 80005e2:	46c0      	nop			@ (mov r8, r8)
 80005e4:	46bd      	mov	sp, r7
 80005e6:	b002      	add	sp, #8
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	46c0      	nop			@ (mov r8, r8)
 80005ec:	40021000 	.word	0x40021000

080005f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f0:	b590      	push	{r4, r7, lr}
 80005f2:	b089      	sub	sp, #36	@ 0x24
 80005f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	240c      	movs	r4, #12
 80005f8:	193b      	adds	r3, r7, r4
 80005fa:	0018      	movs	r0, r3
 80005fc:	2314      	movs	r3, #20
 80005fe:	001a      	movs	r2, r3
 8000600:	2100      	movs	r1, #0
 8000602:	f004 ff1f 	bl	8005444 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000606:	4b34      	ldr	r3, [pc, #208]	@ (80006d8 <MX_GPIO_Init+0xe8>)
 8000608:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800060a:	4b33      	ldr	r3, [pc, #204]	@ (80006d8 <MX_GPIO_Init+0xe8>)
 800060c:	2102      	movs	r1, #2
 800060e:	430a      	orrs	r2, r1
 8000610:	635a      	str	r2, [r3, #52]	@ 0x34
 8000612:	4b31      	ldr	r3, [pc, #196]	@ (80006d8 <MX_GPIO_Init+0xe8>)
 8000614:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000616:	2202      	movs	r2, #2
 8000618:	4013      	ands	r3, r2
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4b2e      	ldr	r3, [pc, #184]	@ (80006d8 <MX_GPIO_Init+0xe8>)
 8000620:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000622:	4b2d      	ldr	r3, [pc, #180]	@ (80006d8 <MX_GPIO_Init+0xe8>)
 8000624:	2104      	movs	r1, #4
 8000626:	430a      	orrs	r2, r1
 8000628:	635a      	str	r2, [r3, #52]	@ 0x34
 800062a:	4b2b      	ldr	r3, [pc, #172]	@ (80006d8 <MX_GPIO_Init+0xe8>)
 800062c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800062e:	2204      	movs	r2, #4
 8000630:	4013      	ands	r3, r2
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000636:	4b28      	ldr	r3, [pc, #160]	@ (80006d8 <MX_GPIO_Init+0xe8>)
 8000638:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800063a:	4b27      	ldr	r3, [pc, #156]	@ (80006d8 <MX_GPIO_Init+0xe8>)
 800063c:	2101      	movs	r1, #1
 800063e:	430a      	orrs	r2, r1
 8000640:	635a      	str	r2, [r3, #52]	@ 0x34
 8000642:	4b25      	ldr	r3, [pc, #148]	@ (80006d8 <MX_GPIO_Init+0xe8>)
 8000644:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000646:	2201      	movs	r2, #1
 8000648:	4013      	ands	r3, r2
 800064a:	603b      	str	r3, [r7, #0]
 800064c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, NRF24L_CE_Pin|NRF24L_CSN_Pin, GPIO_PIN_RESET);
 800064e:	2390      	movs	r3, #144	@ 0x90
 8000650:	0119      	lsls	r1, r3, #4
 8000652:	23a0      	movs	r3, #160	@ 0xa0
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	2200      	movs	r2, #0
 8000658:	0018      	movs	r0, r3
 800065a:	f002 fc5f 	bl	8002f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NRF24L_interrupt_Pin */
  GPIO_InitStruct.Pin = NRF24L_interrupt_Pin;
 800065e:	193b      	adds	r3, r7, r4
 8000660:	2280      	movs	r2, #128	@ 0x80
 8000662:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000664:	193b      	adds	r3, r7, r4
 8000666:	2288      	movs	r2, #136	@ 0x88
 8000668:	0352      	lsls	r2, r2, #13
 800066a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	193b      	adds	r3, r7, r4
 800066e:	2200      	movs	r2, #0
 8000670:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(NRF24L_interrupt_GPIO_Port, &GPIO_InitStruct);
 8000672:	193a      	adds	r2, r7, r4
 8000674:	23a0      	movs	r3, #160	@ 0xa0
 8000676:	05db      	lsls	r3, r3, #23
 8000678:	0011      	movs	r1, r2
 800067a:	0018      	movs	r0, r3
 800067c:	f002 faea 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pins : NRF24L_CE_Pin NRF24L_CSN_Pin */
  GPIO_InitStruct.Pin = NRF24L_CE_Pin|NRF24L_CSN_Pin;
 8000680:	0021      	movs	r1, r4
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2290      	movs	r2, #144	@ 0x90
 8000686:	0112      	lsls	r2, r2, #4
 8000688:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068a:	000c      	movs	r4, r1
 800068c:	193b      	adds	r3, r7, r4
 800068e:	2201      	movs	r2, #1
 8000690:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	193b      	adds	r3, r7, r4
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069e:	193a      	adds	r2, r7, r4
 80006a0:	23a0      	movs	r3, #160	@ 0xa0
 80006a2:	05db      	lsls	r3, r3, #23
 80006a4:	0011      	movs	r1, r2
 80006a6:	0018      	movs	r0, r3
 80006a8:	f002 fad4 	bl	8002c54 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buton_1_Pin */
  GPIO_InitStruct.Pin = Buton_1_Pin;
 80006ac:	0021      	movs	r1, r4
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2280      	movs	r2, #128	@ 0x80
 80006b2:	0152      	lsls	r2, r2, #5
 80006b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Buton_1_GPIO_Port, &GPIO_InitStruct);
 80006c2:	187a      	adds	r2, r7, r1
 80006c4:	23a0      	movs	r3, #160	@ 0xa0
 80006c6:	05db      	lsls	r3, r3, #23
 80006c8:	0011      	movs	r1, r2
 80006ca:	0018      	movs	r0, r3
 80006cc:	f002 fac2 	bl	8002c54 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006d0:	46c0      	nop			@ (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b009      	add	sp, #36	@ 0x24
 80006d6:	bd90      	pop	{r4, r7, pc}
 80006d8:	40021000 	.word	0x40021000

080006dc <NRF_main_init>:
		//Error
	}
}

void NRF_main_init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
	/* ---- myNRF24L01+ Definitions ---- */
	myNRF.hspi = &hspi1;
 80006e0:	4b26      	ldr	r3, [pc, #152]	@ (800077c <NRF_main_init+0xa0>)
 80006e2:	4a27      	ldr	r2, [pc, #156]	@ (8000780 <NRF_main_init+0xa4>)
 80006e4:	601a      	str	r2, [r3, #0]
	myNRF.CRC_Width = nRF_CRC_WIDTH_BYTE;
 80006e6:	4b25      	ldr	r3, [pc, #148]	@ (800077c <NRF_main_init+0xa0>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	711a      	strb	r2, [r3, #4]
	myNRF.ADDR_Width = nRF_ADDR_WIDTH_5;
 80006ec:	4b23      	ldr	r3, [pc, #140]	@ (800077c <NRF_main_init+0xa0>)
 80006ee:	2203      	movs	r2, #3
 80006f0:	715a      	strb	r2, [r3, #5]
	myNRF.Data_Rate = nRF_DATA_RATE_2MBPS;
 80006f2:	4b22      	ldr	r3, [pc, #136]	@ (800077c <NRF_main_init+0xa0>)
 80006f4:	2202      	movs	r2, #2
 80006f6:	719a      	strb	r2, [r3, #6]
	myNRF.TX_Power = nRF_TX_PWR_M18dBm;
 80006f8:	4b20      	ldr	r3, [pc, #128]	@ (800077c <NRF_main_init+0xa0>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	71da      	strb	r2, [r3, #7]
	myNRF.State = nRF_STATE_RX;
 80006fe:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <NRF_main_init+0xa0>)
 8000700:	2201      	movs	r2, #1
 8000702:	721a      	strb	r2, [r3, #8]

	myNRF.RF_Channel = 1;
 8000704:	4b1d      	ldr	r3, [pc, #116]	@ (800077c <NRF_main_init+0xa0>)
 8000706:	2201      	movs	r2, #1
 8000708:	725a      	strb	r2, [r3, #9]
	myNRF.PayloadWidth = nRF_RXPW_32BYTES;
 800070a:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <NRF_main_init+0xa0>)
 800070c:	2220      	movs	r2, #32
 800070e:	729a      	strb	r2, [r3, #10]
	myNRF.RetransmitCount = nRF_RETX_DISABLED;// nRF_RETX_COUNT_15;
 8000710:	4b1a      	ldr	r3, [pc, #104]	@ (800077c <NRF_main_init+0xa0>)
 8000712:	2200      	movs	r2, #0
 8000714:	72da      	strb	r2, [r3, #11]
	myNRF.RetransmitDelay = nRF_RETX_DELAY_250uS; //nRF_RETX_DELAY_4000uS;
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <NRF_main_init+0xa0>)
 8000718:	2200      	movs	r2, #0
 800071a:	731a      	strb	r2, [r3, #12]

	myNRF.RX_Address = (uint8_t *)"00001";
 800071c:	4b17      	ldr	r3, [pc, #92]	@ (800077c <NRF_main_init+0xa0>)
 800071e:	4a19      	ldr	r2, [pc, #100]	@ (8000784 <NRF_main_init+0xa8>)
 8000720:	611a      	str	r2, [r3, #16]
	myNRF.TX_Address = (uint8_t *)"00000";
 8000722:	4b16      	ldr	r3, [pc, #88]	@ (800077c <NRF_main_init+0xa0>)
 8000724:	4a18      	ldr	r2, [pc, #96]	@ (8000788 <NRF_main_init+0xac>)
 8000726:	615a      	str	r2, [r3, #20]

	myNRF.RX_Buffer = RXBuffer;
 8000728:	4b14      	ldr	r3, [pc, #80]	@ (800077c <NRF_main_init+0xa0>)
 800072a:	4a18      	ldr	r2, [pc, #96]	@ (800078c <NRF_main_init+0xb0>)
 800072c:	61da      	str	r2, [r3, #28]
	myNRF.TX_Buffer = TXBuffer;
 800072e:	4b13      	ldr	r3, [pc, #76]	@ (800077c <NRF_main_init+0xa0>)
 8000730:	4a17      	ldr	r2, [pc, #92]	@ (8000790 <NRF_main_init+0xb4>)
 8000732:	621a      	str	r2, [r3, #32]

	myNRF.nRF_nSS_GPIO_PORT = GPIOB;
 8000734:	4b11      	ldr	r3, [pc, #68]	@ (800077c <NRF_main_init+0xa0>)
 8000736:	4a17      	ldr	r2, [pc, #92]	@ (8000794 <NRF_main_init+0xb8>)
 8000738:	625a      	str	r2, [r3, #36]	@ 0x24
	myNRF.nRF_nSS_GPIO_PIN = GPIO_PIN_1;
 800073a:	4b10      	ldr	r3, [pc, #64]	@ (800077c <NRF_main_init+0xa0>)
 800073c:	2202      	movs	r2, #2
 800073e:	851a      	strh	r2, [r3, #40]	@ 0x28

	myNRF.nRF_CE_GPIO_PORT = GPIOB;
 8000740:	4b0e      	ldr	r3, [pc, #56]	@ (800077c <NRF_main_init+0xa0>)
 8000742:	4a14      	ldr	r2, [pc, #80]	@ (8000794 <NRF_main_init+0xb8>)
 8000744:	62da      	str	r2, [r3, #44]	@ 0x2c
	myNRF.nRF_CE_GPIO_PIN = GPIO_PIN_0;
 8000746:	4b0d      	ldr	r3, [pc, #52]	@ (800077c <NRF_main_init+0xa0>)
 8000748:	2201      	movs	r2, #1
 800074a:	861a      	strh	r2, [r3, #48]	@ 0x30

	//ekleme
	myNRF.RXIRQ = 0;
 800074c:	4b0b      	ldr	r3, [pc, #44]	@ (800077c <NRF_main_init+0xa0>)
 800074e:	2232      	movs	r2, #50	@ 0x32
 8000750:	2100      	movs	r1, #0
 8000752:	5499      	strb	r1, [r3, r2]
	myNRF.TXIRQ = 0;
 8000754:	4b09      	ldr	r3, [pc, #36]	@ (800077c <NRF_main_init+0xa0>)
 8000756:	2233      	movs	r2, #51	@ 0x33
 8000758:	2100      	movs	r1, #0
 800075a:	5499      	strb	r1, [r3, r2]
	myNRF.MaxReIRQ = 0;
 800075c:	4b07      	ldr	r3, [pc, #28]	@ (800077c <NRF_main_init+0xa0>)
 800075e:	2234      	movs	r2, #52	@ 0x34
 8000760:	2100      	movs	r1, #0
 8000762:	5499      	strb	r1, [r3, r2]
	/* ---- myNRF24L01+ Definitions ---- */


	if(HAL_nRF24L01P_Init(&myNRF) != HAL_OK)
 8000764:	4b05      	ldr	r3, [pc, #20]	@ (800077c <NRF_main_init+0xa0>)
 8000766:	0018      	movs	r0, r3
 8000768:	f000 f81c 	bl	80007a4 <HAL_nRF24L01P_Init>
 800076c:	1e03      	subs	r3, r0, #0
 800076e:	d001      	beq.n	8000774 <NRF_main_init+0x98>
	{
		Error_Handler();
 8000770:	f000 f812 	bl	8000798 <Error_Handler>
	}

}
 8000774:	46c0      	nop			@ (mov r8, r8)
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			@ (mov r8, r8)
 800077c:	20000028 	.word	0x20000028
 8000780:	200001b4 	.word	0x200001b4
 8000784:	080054b4 	.word	0x080054b4
 8000788:	080054bc 	.word	0x080054bc
 800078c:	20000060 	.word	0x20000060
 8000790:	20000080 	.word	0x20000080
 8000794:	50000400 	.word	0x50000400

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	46c0      	nop			@ (mov r8, r8)
 80007a2:	e7fd      	b.n	80007a0 <Error_Handler+0x8>

080007a4 <HAL_nRF24L01P_Init>:
#include "nRF24L01P.h"
#include "dwt_delay.h"

HAL_StatusTypeDef HAL_nRF24L01P_Init(nRF24L01P *nRF)
{
 80007a4:	b590      	push	{r4, r7, lr}
 80007a6:	b085      	sub	sp, #20
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	HAL_StatusTypeDef retValue = HAL_OK;
 80007ac:	230f      	movs	r3, #15
 80007ae:	18fb      	adds	r3, r7, r3
 80007b0:	2200      	movs	r2, #0
 80007b2:	701a      	strb	r2, [r3, #0]
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_PowerUP(nRF, nRF_ENABLE) != HAL_OK)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2101      	movs	r1, #1
 80007b8:	0018      	movs	r0, r3
 80007ba:	f000 fc20 	bl	8000ffe <HAL_nRF24L01P_PowerUP>
 80007be:	1e03      	subs	r3, r0, #0
 80007c0:	d001      	beq.n	80007c6 <HAL_nRF24L01P_Init+0x22>
	{
		return HAL_ERROR;
 80007c2:	2301      	movs	r3, #1
 80007c4:	e175      	b.n	8000ab2 <HAL_nRF24L01P_Init+0x30e>
	}
	
	do {
			if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 80007c6:	230e      	movs	r3, #14
 80007c8:	18fa      	adds	r2, r7, r3
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2100      	movs	r1, #0
 80007ce:	0018      	movs	r0, r3
 80007d0:	f000 fee1 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 80007d4:	1e03      	subs	r3, r0, #0
 80007d6:	d001      	beq.n	80007dc <HAL_nRF24L01P_Init+0x38>
			{
				return HAL_ERROR;
 80007d8:	2301      	movs	r3, #1
 80007da:	e16a      	b.n	8000ab2 <HAL_nRF24L01P_Init+0x30e>
			}
	} while((regValue & 0x02) == 0x00); // Did device powered up? 
 80007dc:	230e      	movs	r3, #14
 80007de:	18fb      	adds	r3, r7, r3
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	001a      	movs	r2, r3
 80007e4:	2302      	movs	r3, #2
 80007e6:	4013      	ands	r3, r2
 80007e8:	d0ed      	beq.n	80007c6 <HAL_nRF24L01P_Init+0x22>
	
	/* ---- InitProcess ---- */
	retValue |= HAL_nRF24L01P_SetPRXWidth(nRF, nRF->PayloadWidth, nRF_DATA_PIPE_0);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	7a99      	ldrb	r1, [r3, #10]
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	0018      	movs	r0, r3
 80007f4:	f000 f962 	bl	8000abc <HAL_nRF24L01P_SetPRXWidth>
 80007f8:	0003      	movs	r3, r0
 80007fa:	0019      	movs	r1, r3
 80007fc:	240f      	movs	r4, #15
 80007fe:	193b      	adds	r3, r7, r4
 8000800:	193a      	adds	r2, r7, r4
 8000802:	7812      	ldrb	r2, [r2, #0]
 8000804:	430a      	orrs	r2, r1
 8000806:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_SetPRXAddress(nRF, nRF->RX_Address, nRF_DATA_PIPE_0);
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	6919      	ldr	r1, [r3, #16]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2200      	movs	r2, #0
 8000810:	0018      	movs	r0, r3
 8000812:	f000 f9bd 	bl	8000b90 <HAL_nRF24L01P_SetPRXAddress>
 8000816:	0003      	movs	r3, r0
 8000818:	0019      	movs	r1, r3
 800081a:	193b      	adds	r3, r7, r4
 800081c:	193a      	adds	r2, r7, r4
 800081e:	7812      	ldrb	r2, [r2, #0]
 8000820:	430a      	orrs	r2, r1
 8000822:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_SetPTXAddress(nRF, nRF->TX_Address);
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	695a      	ldr	r2, [r3, #20]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	0011      	movs	r1, r2
 800082c:	0018      	movs	r0, r3
 800082e:	f000 f997 	bl	8000b60 <HAL_nRF24L01P_SetPTXAddress>
 8000832:	0003      	movs	r3, r0
 8000834:	0019      	movs	r1, r3
 8000836:	193b      	adds	r3, r7, r4
 8000838:	193a      	adds	r2, r7, r4
 800083a:	7812      	ldrb	r2, [r2, #0]
 800083c:	430a      	orrs	r2, r1
 800083e:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_RXDataReadyIRQ(nRF, nRF_ENABLE);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2101      	movs	r1, #1
 8000844:	0018      	movs	r0, r3
 8000846:	f000 fb66 	bl	8000f16 <HAL_nRF24L01P_RXDataReadyIRQ>
 800084a:	0003      	movs	r3, r0
 800084c:	0019      	movs	r1, r3
 800084e:	193b      	adds	r3, r7, r4
 8000850:	193a      	adds	r2, r7, r4
 8000852:	7812      	ldrb	r2, [r2, #0]
 8000854:	430a      	orrs	r2, r1
 8000856:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_TXDataSentIRQ(nRF, nRF_ENABLE);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2101      	movs	r1, #1
 800085c:	0018      	movs	r0, r3
 800085e:	f000 fb23 	bl	8000ea8 <HAL_nRF24L01P_TXDataSentIRQ>
 8000862:	0003      	movs	r3, r0
 8000864:	0019      	movs	r1, r3
 8000866:	193b      	adds	r3, r7, r4
 8000868:	193a      	adds	r2, r7, r4
 800086a:	7812      	ldrb	r2, [r2, #0]
 800086c:	430a      	orrs	r2, r1
 800086e:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_MaxReTransmitIRQ(nRF, nRF_ENABLE);
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	2101      	movs	r1, #1
 8000874:	0018      	movs	r0, r3
 8000876:	f000 fae0 	bl	8000e3a <HAL_nRF24L01P_MaxReTransmitIRQ>
 800087a:	0003      	movs	r3, r0
 800087c:	0019      	movs	r1, r3
 800087e:	193b      	adds	r3, r7, r4
 8000880:	193a      	adds	r2, r7, r4
 8000882:	7812      	ldrb	r2, [r2, #0]
 8000884:	430a      	orrs	r2, r1
 8000886:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_CRC(nRF, nRF_ENABLE);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2101      	movs	r1, #1
 800088c:	0018      	movs	r0, r3
 800088e:	f000 fc24 	bl	80010da <HAL_nRF24L01P_CRC>
 8000892:	0003      	movs	r3, r0
 8000894:	0019      	movs	r1, r3
 8000896:	193b      	adds	r3, r7, r4
 8000898:	193a      	adds	r2, r7, r4
 800089a:	7812      	ldrb	r2, [r2, #0]
 800089c:	430a      	orrs	r2, r1
 800089e:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_SetCRCWidth(nRF, nRF->CRC_Width);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	791a      	ldrb	r2, [r3, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	0011      	movs	r1, r2
 80008a8:	0018      	movs	r0, r3
 80008aa:	f000 fbdf 	bl	800106c <HAL_nRF24L01P_SetCRCWidth>
 80008ae:	0003      	movs	r3, r0
 80008b0:	0019      	movs	r1, r3
 80008b2:	193b      	adds	r3, r7, r4
 80008b4:	193a      	adds	r2, r7, r4
 80008b6:	7812      	ldrb	r2, [r2, #0]
 80008b8:	430a      	orrs	r2, r1
 80008ba:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_SetAddressWidth(nRF, nRF->ADDR_Width);
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	795a      	ldrb	r2, [r3, #5]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	0011      	movs	r1, r2
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 fce3 	bl	8001290 <HAL_nRF24L01P_SetAddressWidth>
 80008ca:	0003      	movs	r3, r0
 80008cc:	0019      	movs	r1, r3
 80008ce:	193b      	adds	r3, r7, r4
 80008d0:	193a      	adds	r2, r7, r4
 80008d2:	7812      	ldrb	r2, [r2, #0]
 80008d4:	430a      	orrs	r2, r1
 80008d6:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_SetRFChannel(nRF, nRF->RF_Channel);
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	7a5a      	ldrb	r2, [r3, #9]
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	0011      	movs	r1, r2
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 fd7e 	bl	80013e2 <HAL_nRF24L01P_SetRFChannel>
 80008e6:	0003      	movs	r3, r0
 80008e8:	0019      	movs	r1, r3
 80008ea:	193b      	adds	r3, r7, r4
 80008ec:	193a      	adds	r2, r7, r4
 80008ee:	7812      	ldrb	r2, [r2, #0]
 80008f0:	430a      	orrs	r2, r1
 80008f2:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_SetDataRate(nRF, nRF->Data_Rate);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	799a      	ldrb	r2, [r3, #6]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	0011      	movs	r1, r2
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fdb3 	bl	8001468 <HAL_nRF24L01P_SetDataRate>
 8000902:	0003      	movs	r3, r0
 8000904:	0019      	movs	r1, r3
 8000906:	193b      	adds	r3, r7, r4
 8000908:	193a      	adds	r2, r7, r4
 800090a:	7812      	ldrb	r2, [r2, #0]
 800090c:	430a      	orrs	r2, r1
 800090e:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_SetRetransmissionCount(nRF, nRF->RetransmitCount);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	7ada      	ldrb	r2, [r3, #11]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	0011      	movs	r1, r2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 fd2b 	bl	8001374 <HAL_nRF24L01P_SetRetransmissionCount>
 800091e:	0003      	movs	r3, r0
 8000920:	0019      	movs	r1, r3
 8000922:	193b      	adds	r3, r7, r4
 8000924:	193a      	adds	r2, r7, r4
 8000926:	7812      	ldrb	r2, [r2, #0]
 8000928:	430a      	orrs	r2, r1
 800092a:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_SetRetransmissionDelay(nRF, nRF->RetransmitDelay);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7b1a      	ldrb	r2, [r3, #12]
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	0011      	movs	r1, r2
 8000934:	0018      	movs	r0, r3
 8000936:	f000 fce2 	bl	80012fe <HAL_nRF24L01P_SetRetransmissionDelay>
 800093a:	0003      	movs	r3, r0
 800093c:	0019      	movs	r1, r3
 800093e:	193b      	adds	r3, r7, r4
 8000940:	193a      	adds	r2, r7, r4
 8000942:	7812      	ldrb	r2, [r2, #0]
 8000944:	430a      	orrs	r2, r1
 8000946:	701a      	strb	r2, [r3, #0]
	
	retValue |= HAL_nRF24L01P_DynACK(nRF, nRF_DISABLE);
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	2100      	movs	r1, #0
 800094c:	0018      	movs	r0, r3
 800094e:	f000 fa3d 	bl	8000dcc <HAL_nRF24L01P_DynACK>
 8000952:	0003      	movs	r3, r0
 8000954:	0019      	movs	r1, r3
 8000956:	193b      	adds	r3, r7, r4
 8000958:	193a      	adds	r2, r7, r4
 800095a:	7812      	ldrb	r2, [r2, #0]
 800095c:	430a      	orrs	r2, r1
 800095e:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_ACKPayload(nRF, nRF_DISABLE);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	2100      	movs	r1, #0
 8000964:	0018      	movs	r0, r3
 8000966:	f000 f9fa 	bl	8000d5e <HAL_nRF24L01P_ACKPayload>
 800096a:	0003      	movs	r3, r0
 800096c:	0019      	movs	r1, r3
 800096e:	193b      	adds	r3, r7, r4
 8000970:	193a      	adds	r2, r7, r4
 8000972:	7812      	ldrb	r2, [r2, #0]
 8000974:	430a      	orrs	r2, r1
 8000976:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_DynPayload(nRF, nRF_DISABLE);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	2100      	movs	r1, #0
 800097c:	0018      	movs	r0, r3
 800097e:	f000 f9b7 	bl	8000cf0 <HAL_nRF24L01P_DynPayload>
 8000982:	0003      	movs	r3, r0
 8000984:	0019      	movs	r1, r3
 8000986:	193b      	adds	r3, r7, r4
 8000988:	193a      	adds	r2, r7, r4
 800098a:	7812      	ldrb	r2, [r2, #0]
 800098c:	430a      	orrs	r2, r1
 800098e:	701a      	strb	r2, [r3, #0]
	
	retValue |= HAL_nRF24L01P_RXPipe(nRF, nRF_DATA_PIPE_0, nRF_ENABLE);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2201      	movs	r2, #1
 8000994:	2100      	movs	r1, #0
 8000996:	0018      	movs	r0, r3
 8000998:	f000 fc28 	bl	80011ec <HAL_nRF24L01P_RXPipe>
 800099c:	0003      	movs	r3, r0
 800099e:	0019      	movs	r1, r3
 80009a0:	193b      	adds	r3, r7, r4
 80009a2:	193a      	adds	r2, r7, r4
 80009a4:	7812      	ldrb	r2, [r2, #0]
 80009a6:	430a      	orrs	r2, r1
 80009a8:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_DPLPipe(nRF, nRF_DATA_PIPE_0, nRF_ENABLE);
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2201      	movs	r2, #1
 80009ae:	2100      	movs	r1, #0
 80009b0:	0018      	movs	r0, r3
 80009b2:	f000 f951 	bl	8000c58 <HAL_nRF24L01P_DPLPipe>
 80009b6:	0003      	movs	r3, r0
 80009b8:	0019      	movs	r1, r3
 80009ba:	193b      	adds	r3, r7, r4
 80009bc:	193a      	adds	r2, r7, r4
 80009be:	7812      	ldrb	r2, [r2, #0]
 80009c0:	430a      	orrs	r2, r1
 80009c2:	701a      	strb	r2, [r3, #0]
	
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_0, nRF_ENABLE);
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2201      	movs	r2, #1
 80009c8:	2100      	movs	r1, #0
 80009ca:	0018      	movs	r0, r3
 80009cc:	f000 fbbc 	bl	8001148 <HAL_nRF24L01P_AutoACK>
 80009d0:	0003      	movs	r3, r0
 80009d2:	0019      	movs	r1, r3
 80009d4:	193b      	adds	r3, r7, r4
 80009d6:	193a      	adds	r2, r7, r4
 80009d8:	7812      	ldrb	r2, [r2, #0]
 80009da:	430a      	orrs	r2, r1
 80009dc:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_1, nRF_DISABLE);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	2200      	movs	r2, #0
 80009e2:	2101      	movs	r1, #1
 80009e4:	0018      	movs	r0, r3
 80009e6:	f000 fbaf 	bl	8001148 <HAL_nRF24L01P_AutoACK>
 80009ea:	0003      	movs	r3, r0
 80009ec:	0019      	movs	r1, r3
 80009ee:	193b      	adds	r3, r7, r4
 80009f0:	193a      	adds	r2, r7, r4
 80009f2:	7812      	ldrb	r2, [r2, #0]
 80009f4:	430a      	orrs	r2, r1
 80009f6:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_2, nRF_DISABLE);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2200      	movs	r2, #0
 80009fc:	2102      	movs	r1, #2
 80009fe:	0018      	movs	r0, r3
 8000a00:	f000 fba2 	bl	8001148 <HAL_nRF24L01P_AutoACK>
 8000a04:	0003      	movs	r3, r0
 8000a06:	0019      	movs	r1, r3
 8000a08:	193b      	adds	r3, r7, r4
 8000a0a:	193a      	adds	r2, r7, r4
 8000a0c:	7812      	ldrb	r2, [r2, #0]
 8000a0e:	430a      	orrs	r2, r1
 8000a10:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_3, nRF_DISABLE);
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2200      	movs	r2, #0
 8000a16:	2103      	movs	r1, #3
 8000a18:	0018      	movs	r0, r3
 8000a1a:	f000 fb95 	bl	8001148 <HAL_nRF24L01P_AutoACK>
 8000a1e:	0003      	movs	r3, r0
 8000a20:	0019      	movs	r1, r3
 8000a22:	193b      	adds	r3, r7, r4
 8000a24:	193a      	adds	r2, r7, r4
 8000a26:	7812      	ldrb	r2, [r2, #0]
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_4, nRF_DISABLE);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	2200      	movs	r2, #0
 8000a30:	2104      	movs	r1, #4
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 fb88 	bl	8001148 <HAL_nRF24L01P_AutoACK>
 8000a38:	0003      	movs	r3, r0
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	193a      	adds	r2, r7, r4
 8000a40:	7812      	ldrb	r2, [r2, #0]
 8000a42:	430a      	orrs	r2, r1
 8000a44:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_AutoACK(nRF, nRF_DATA_PIPE_5, nRF_DISABLE);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	2105      	movs	r1, #5
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	f000 fb7b 	bl	8001148 <HAL_nRF24L01P_AutoACK>
 8000a52:	0003      	movs	r3, r0
 8000a54:	0019      	movs	r1, r3
 8000a56:	193b      	adds	r3, r7, r4
 8000a58:	193a      	adds	r2, r7, r4
 8000a5a:	7812      	ldrb	r2, [r2, #0]
 8000a5c:	430a      	orrs	r2, r1
 8000a5e:	701a      	strb	r2, [r3, #0]
	
	retValue |= HAL_nRF24L01P_ClearInterrupts(nRF);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	0018      	movs	r0, r3
 8000a64:	f000 fcda 	bl	800141c <HAL_nRF24L01P_ClearInterrupts>
 8000a68:	0003      	movs	r3, r0
 8000a6a:	0019      	movs	r1, r3
 8000a6c:	193b      	adds	r3, r7, r4
 8000a6e:	193a      	adds	r2, r7, r4
 8000a70:	7812      	ldrb	r2, [r2, #0]
 8000a72:	430a      	orrs	r2, r1
 8000a74:	701a      	strb	r2, [r3, #0]
	
	retValue |= HAL_nRF24L01P_TXRX(nRF, nRF_STATE_RX);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	2101      	movs	r1, #1
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f000 fa82 	bl	8000f84 <HAL_nRF24L01P_TXRX>
 8000a80:	0003      	movs	r3, r0
 8000a82:	0019      	movs	r1, r3
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	193a      	adds	r2, r7, r4
 8000a88:	7812      	ldrb	r2, [r2, #0]
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	701a      	strb	r2, [r3, #0]
	retValue |= HAL_nRF24L01P_FlushRX(nRF);
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	0018      	movs	r0, r3
 8000a92:	f000 fd46 	bl	8001522 <HAL_nRF24L01P_FlushRX>
 8000a96:	0003      	movs	r3, r0
 8000a98:	0019      	movs	r1, r3
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	193a      	adds	r2, r7, r4
 8000a9e:	7812      	ldrb	r2, [r2, #0]
 8000aa0:	430a      	orrs	r2, r1
 8000aa2:	701a      	strb	r2, [r3, #0]
	
	if(retValue != HAL_OK)
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_nRF24L01P_Init+0x30c>
	{
		return HAL_ERROR;
 8000aac:	2301      	movs	r3, #1
 8000aae:	e000      	b.n	8000ab2 <HAL_nRF24L01P_Init+0x30e>
	}

	return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	0018      	movs	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	b005      	add	sp, #20
 8000ab8:	bd90      	pop	{r4, r7, pc}
	...

08000abc <HAL_nRF24L01P_SetPRXWidth>:

	return HAL_OK;
}

HAL_StatusTypeDef HAL_nRF24L01P_SetPRXWidth(nRF24L01P *nRF, nRF_PRX_WIDTH Width, nRF_DATA_PIPE Pipe)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
 8000ac4:	0008      	movs	r0, r1
 8000ac6:	0011      	movs	r1, r2
 8000ac8:	1cfb      	adds	r3, r7, #3
 8000aca:	1c02      	adds	r2, r0, #0
 8000acc:	701a      	strb	r2, [r3, #0]
 8000ace:	1cbb      	adds	r3, r7, #2
 8000ad0:	1c0a      	adds	r2, r1, #0
 8000ad2:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regAddr, regData;
	regData = Width & 0x3F;
 8000ad4:	1cfb      	adds	r3, r7, #3
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	223f      	movs	r2, #63	@ 0x3f
 8000ada:	4013      	ands	r3, r2
 8000adc:	b2da      	uxtb	r2, r3
 8000ade:	230e      	movs	r3, #14
 8000ae0:	18fb      	adds	r3, r7, r3
 8000ae2:	701a      	strb	r2, [r3, #0]
	/* ---- Pre Process ---- */
	switch(Pipe)
 8000ae4:	1cbb      	adds	r3, r7, #2
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	2b05      	cmp	r3, #5
 8000aea:	d822      	bhi.n	8000b32 <HAL_nRF24L01P_SetPRXWidth+0x76>
 8000aec:	009a      	lsls	r2, r3, #2
 8000aee:	4b1b      	ldr	r3, [pc, #108]	@ (8000b5c <HAL_nRF24L01P_SetPRXWidth+0xa0>)
 8000af0:	18d3      	adds	r3, r2, r3
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	469f      	mov	pc, r3
	{
		case 0: //P0
			regAddr = nRF_RX_PW_P0;
 8000af6:	230f      	movs	r3, #15
 8000af8:	18fb      	adds	r3, r7, r3
 8000afa:	2211      	movs	r2, #17
 8000afc:	701a      	strb	r2, [r3, #0]
		break;
 8000afe:	e01a      	b.n	8000b36 <HAL_nRF24L01P_SetPRXWidth+0x7a>
		case 1: //P1
			regAddr = nRF_RX_PW_P1;
 8000b00:	230f      	movs	r3, #15
 8000b02:	18fb      	adds	r3, r7, r3
 8000b04:	2212      	movs	r2, #18
 8000b06:	701a      	strb	r2, [r3, #0]
		break;
 8000b08:	e015      	b.n	8000b36 <HAL_nRF24L01P_SetPRXWidth+0x7a>
		case 2: //P2
			regAddr = nRF_RX_PW_P2;
 8000b0a:	230f      	movs	r3, #15
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	2213      	movs	r2, #19
 8000b10:	701a      	strb	r2, [r3, #0]
		break;
 8000b12:	e010      	b.n	8000b36 <HAL_nRF24L01P_SetPRXWidth+0x7a>
		case 3: //P3
			regAddr = nRF_RX_PW_P3;
 8000b14:	230f      	movs	r3, #15
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	2214      	movs	r2, #20
 8000b1a:	701a      	strb	r2, [r3, #0]
		break;
 8000b1c:	e00b      	b.n	8000b36 <HAL_nRF24L01P_SetPRXWidth+0x7a>
		case 4: //P4
			regAddr = nRF_RX_PW_P4;
 8000b1e:	230f      	movs	r3, #15
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	2215      	movs	r2, #21
 8000b24:	701a      	strb	r2, [r3, #0]
		break;
 8000b26:	e006      	b.n	8000b36 <HAL_nRF24L01P_SetPRXWidth+0x7a>
		case 5: //P5
			regAddr = nRF_RX_PW_P5;
 8000b28:	230f      	movs	r3, #15
 8000b2a:	18fb      	adds	r3, r7, r3
 8000b2c:	2216      	movs	r2, #22
 8000b2e:	701a      	strb	r2, [r3, #0]
		break;
 8000b30:	e001      	b.n	8000b36 <HAL_nRF24L01P_SetPRXWidth+0x7a>
		default:
			return HAL_ERROR;		
 8000b32:	2301      	movs	r3, #1
 8000b34:	e00d      	b.n	8000b52 <HAL_nRF24L01P_SetPRXWidth+0x96>
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, regAddr, &regData)  != HAL_OK)
 8000b36:	230e      	movs	r3, #14
 8000b38:	18fa      	adds	r2, r7, r3
 8000b3a:	230f      	movs	r3, #15
 8000b3c:	18fb      	adds	r3, r7, r3
 8000b3e:	7819      	ldrb	r1, [r3, #0]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	0018      	movs	r0, r3
 8000b44:	f000 fd06 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 8000b48:	1e03      	subs	r3, r0, #0
 8000b4a:	d001      	beq.n	8000b50 <HAL_nRF24L01P_SetPRXWidth+0x94>
	{
		return HAL_ERROR;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	e000      	b.n	8000b52 <HAL_nRF24L01P_SetPRXWidth+0x96>
	}
	return HAL_OK;
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	0018      	movs	r0, r3
 8000b54:	46bd      	mov	sp, r7
 8000b56:	b004      	add	sp, #16
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	46c0      	nop			@ (mov r8, r8)
 8000b5c:	08005508 	.word	0x08005508

08000b60 <HAL_nRF24L01P_SetPTXAddress>:

HAL_StatusTypeDef HAL_nRF24L01P_SetPTXAddress(nRF24L01P *nRF, uint8_t *pRegData)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b086      	sub	sp, #24
 8000b64:	af02      	add	r7, sp, #8
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	6039      	str	r1, [r7, #0]
	/* ---- Local Vars. ---- */
	uint8_t Zero[5];
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_REGISTER + nRF_TX_ADDR, pRegData, Zero, 5) != HAL_OK)
 8000b6a:	2308      	movs	r3, #8
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	2105      	movs	r1, #5
 8000b74:	9100      	str	r1, [sp, #0]
 8000b76:	2130      	movs	r1, #48	@ 0x30
 8000b78:	f000 fd2d 	bl	80015d6 <HAL_nRF24L01P_SendCommand>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d001      	beq.n	8000b84 <HAL_nRF24L01P_SetPTXAddress+0x24>
	{
		return HAL_ERROR;
 8000b80:	2301      	movs	r3, #1
 8000b82:	e000      	b.n	8000b86 <HAL_nRF24L01P_SetPTXAddress+0x26>
	}
	return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	0018      	movs	r0, r3
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	b004      	add	sp, #16
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_nRF24L01P_SetPRXAddress>:

HAL_StatusTypeDef HAL_nRF24L01P_SetPRXAddress(nRF24L01P *nRF, uint8_t *pRegData, nRF_DATA_PIPE Pipe)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b089      	sub	sp, #36	@ 0x24
 8000b94:	af02      	add	r7, sp, #8
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t Zero[5];
	uint8_t Size;
	uint8_t regAddr;
	/* ---- Pre Process ---- */
	switch(Pipe)
 8000b9e:	1dfb      	adds	r3, r7, #7
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b05      	cmp	r3, #5
 8000ba4:	d83a      	bhi.n	8000c1c <HAL_nRF24L01P_SetPRXAddress+0x8c>
 8000ba6:	009a      	lsls	r2, r3, #2
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c54 <HAL_nRF24L01P_SetPRXAddress+0xc4>)
 8000baa:	18d3      	adds	r3, r2, r3
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	469f      	mov	pc, r3
	{
		case 0: //P0
			Size = 5;
 8000bb0:	2317      	movs	r3, #23
 8000bb2:	18fb      	adds	r3, r7, r3
 8000bb4:	2205      	movs	r2, #5
 8000bb6:	701a      	strb	r2, [r3, #0]
			regAddr = nRF_RX_ADDR_P0;
 8000bb8:	2316      	movs	r3, #22
 8000bba:	18fb      	adds	r3, r7, r3
 8000bbc:	220a      	movs	r2, #10
 8000bbe:	701a      	strb	r2, [r3, #0]
		break;
 8000bc0:	e02e      	b.n	8000c20 <HAL_nRF24L01P_SetPRXAddress+0x90>
		case 1: //P1
			Size = 5;
 8000bc2:	2317      	movs	r3, #23
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	2205      	movs	r2, #5
 8000bc8:	701a      	strb	r2, [r3, #0]
			regAddr = nRF_RX_ADDR_P1;
 8000bca:	2316      	movs	r3, #22
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	220b      	movs	r2, #11
 8000bd0:	701a      	strb	r2, [r3, #0]
		break;
 8000bd2:	e025      	b.n	8000c20 <HAL_nRF24L01P_SetPRXAddress+0x90>
		case 2: //P2
			Size = 1;
 8000bd4:	2317      	movs	r3, #23
 8000bd6:	18fb      	adds	r3, r7, r3
 8000bd8:	2201      	movs	r2, #1
 8000bda:	701a      	strb	r2, [r3, #0]
			regAddr = nRF_RX_ADDR_P2;
 8000bdc:	2316      	movs	r3, #22
 8000bde:	18fb      	adds	r3, r7, r3
 8000be0:	220c      	movs	r2, #12
 8000be2:	701a      	strb	r2, [r3, #0]
		break;
 8000be4:	e01c      	b.n	8000c20 <HAL_nRF24L01P_SetPRXAddress+0x90>
		case 3: //P3
			Size = 1;
 8000be6:	2317      	movs	r3, #23
 8000be8:	18fb      	adds	r3, r7, r3
 8000bea:	2201      	movs	r2, #1
 8000bec:	701a      	strb	r2, [r3, #0]
			regAddr = nRF_RX_ADDR_P3;
 8000bee:	2316      	movs	r3, #22
 8000bf0:	18fb      	adds	r3, r7, r3
 8000bf2:	220d      	movs	r2, #13
 8000bf4:	701a      	strb	r2, [r3, #0]
		break;
 8000bf6:	e013      	b.n	8000c20 <HAL_nRF24L01P_SetPRXAddress+0x90>
		case 4: //P4
			Size = 1;
 8000bf8:	2317      	movs	r3, #23
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
			regAddr = nRF_RX_ADDR_P4;
 8000c00:	2316      	movs	r3, #22
 8000c02:	18fb      	adds	r3, r7, r3
 8000c04:	220e      	movs	r2, #14
 8000c06:	701a      	strb	r2, [r3, #0]
		break;
 8000c08:	e00a      	b.n	8000c20 <HAL_nRF24L01P_SetPRXAddress+0x90>
		case 5: //P5
			Size = 1;
 8000c0a:	2317      	movs	r3, #23
 8000c0c:	18fb      	adds	r3, r7, r3
 8000c0e:	2201      	movs	r2, #1
 8000c10:	701a      	strb	r2, [r3, #0]
			regAddr = nRF_RX_ADDR_P5;
 8000c12:	2316      	movs	r3, #22
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	220f      	movs	r2, #15
 8000c18:	701a      	strb	r2, [r3, #0]
		break;
 8000c1a:	e001      	b.n	8000c20 <HAL_nRF24L01P_SetPRXAddress+0x90>
		default:
			return HAL_ERROR;		
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e014      	b.n	8000c4a <HAL_nRF24L01P_SetPRXAddress+0xba>
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_REGISTER + regAddr, pRegData, Zero, Size) != HAL_OK)
 8000c20:	2316      	movs	r3, #22
 8000c22:	18fb      	adds	r3, r7, r3
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	3320      	adds	r3, #32
 8000c28:	b2d9      	uxtb	r1, r3
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	18fc      	adds	r4, r7, r3
 8000c2e:	68ba      	ldr	r2, [r7, #8]
 8000c30:	68f8      	ldr	r0, [r7, #12]
 8000c32:	2317      	movs	r3, #23
 8000c34:	18fb      	adds	r3, r7, r3
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	9300      	str	r3, [sp, #0]
 8000c3a:	0023      	movs	r3, r4
 8000c3c:	f000 fccb 	bl	80015d6 <HAL_nRF24L01P_SendCommand>
 8000c40:	1e03      	subs	r3, r0, #0
 8000c42:	d001      	beq.n	8000c48 <HAL_nRF24L01P_SetPRXAddress+0xb8>
	{
		return HAL_ERROR;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e000      	b.n	8000c4a <HAL_nRF24L01P_SetPRXAddress+0xba>
	}
	return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	b007      	add	sp, #28
 8000c50:	bd90      	pop	{r4, r7, pc}
 8000c52:	46c0      	nop			@ (mov r8, r8)
 8000c54:	08005520 	.word	0x08005520

08000c58 <HAL_nRF24L01P_DPLPipe>:

HAL_StatusTypeDef HAL_nRF24L01P_DPLPipe(nRF24L01P *nRF, nRF_DATA_PIPE Pipe, nRF_STATE DPL_State)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	0008      	movs	r0, r1
 8000c62:	0011      	movs	r1, r2
 8000c64:	1cfb      	adds	r3, r7, #3
 8000c66:	1c02      	adds	r2, r0, #0
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	1cbb      	adds	r3, r7, #2
 8000c6c:	1c0a      	adds	r2, r1, #0
 8000c6e:	701a      	strb	r2, [r3, #0]
		/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_DYNPD, &regValue) != HAL_OK)
 8000c70:	230f      	movs	r3, #15
 8000c72:	18fa      	adds	r2, r7, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	211c      	movs	r1, #28
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f000 fc8c 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d001      	beq.n	8000c86 <HAL_nRF24L01P_DPLPipe+0x2e>
	{
		return HAL_ERROR;
 8000c82:	2301      	movs	r3, #1
 8000c84:	e030      	b.n	8000ce8 <HAL_nRF24L01P_DPLPipe+0x90>
	}
	
	if(DPL_State)
 8000c86:	1cbb      	adds	r3, r7, #2
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d00f      	beq.n	8000cae <HAL_nRF24L01P_DPLPipe+0x56>
	{
		regValue |= (1 << Pipe);
 8000c8e:	1cfb      	adds	r3, r7, #3
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2201      	movs	r2, #1
 8000c94:	409a      	lsls	r2, r3
 8000c96:	0013      	movs	r3, r2
 8000c98:	b25a      	sxtb	r2, r3
 8000c9a:	210f      	movs	r1, #15
 8000c9c:	187b      	adds	r3, r7, r1
 8000c9e:	781b      	ldrb	r3, [r3, #0]
 8000ca0:	b25b      	sxtb	r3, r3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	187b      	adds	r3, r7, r1
 8000caa:	701a      	strb	r2, [r3, #0]
 8000cac:	e010      	b.n	8000cd0 <HAL_nRF24L01P_DPLPipe+0x78>
	} else {
		regValue &= ~(1 << Pipe);
 8000cae:	1cfb      	adds	r3, r7, #3
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	409a      	lsls	r2, r3
 8000cb6:	0013      	movs	r3, r2
 8000cb8:	b25b      	sxtb	r3, r3
 8000cba:	43db      	mvns	r3, r3
 8000cbc:	b25b      	sxtb	r3, r3
 8000cbe:	210f      	movs	r1, #15
 8000cc0:	187a      	adds	r2, r7, r1
 8000cc2:	7812      	ldrb	r2, [r2, #0]
 8000cc4:	b252      	sxtb	r2, r2
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	b25b      	sxtb	r3, r3
 8000cca:	b2da      	uxtb	r2, r3
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	701a      	strb	r2, [r3, #0]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_DYNPD, &regValue) != HAL_OK)
 8000cd0:	230f      	movs	r3, #15
 8000cd2:	18fa      	adds	r2, r7, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	211c      	movs	r1, #28
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f000 fc3b 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 8000cde:	1e03      	subs	r3, r0, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_nRF24L01P_DPLPipe+0x8e>
	{
		return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e000      	b.n	8000ce8 <HAL_nRF24L01P_DPLPipe+0x90>
	}
	return HAL_OK;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b004      	add	sp, #16
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_nRF24L01P_DynPayload>:

HAL_StatusTypeDef HAL_nRF24L01P_DynPayload(nRF24L01P *nRF, nRF_STATE DPL_State)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	000a      	movs	r2, r1
 8000cfa:	1cfb      	adds	r3, r7, #3
 8000cfc:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000cfe:	230f      	movs	r3, #15
 8000d00:	18fa      	adds	r2, r7, r3
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	211d      	movs	r1, #29
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 fc45 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 8000d0c:	1e03      	subs	r3, r0, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_nRF24L01P_DynPayload+0x24>
	{
		return HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	e020      	b.n	8000d56 <HAL_nRF24L01P_DynPayload+0x66>
	}
	
	if(DPL_State)
 8000d14:	1cfb      	adds	r3, r7, #3
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d008      	beq.n	8000d2e <HAL_nRF24L01P_DynPayload+0x3e>
	{
		regValue |= (1 << 2);
 8000d1c:	210f      	movs	r1, #15
 8000d1e:	187b      	adds	r3, r7, r1
 8000d20:	781b      	ldrb	r3, [r3, #0]
 8000d22:	2204      	movs	r2, #4
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b2da      	uxtb	r2, r3
 8000d28:	187b      	adds	r3, r7, r1
 8000d2a:	701a      	strb	r2, [r3, #0]
 8000d2c:	e007      	b.n	8000d3e <HAL_nRF24L01P_DynPayload+0x4e>
	} else {
		regValue &= ~(1 << 2);
 8000d2e:	210f      	movs	r1, #15
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	2204      	movs	r2, #4
 8000d36:	4393      	bics	r3, r2
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	701a      	strb	r2, [r3, #0]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000d3e:	230f      	movs	r3, #15
 8000d40:	18fa      	adds	r2, r7, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	211d      	movs	r1, #29
 8000d46:	0018      	movs	r0, r3
 8000d48:	f000 fc04 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <HAL_nRF24L01P_DynPayload+0x64>
	{
		return HAL_ERROR;
 8000d50:	2301      	movs	r3, #1
 8000d52:	e000      	b.n	8000d56 <HAL_nRF24L01P_DynPayload+0x66>
	}
	return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	0018      	movs	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b004      	add	sp, #16
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_nRF24L01P_ACKPayload>:

HAL_StatusTypeDef HAL_nRF24L01P_ACKPayload(nRF24L01P *nRF, nRF_STATE ACK_State)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b084      	sub	sp, #16
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
 8000d66:	000a      	movs	r2, r1
 8000d68:	1cfb      	adds	r3, r7, #3
 8000d6a:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	18fa      	adds	r2, r7, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	211d      	movs	r1, #29
 8000d74:	0018      	movs	r0, r3
 8000d76:	f000 fc0e 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 8000d7a:	1e03      	subs	r3, r0, #0
 8000d7c:	d001      	beq.n	8000d82 <HAL_nRF24L01P_ACKPayload+0x24>
	{
		return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e020      	b.n	8000dc4 <HAL_nRF24L01P_ACKPayload+0x66>
	}
	
	if(ACK_State)
 8000d82:	1cfb      	adds	r3, r7, #3
 8000d84:	781b      	ldrb	r3, [r3, #0]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d008      	beq.n	8000d9c <HAL_nRF24L01P_ACKPayload+0x3e>
	{
		regValue |= (1 << 1);
 8000d8a:	210f      	movs	r1, #15
 8000d8c:	187b      	adds	r3, r7, r1
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	2202      	movs	r2, #2
 8000d92:	4313      	orrs	r3, r2
 8000d94:	b2da      	uxtb	r2, r3
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	701a      	strb	r2, [r3, #0]
 8000d9a:	e007      	b.n	8000dac <HAL_nRF24L01P_ACKPayload+0x4e>
	} else {
		regValue &= ~(1 << 1);
 8000d9c:	210f      	movs	r1, #15
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2202      	movs	r2, #2
 8000da4:	4393      	bics	r3, r2
 8000da6:	b2da      	uxtb	r2, r3
 8000da8:	187b      	adds	r3, r7, r1
 8000daa:	701a      	strb	r2, [r3, #0]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000dac:	230f      	movs	r3, #15
 8000dae:	18fa      	adds	r2, r7, r3
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	211d      	movs	r1, #29
 8000db4:	0018      	movs	r0, r3
 8000db6:	f000 fbcd 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 8000dba:	1e03      	subs	r3, r0, #0
 8000dbc:	d001      	beq.n	8000dc2 <HAL_nRF24L01P_ACKPayload+0x64>
	{
		return HAL_ERROR;
 8000dbe:	2301      	movs	r3, #1
 8000dc0:	e000      	b.n	8000dc4 <HAL_nRF24L01P_ACKPayload+0x66>
	}
	return HAL_OK;
 8000dc2:	2300      	movs	r3, #0
}
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	b004      	add	sp, #16
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <HAL_nRF24L01P_DynACK>:

HAL_StatusTypeDef HAL_nRF24L01P_DynACK(nRF24L01P *nRF, nRF_STATE ACK_State)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	000a      	movs	r2, r1
 8000dd6:	1cfb      	adds	r3, r7, #3
 8000dd8:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000dda:	230f      	movs	r3, #15
 8000ddc:	18fa      	adds	r2, r7, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	211d      	movs	r1, #29
 8000de2:	0018      	movs	r0, r3
 8000de4:	f000 fbd7 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 8000de8:	1e03      	subs	r3, r0, #0
 8000dea:	d001      	beq.n	8000df0 <HAL_nRF24L01P_DynACK+0x24>
	{
		return HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	e020      	b.n	8000e32 <HAL_nRF24L01P_DynACK+0x66>
	}
	
	if(ACK_State)
 8000df0:	1cfb      	adds	r3, r7, #3
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d008      	beq.n	8000e0a <HAL_nRF24L01P_DynACK+0x3e>
	{
		regValue |= (1 << 0);
 8000df8:	210f      	movs	r1, #15
 8000dfa:	187b      	adds	r3, r7, r1
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	4313      	orrs	r3, r2
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	701a      	strb	r2, [r3, #0]
 8000e08:	e007      	b.n	8000e1a <HAL_nRF24L01P_DynACK+0x4e>
	} else {
		regValue &= ~(1 << 0);
 8000e0a:	210f      	movs	r1, #15
 8000e0c:	187b      	adds	r3, r7, r1
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2201      	movs	r2, #1
 8000e12:	4393      	bics	r3, r2
 8000e14:	b2da      	uxtb	r2, r3
 8000e16:	187b      	adds	r3, r7, r1
 8000e18:	701a      	strb	r2, [r3, #0]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_FEATURE, &regValue) != HAL_OK)
 8000e1a:	230f      	movs	r3, #15
 8000e1c:	18fa      	adds	r2, r7, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	211d      	movs	r1, #29
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 fb96 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d001      	beq.n	8000e30 <HAL_nRF24L01P_DynACK+0x64>
	{
		return HAL_ERROR;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	e000      	b.n	8000e32 <HAL_nRF24L01P_DynACK+0x66>
	}
	return HAL_OK;
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	0018      	movs	r0, r3
 8000e34:	46bd      	mov	sp, r7
 8000e36:	b004      	add	sp, #16
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_nRF24L01P_MaxReTransmitIRQ>:

HAL_StatusTypeDef HAL_nRF24L01P_MaxReTransmitIRQ(nRF24L01P *nRF, nRF_STATE IRQ_State)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	000a      	movs	r2, r1
 8000e44:	1cfb      	adds	r3, r7, #3
 8000e46:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8000e48:	230f      	movs	r3, #15
 8000e4a:	18fa      	adds	r2, r7, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	2100      	movs	r1, #0
 8000e50:	0018      	movs	r0, r3
 8000e52:	f000 fba0 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 8000e56:	1e03      	subs	r3, r0, #0
 8000e58:	d001      	beq.n	8000e5e <HAL_nRF24L01P_MaxReTransmitIRQ+0x24>
	{
		return HAL_ERROR;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	e020      	b.n	8000ea0 <HAL_nRF24L01P_MaxReTransmitIRQ+0x66>
	}
	
	if(IRQ_State)
 8000e5e:	1cfb      	adds	r3, r7, #3
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d008      	beq.n	8000e78 <HAL_nRF24L01P_MaxReTransmitIRQ+0x3e>
	{
		regValue &= ~(1 << 4);
 8000e66:	210f      	movs	r1, #15
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2210      	movs	r2, #16
 8000e6e:	4393      	bics	r3, r2
 8000e70:	b2da      	uxtb	r2, r3
 8000e72:	187b      	adds	r3, r7, r1
 8000e74:	701a      	strb	r2, [r3, #0]
 8000e76:	e007      	b.n	8000e88 <HAL_nRF24L01P_MaxReTransmitIRQ+0x4e>
	} else {
		regValue |= (1 << 4);
 8000e78:	210f      	movs	r1, #15
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	2210      	movs	r2, #16
 8000e80:	4313      	orrs	r3, r2
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	187b      	adds	r3, r7, r1
 8000e86:	701a      	strb	r2, [r3, #0]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8000e88:	230f      	movs	r3, #15
 8000e8a:	18fa      	adds	r2, r7, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	2100      	movs	r1, #0
 8000e90:	0018      	movs	r0, r3
 8000e92:	f000 fb5f 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 8000e96:	1e03      	subs	r3, r0, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_nRF24L01P_MaxReTransmitIRQ+0x64>
	{
		return HAL_ERROR;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	e000      	b.n	8000ea0 <HAL_nRF24L01P_MaxReTransmitIRQ+0x66>
	}
	return HAL_OK;
 8000e9e:	2300      	movs	r3, #0
}
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b004      	add	sp, #16
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_nRF24L01P_TXDataSentIRQ>:

HAL_StatusTypeDef HAL_nRF24L01P_TXDataSentIRQ(nRF24L01P *nRF, nRF_STATE IRQ_State)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	000a      	movs	r2, r1
 8000eb2:	1cfb      	adds	r3, r7, #3
 8000eb4:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8000eb6:	230f      	movs	r3, #15
 8000eb8:	18fa      	adds	r2, r7, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f000 fb69 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 8000ec4:	1e03      	subs	r3, r0, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_nRF24L01P_TXDataSentIRQ+0x24>
	{
		return HAL_ERROR;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	e020      	b.n	8000f0e <HAL_nRF24L01P_TXDataSentIRQ+0x66>
	}
	
	if(IRQ_State)
 8000ecc:	1cfb      	adds	r3, r7, #3
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d008      	beq.n	8000ee6 <HAL_nRF24L01P_TXDataSentIRQ+0x3e>
	{
		regValue &= ~(1 << 5);
 8000ed4:	210f      	movs	r1, #15
 8000ed6:	187b      	adds	r3, r7, r1
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2220      	movs	r2, #32
 8000edc:	4393      	bics	r3, r2
 8000ede:	b2da      	uxtb	r2, r3
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	701a      	strb	r2, [r3, #0]
 8000ee4:	e007      	b.n	8000ef6 <HAL_nRF24L01P_TXDataSentIRQ+0x4e>
	} else {
		regValue |= (1 << 5);
 8000ee6:	210f      	movs	r1, #15
 8000ee8:	187b      	adds	r3, r7, r1
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	2220      	movs	r2, #32
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	b2da      	uxtb	r2, r3
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	701a      	strb	r2, [r3, #0]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8000ef6:	230f      	movs	r3, #15
 8000ef8:	18fa      	adds	r2, r7, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2100      	movs	r1, #0
 8000efe:	0018      	movs	r0, r3
 8000f00:	f000 fb28 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 8000f04:	1e03      	subs	r3, r0, #0
 8000f06:	d001      	beq.n	8000f0c <HAL_nRF24L01P_TXDataSentIRQ+0x64>
	{
		return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e000      	b.n	8000f0e <HAL_nRF24L01P_TXDataSentIRQ+0x66>
	}
	return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	0018      	movs	r0, r3
 8000f10:	46bd      	mov	sp, r7
 8000f12:	b004      	add	sp, #16
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <HAL_nRF24L01P_RXDataReadyIRQ>:

HAL_StatusTypeDef HAL_nRF24L01P_RXDataReadyIRQ(nRF24L01P *nRF, nRF_STATE IRQ_State)
{
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b084      	sub	sp, #16
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
 8000f1e:	000a      	movs	r2, r1
 8000f20:	1cfb      	adds	r3, r7, #3
 8000f22:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8000f24:	230f      	movs	r3, #15
 8000f26:	18fa      	adds	r2, r7, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f000 fb32 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 8000f32:	1e03      	subs	r3, r0, #0
 8000f34:	d001      	beq.n	8000f3a <HAL_nRF24L01P_RXDataReadyIRQ+0x24>
	{
		return HAL_ERROR;
 8000f36:	2301      	movs	r3, #1
 8000f38:	e020      	b.n	8000f7c <HAL_nRF24L01P_RXDataReadyIRQ+0x66>
	}
	
	if(IRQ_State)
 8000f3a:	1cfb      	adds	r3, r7, #3
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d008      	beq.n	8000f54 <HAL_nRF24L01P_RXDataReadyIRQ+0x3e>
	{
		regValue &= ~(1 << 6);
 8000f42:	210f      	movs	r1, #15
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2240      	movs	r2, #64	@ 0x40
 8000f4a:	4393      	bics	r3, r2
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	187b      	adds	r3, r7, r1
 8000f50:	701a      	strb	r2, [r3, #0]
 8000f52:	e007      	b.n	8000f64 <HAL_nRF24L01P_RXDataReadyIRQ+0x4e>
	} else {
		regValue |= (1 << 6);
 8000f54:	210f      	movs	r1, #15
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2240      	movs	r2, #64	@ 0x40
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	b2da      	uxtb	r2, r3
 8000f60:	187b      	adds	r3, r7, r1
 8000f62:	701a      	strb	r2, [r3, #0]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8000f64:	230f      	movs	r3, #15
 8000f66:	18fa      	adds	r2, r7, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f000 faf1 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 8000f72:	1e03      	subs	r3, r0, #0
 8000f74:	d001      	beq.n	8000f7a <HAL_nRF24L01P_RXDataReadyIRQ+0x64>
	{
		return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
 8000f78:	e000      	b.n	8000f7c <HAL_nRF24L01P_RXDataReadyIRQ+0x66>
	}
	return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
}
 8000f7c:	0018      	movs	r0, r3
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	b004      	add	sp, #16
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <HAL_nRF24L01P_TXRX>:

HAL_StatusTypeDef HAL_nRF24L01P_TXRX(nRF24L01P *nRF, nRF_TXRX_STATE TxRx_State)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	000a      	movs	r2, r1
 8000f8e:	1cfb      	adds	r3, r7, #3
 8000f90:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8000f92:	230f      	movs	r3, #15
 8000f94:	18fa      	adds	r2, r7, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2100      	movs	r1, #0
 8000f9a:	0018      	movs	r0, r3
 8000f9c:	f000 fafb 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 8000fa0:	1e03      	subs	r3, r0, #0
 8000fa2:	d001      	beq.n	8000fa8 <HAL_nRF24L01P_TXRX+0x24>
	{
		return HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e026      	b.n	8000ff6 <HAL_nRF24L01P_TXRX+0x72>
	}
	
	if(TxRx_State)
 8000fa8:	1cfb      	adds	r3, r7, #3
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d00b      	beq.n	8000fc8 <HAL_nRF24L01P_TXRX+0x44>
	{
		regValue |= (1);
 8000fb0:	210f      	movs	r1, #15
 8000fb2:	187b      	adds	r3, r7, r1
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	701a      	strb	r2, [r3, #0]
		nRF->State = nRF_STATE_TX;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	721a      	strb	r2, [r3, #8]
 8000fc6:	e00a      	b.n	8000fde <HAL_nRF24L01P_TXRX+0x5a>
	} else {
		regValue &= ~(1);
 8000fc8:	210f      	movs	r1, #15
 8000fca:	187b      	adds	r3, r7, r1
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2201      	movs	r2, #1
 8000fd0:	4393      	bics	r3, r2
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	187b      	adds	r3, r7, r1
 8000fd6:	701a      	strb	r2, [r3, #0]
		nRF->State = nRF_STATE_RX;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	721a      	strb	r2, [r3, #8]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8000fde:	230f      	movs	r3, #15
 8000fe0:	18fa      	adds	r2, r7, r3
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	0018      	movs	r0, r3
 8000fe8:	f000 fab4 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 8000fec:	1e03      	subs	r3, r0, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_nRF24L01P_TXRX+0x70>
	{
		return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e000      	b.n	8000ff6 <HAL_nRF24L01P_TXRX+0x72>
	}
	return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	0018      	movs	r0, r3
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	b004      	add	sp, #16
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_nRF24L01P_PowerUP>:

HAL_StatusTypeDef HAL_nRF24L01P_PowerUP(nRF24L01P *nRF, nRF_STATE Power)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	b084      	sub	sp, #16
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	000a      	movs	r2, r1
 8001008:	1cfb      	adds	r3, r7, #3
 800100a:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800100c:	230f      	movs	r3, #15
 800100e:	18fa      	adds	r2, r7, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2100      	movs	r1, #0
 8001014:	0018      	movs	r0, r3
 8001016:	f000 fabe 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 800101a:	1e03      	subs	r3, r0, #0
 800101c:	d001      	beq.n	8001022 <HAL_nRF24L01P_PowerUP+0x24>
	{
		return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e020      	b.n	8001064 <HAL_nRF24L01P_PowerUP+0x66>
	}
	
	if(Power)
 8001022:	1cfb      	adds	r3, r7, #3
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d008      	beq.n	800103c <HAL_nRF24L01P_PowerUP+0x3e>
	{
		regValue |= (1 << 1);
 800102a:	210f      	movs	r1, #15
 800102c:	187b      	adds	r3, r7, r1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2202      	movs	r2, #2
 8001032:	4313      	orrs	r3, r2
 8001034:	b2da      	uxtb	r2, r3
 8001036:	187b      	adds	r3, r7, r1
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	e007      	b.n	800104c <HAL_nRF24L01P_PowerUP+0x4e>
	} else {
		regValue &= ~(1 << 1);
 800103c:	210f      	movs	r1, #15
 800103e:	187b      	adds	r3, r7, r1
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2202      	movs	r2, #2
 8001044:	4393      	bics	r3, r2
 8001046:	b2da      	uxtb	r2, r3
 8001048:	187b      	adds	r3, r7, r1
 800104a:	701a      	strb	r2, [r3, #0]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800104c:	230f      	movs	r3, #15
 800104e:	18fa      	adds	r2, r7, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2100      	movs	r1, #0
 8001054:	0018      	movs	r0, r3
 8001056:	f000 fa7d 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 800105a:	1e03      	subs	r3, r0, #0
 800105c:	d001      	beq.n	8001062 <HAL_nRF24L01P_PowerUP+0x64>
	{
		return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e000      	b.n	8001064 <HAL_nRF24L01P_PowerUP+0x66>
	}
	return HAL_OK;
 8001062:	2300      	movs	r3, #0
}
 8001064:	0018      	movs	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	b004      	add	sp, #16
 800106a:	bd80      	pop	{r7, pc}

0800106c <HAL_nRF24L01P_SetCRCWidth>:

HAL_StatusTypeDef HAL_nRF24L01P_SetCRCWidth(nRF24L01P *nRF, nRF_CRC_WIDTH CRC_Width)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b084      	sub	sp, #16
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	000a      	movs	r2, r1
 8001076:	1cfb      	adds	r3, r7, #3
 8001078:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 800107a:	230f      	movs	r3, #15
 800107c:	18fa      	adds	r2, r7, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2100      	movs	r1, #0
 8001082:	0018      	movs	r0, r3
 8001084:	f000 fa87 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 8001088:	1e03      	subs	r3, r0, #0
 800108a:	d001      	beq.n	8001090 <HAL_nRF24L01P_SetCRCWidth+0x24>
	{
		return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e020      	b.n	80010d2 <HAL_nRF24L01P_SetCRCWidth+0x66>
	}
	
	if(CRC_Width)
 8001090:	1cfb      	adds	r3, r7, #3
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d008      	beq.n	80010aa <HAL_nRF24L01P_SetCRCWidth+0x3e>
	{
		regValue |= (1 << 2);
 8001098:	210f      	movs	r1, #15
 800109a:	187b      	adds	r3, r7, r1
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2204      	movs	r2, #4
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	187b      	adds	r3, r7, r1
 80010a6:	701a      	strb	r2, [r3, #0]
 80010a8:	e007      	b.n	80010ba <HAL_nRF24L01P_SetCRCWidth+0x4e>
	} else {
		regValue &= ~(1 << 2);
 80010aa:	210f      	movs	r1, #15
 80010ac:	187b      	adds	r3, r7, r1
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	2204      	movs	r2, #4
 80010b2:	4393      	bics	r3, r2
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	701a      	strb	r2, [r3, #0]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 80010ba:	230f      	movs	r3, #15
 80010bc:	18fa      	adds	r2, r7, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2100      	movs	r1, #0
 80010c2:	0018      	movs	r0, r3
 80010c4:	f000 fa46 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 80010c8:	1e03      	subs	r3, r0, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_nRF24L01P_SetCRCWidth+0x64>
	{
		return HAL_ERROR;
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <HAL_nRF24L01P_SetCRCWidth+0x66>
	}
	return HAL_OK;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	0018      	movs	r0, r3
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b004      	add	sp, #16
 80010d8:	bd80      	pop	{r7, pc}

080010da <HAL_nRF24L01P_CRC>:

HAL_StatusTypeDef HAL_nRF24L01P_CRC(nRF24L01P *nRF, nRF_STATE CRC_State)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b084      	sub	sp, #16
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
 80010e2:	000a      	movs	r2, r1
 80010e4:	1cfb      	adds	r3, r7, #3
 80010e6:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 80010e8:	230f      	movs	r3, #15
 80010ea:	18fa      	adds	r2, r7, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2100      	movs	r1, #0
 80010f0:	0018      	movs	r0, r3
 80010f2:	f000 fa50 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 80010f6:	1e03      	subs	r3, r0, #0
 80010f8:	d001      	beq.n	80010fe <HAL_nRF24L01P_CRC+0x24>
	{
		return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e020      	b.n	8001140 <HAL_nRF24L01P_CRC+0x66>
	}
	
	if(CRC_State)
 80010fe:	1cfb      	adds	r3, r7, #3
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d008      	beq.n	8001118 <HAL_nRF24L01P_CRC+0x3e>
	{
		regValue |= (1 << 3);
 8001106:	210f      	movs	r1, #15
 8001108:	187b      	adds	r3, r7, r1
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2208      	movs	r2, #8
 800110e:	4313      	orrs	r3, r2
 8001110:	b2da      	uxtb	r2, r3
 8001112:	187b      	adds	r3, r7, r1
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	e007      	b.n	8001128 <HAL_nRF24L01P_CRC+0x4e>
	} else {
		regValue &= ~(1 << 3);
 8001118:	210f      	movs	r1, #15
 800111a:	187b      	adds	r3, r7, r1
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	2208      	movs	r2, #8
 8001120:	4393      	bics	r3, r2
 8001122:	b2da      	uxtb	r2, r3
 8001124:	187b      	adds	r3, r7, r1
 8001126:	701a      	strb	r2, [r3, #0]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_CONFIG, &regValue) != HAL_OK)
 8001128:	230f      	movs	r3, #15
 800112a:	18fa      	adds	r2, r7, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2100      	movs	r1, #0
 8001130:	0018      	movs	r0, r3
 8001132:	f000 fa0f 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 8001136:	1e03      	subs	r3, r0, #0
 8001138:	d001      	beq.n	800113e <HAL_nRF24L01P_CRC+0x64>
	{
		return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e000      	b.n	8001140 <HAL_nRF24L01P_CRC+0x66>
	}
	return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	0018      	movs	r0, r3
 8001142:	46bd      	mov	sp, r7
 8001144:	b004      	add	sp, #16
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_nRF24L01P_AutoACK>:

HAL_StatusTypeDef HAL_nRF24L01P_AutoACK(nRF24L01P *nRF, nRF_DATA_PIPE Pipe, nRF_STATE ACK_State)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	0008      	movs	r0, r1
 8001152:	0011      	movs	r1, r2
 8001154:	1cfb      	adds	r3, r7, #3
 8001156:	1c02      	adds	r2, r0, #0
 8001158:	701a      	strb	r2, [r3, #0]
 800115a:	1cbb      	adds	r3, r7, #2
 800115c:	1c0a      	adds	r2, r1, #0
 800115e:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_EN_AA, &regValue) != HAL_OK)
 8001160:	230f      	movs	r3, #15
 8001162:	18fa      	adds	r2, r7, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2101      	movs	r1, #1
 8001168:	0018      	movs	r0, r3
 800116a:	f000 fa14 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 800116e:	1e03      	subs	r3, r0, #0
 8001170:	d001      	beq.n	8001176 <HAL_nRF24L01P_AutoACK+0x2e>
	{
		return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
 8001174:	e036      	b.n	80011e4 <HAL_nRF24L01P_AutoACK+0x9c>
	}
	
	Pipe &= (0x3F); //nRF_EN_AA reg's 6. and 7. bits are Reserved
 8001176:	1cfb      	adds	r3, r7, #3
 8001178:	1cfa      	adds	r2, r7, #3
 800117a:	7812      	ldrb	r2, [r2, #0]
 800117c:	213f      	movs	r1, #63	@ 0x3f
 800117e:	400a      	ands	r2, r1
 8001180:	701a      	strb	r2, [r3, #0]
	if(ACK_State)
 8001182:	1cbb      	adds	r3, r7, #2
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d00f      	beq.n	80011aa <HAL_nRF24L01P_AutoACK+0x62>
	{
		regValue |= (1 << Pipe); //nRF_EN_AA reg is Configured
 800118a:	1cfb      	adds	r3, r7, #3
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	2201      	movs	r2, #1
 8001190:	409a      	lsls	r2, r3
 8001192:	0013      	movs	r3, r2
 8001194:	b25a      	sxtb	r2, r3
 8001196:	210f      	movs	r1, #15
 8001198:	187b      	adds	r3, r7, r1
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	b25b      	sxtb	r3, r3
 800119e:	4313      	orrs	r3, r2
 80011a0:	b25b      	sxtb	r3, r3
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	701a      	strb	r2, [r3, #0]
 80011a8:	e010      	b.n	80011cc <HAL_nRF24L01P_AutoACK+0x84>
	} else {
		regValue &= ~(1 << Pipe); //nRF_EN_AA reg is Configured		
 80011aa:	1cfb      	adds	r3, r7, #3
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2201      	movs	r2, #1
 80011b0:	409a      	lsls	r2, r3
 80011b2:	0013      	movs	r3, r2
 80011b4:	b25b      	sxtb	r3, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	210f      	movs	r1, #15
 80011bc:	187a      	adds	r2, r7, r1
 80011be:	7812      	ldrb	r2, [r2, #0]
 80011c0:	b252      	sxtb	r2, r2
 80011c2:	4013      	ands	r3, r2
 80011c4:	b25b      	sxtb	r3, r3
 80011c6:	b2da      	uxtb	r2, r3
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	701a      	strb	r2, [r3, #0]
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_EN_AA, &regValue) != HAL_OK)
 80011cc:	230f      	movs	r3, #15
 80011ce:	18fa      	adds	r2, r7, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2101      	movs	r1, #1
 80011d4:	0018      	movs	r0, r3
 80011d6:	f000 f9bd 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 80011da:	1e03      	subs	r3, r0, #0
 80011dc:	d001      	beq.n	80011e2 <HAL_nRF24L01P_AutoACK+0x9a>
	{
		return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <HAL_nRF24L01P_AutoACK+0x9c>
	}
	return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	0018      	movs	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	b004      	add	sp, #16
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_nRF24L01P_RXPipe>:

HAL_StatusTypeDef HAL_nRF24L01P_RXPipe(nRF24L01P *nRF, nRF_DATA_PIPE Pipe, nRF_STATE Pipe_State)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	0008      	movs	r0, r1
 80011f6:	0011      	movs	r1, r2
 80011f8:	1cfb      	adds	r3, r7, #3
 80011fa:	1c02      	adds	r2, r0, #0
 80011fc:	701a      	strb	r2, [r3, #0]
 80011fe:	1cbb      	adds	r3, r7, #2
 8001200:	1c0a      	adds	r2, r1, #0
 8001202:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_EN_RXADDR, &regValue) != HAL_OK)
 8001204:	230f      	movs	r3, #15
 8001206:	18fa      	adds	r2, r7, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2102      	movs	r1, #2
 800120c:	0018      	movs	r0, r3
 800120e:	f000 f9c2 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 8001212:	1e03      	subs	r3, r0, #0
 8001214:	d001      	beq.n	800121a <HAL_nRF24L01P_RXPipe+0x2e>
	{
		return HAL_ERROR;
 8001216:	2301      	movs	r3, #1
 8001218:	e036      	b.n	8001288 <HAL_nRF24L01P_RXPipe+0x9c>
	}
	
	Pipe &= (0x3F); //nRF_EN_RXADDR reg's 7. bit is Reserved
 800121a:	1cfb      	adds	r3, r7, #3
 800121c:	1cfa      	adds	r2, r7, #3
 800121e:	7812      	ldrb	r2, [r2, #0]
 8001220:	213f      	movs	r1, #63	@ 0x3f
 8001222:	400a      	ands	r2, r1
 8001224:	701a      	strb	r2, [r3, #0]
	if(Pipe_State)
 8001226:	1cbb      	adds	r3, r7, #2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d00f      	beq.n	800124e <HAL_nRF24L01P_RXPipe+0x62>
	{
		regValue |= (1 << Pipe);
 800122e:	1cfb      	adds	r3, r7, #3
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	2201      	movs	r2, #1
 8001234:	409a      	lsls	r2, r3
 8001236:	0013      	movs	r3, r2
 8001238:	b25a      	sxtb	r2, r3
 800123a:	210f      	movs	r1, #15
 800123c:	187b      	adds	r3, r7, r1
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	b25b      	sxtb	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b25b      	sxtb	r3, r3
 8001246:	b2da      	uxtb	r2, r3
 8001248:	187b      	adds	r3, r7, r1
 800124a:	701a      	strb	r2, [r3, #0]
 800124c:	e010      	b.n	8001270 <HAL_nRF24L01P_RXPipe+0x84>
	} else {
		regValue &= ~(1 << Pipe);
 800124e:	1cfb      	adds	r3, r7, #3
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2201      	movs	r2, #1
 8001254:	409a      	lsls	r2, r3
 8001256:	0013      	movs	r3, r2
 8001258:	b25b      	sxtb	r3, r3
 800125a:	43db      	mvns	r3, r3
 800125c:	b25b      	sxtb	r3, r3
 800125e:	210f      	movs	r1, #15
 8001260:	187a      	adds	r2, r7, r1
 8001262:	7812      	ldrb	r2, [r2, #0]
 8001264:	b252      	sxtb	r2, r2
 8001266:	4013      	ands	r3, r2
 8001268:	b25b      	sxtb	r3, r3
 800126a:	b2da      	uxtb	r2, r3
 800126c:	187b      	adds	r3, r7, r1
 800126e:	701a      	strb	r2, [r3, #0]
	} //nRF_EN_RXADDR reg is Configured
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_EN_RXADDR, &regValue) != HAL_OK)
 8001270:	230f      	movs	r3, #15
 8001272:	18fa      	adds	r2, r7, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	2102      	movs	r1, #2
 8001278:	0018      	movs	r0, r3
 800127a:	f000 f96b 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 800127e:	1e03      	subs	r3, r0, #0
 8001280:	d001      	beq.n	8001286 <HAL_nRF24L01P_RXPipe+0x9a>
	{
		return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e000      	b.n	8001288 <HAL_nRF24L01P_RXPipe+0x9c>
	}
	return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	0018      	movs	r0, r3
 800128a:	46bd      	mov	sp, r7
 800128c:	b004      	add	sp, #16
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_nRF24L01P_SetAddressWidth>:

HAL_StatusTypeDef HAL_nRF24L01P_SetAddressWidth(nRF24L01P *nRF, nRF_ADDR_WIDTH AddrWidth)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	000a      	movs	r2, r1
 800129a:	1cfb      	adds	r3, r7, #3
 800129c:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_SETUP_AW, &regValue) != HAL_OK)
 800129e:	230f      	movs	r3, #15
 80012a0:	18fa      	adds	r2, r7, r3
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2103      	movs	r1, #3
 80012a6:	0018      	movs	r0, r3
 80012a8:	f000 f975 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 80012ac:	1e03      	subs	r3, r0, #0
 80012ae:	d001      	beq.n	80012b4 <HAL_nRF24L01P_SetAddressWidth+0x24>
	{
		return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e020      	b.n	80012f6 <HAL_nRF24L01P_SetAddressWidth+0x66>
	}
	
	AddrWidth &= (0x03);
 80012b4:	1cfb      	adds	r3, r7, #3
 80012b6:	1cfa      	adds	r2, r7, #3
 80012b8:	7812      	ldrb	r2, [r2, #0]
 80012ba:	2103      	movs	r1, #3
 80012bc:	400a      	ands	r2, r1
 80012be:	701a      	strb	r2, [r3, #0]
	regValue &= (0xFC); //nRF_SETUP_AW reg's 0, 1 and 2. bits are Cleared
 80012c0:	210f      	movs	r1, #15
 80012c2:	187b      	adds	r3, r7, r1
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2203      	movs	r2, #3
 80012c8:	4393      	bics	r3, r2
 80012ca:	b2da      	uxtb	r2, r3
 80012cc:	187b      	adds	r3, r7, r1
 80012ce:	701a      	strb	r2, [r3, #0]
	regValue |= (AddrWidth); //nRF_SETUP_AW reg's 0, 1 and 2. bits are Configured
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	781a      	ldrb	r2, [r3, #0]
 80012d4:	1cfb      	adds	r3, r7, #3
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	4313      	orrs	r3, r2
 80012da:	b2da      	uxtb	r2, r3
 80012dc:	187b      	adds	r3, r7, r1
 80012de:	701a      	strb	r2, [r3, #0]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_SETUP_AW, &regValue) != HAL_OK)
 80012e0:	187a      	adds	r2, r7, r1
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2103      	movs	r1, #3
 80012e6:	0018      	movs	r0, r3
 80012e8:	f000 f934 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 80012ec:	1e03      	subs	r3, r0, #0
 80012ee:	d001      	beq.n	80012f4 <HAL_nRF24L01P_SetAddressWidth+0x64>
	{
		return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e000      	b.n	80012f6 <HAL_nRF24L01P_SetAddressWidth+0x66>
	}
	return HAL_OK;
 80012f4:	2300      	movs	r3, #0
}
 80012f6:	0018      	movs	r0, r3
 80012f8:	46bd      	mov	sp, r7
 80012fa:	b004      	add	sp, #16
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_nRF24L01P_SetRetransmissionDelay>:

HAL_StatusTypeDef HAL_nRF24L01P_SetRetransmissionDelay(nRF24L01P *nRF, nRF_RETX_DELAY Delay)
{
 80012fe:	b580      	push	{r7, lr}
 8001300:	b084      	sub	sp, #16
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	000a      	movs	r2, r1
 8001308:	1cfb      	adds	r3, r7, #3
 800130a:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 800130c:	230f      	movs	r3, #15
 800130e:	18fa      	adds	r2, r7, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2104      	movs	r1, #4
 8001314:	0018      	movs	r0, r3
 8001316:	f000 f93e 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 800131a:	1e03      	subs	r3, r0, #0
 800131c:	d001      	beq.n	8001322 <HAL_nRF24L01P_SetRetransmissionDelay+0x24>
	{
		return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e024      	b.n	800136c <HAL_nRF24L01P_SetRetransmissionDelay+0x6e>
	}
	
	Delay &= (0x0F);
 8001322:	1cfb      	adds	r3, r7, #3
 8001324:	1cfa      	adds	r2, r7, #3
 8001326:	7812      	ldrb	r2, [r2, #0]
 8001328:	210f      	movs	r1, #15
 800132a:	400a      	ands	r2, r1
 800132c:	701a      	strb	r2, [r3, #0]
	regValue &= (0x0F); //nRF_SETUP_RETR reg's 4, 5, 6 and 7. bits are Cleared
 800132e:	210f      	movs	r1, #15
 8001330:	187b      	adds	r3, r7, r1
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	220f      	movs	r2, #15
 8001336:	4013      	ands	r3, r2
 8001338:	b2da      	uxtb	r2, r3
 800133a:	187b      	adds	r3, r7, r1
 800133c:	701a      	strb	r2, [r3, #0]
	regValue |= (Delay << 4); //nRF_SETUP_RETR reg's 4, 5, 6 and 7. bits are Configured
 800133e:	1cfb      	adds	r3, r7, #3
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	011b      	lsls	r3, r3, #4
 8001344:	b25a      	sxtb	r2, r3
 8001346:	187b      	adds	r3, r7, r1
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	b25b      	sxtb	r3, r3
 800134c:	4313      	orrs	r3, r2
 800134e:	b25b      	sxtb	r3, r3
 8001350:	b2da      	uxtb	r2, r3
 8001352:	187b      	adds	r3, r7, r1
 8001354:	701a      	strb	r2, [r3, #0]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 8001356:	187a      	adds	r2, r7, r1
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2104      	movs	r1, #4
 800135c:	0018      	movs	r0, r3
 800135e:	f000 f8f9 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 8001362:	1e03      	subs	r3, r0, #0
 8001364:	d001      	beq.n	800136a <HAL_nRF24L01P_SetRetransmissionDelay+0x6c>
	{
		return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e000      	b.n	800136c <HAL_nRF24L01P_SetRetransmissionDelay+0x6e>
	}
	return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	0018      	movs	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	b004      	add	sp, #16
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_nRF24L01P_SetRetransmissionCount>:

HAL_StatusTypeDef HAL_nRF24L01P_SetRetransmissionCount(nRF24L01P *nRF, nRF_RETX_COUNT Count)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	000a      	movs	r2, r1
 800137e:	1cfb      	adds	r3, r7, #3
 8001380:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 8001382:	230f      	movs	r3, #15
 8001384:	18fa      	adds	r2, r7, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2104      	movs	r1, #4
 800138a:	0018      	movs	r0, r3
 800138c:	f000 f903 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 8001390:	1e03      	subs	r3, r0, #0
 8001392:	d001      	beq.n	8001398 <HAL_nRF24L01P_SetRetransmissionCount+0x24>
	{
		return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e020      	b.n	80013da <HAL_nRF24L01P_SetRetransmissionCount+0x66>
	}
	
	Count &= (0x0F);
 8001398:	1cfb      	adds	r3, r7, #3
 800139a:	1cfa      	adds	r2, r7, #3
 800139c:	7812      	ldrb	r2, [r2, #0]
 800139e:	210f      	movs	r1, #15
 80013a0:	400a      	ands	r2, r1
 80013a2:	701a      	strb	r2, [r3, #0]
	regValue &= (0xF0); //nRF_SETUP_RETR reg's 0, 1, 2 and 3. bits are Cleared
 80013a4:	210f      	movs	r1, #15
 80013a6:	187b      	adds	r3, r7, r1
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	220f      	movs	r2, #15
 80013ac:	4393      	bics	r3, r2
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	187b      	adds	r3, r7, r1
 80013b2:	701a      	strb	r2, [r3, #0]
	regValue |= (Count); //nRF_SETUP_RETR reg's 0, 1, 2 and 3. bits are Configured
 80013b4:	187b      	adds	r3, r7, r1
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	1cfb      	adds	r3, r7, #3
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4313      	orrs	r3, r2
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	701a      	strb	r2, [r3, #0]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_SETUP_RETR, &regValue) != HAL_OK)
 80013c4:	187a      	adds	r2, r7, r1
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	2104      	movs	r1, #4
 80013ca:	0018      	movs	r0, r3
 80013cc:	f000 f8c2 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 80013d0:	1e03      	subs	r3, r0, #0
 80013d2:	d001      	beq.n	80013d8 <HAL_nRF24L01P_SetRetransmissionCount+0x64>
	{
		return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e000      	b.n	80013da <HAL_nRF24L01P_SetRetransmissionCount+0x66>
	}
	return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	0018      	movs	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	b004      	add	sp, #16
 80013e0:	bd80      	pop	{r7, pc}

080013e2 <HAL_nRF24L01P_SetRFChannel>:

HAL_StatusTypeDef HAL_nRF24L01P_SetRFChannel(nRF24L01P *nRF, uint8_t Channel)
{
 80013e2:	b580      	push	{r7, lr}
 80013e4:	b082      	sub	sp, #8
 80013e6:	af00      	add	r7, sp, #0
 80013e8:	6078      	str	r0, [r7, #4]
 80013ea:	000a      	movs	r2, r1
 80013ec:	1cfb      	adds	r3, r7, #3
 80013ee:	701a      	strb	r2, [r3, #0]
	/* ---- Pre Process ---- */
	Channel &= 0x7F;	// nRF_RF_CH 7. bit is RESERVED
 80013f0:	1cfb      	adds	r3, r7, #3
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	227f      	movs	r2, #127	@ 0x7f
 80013f6:	4013      	ands	r3, r2
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	1cfb      	adds	r3, r7, #3
 80013fc:	701a      	strb	r2, [r3, #0]
										// Freq. = (2400 + "Channel" Value) MHz 
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_RF_CH, &Channel) != HAL_OK)
 80013fe:	1cfa      	adds	r2, r7, #3
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2105      	movs	r1, #5
 8001404:	0018      	movs	r0, r3
 8001406:	f000 f8a5 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 800140a:	1e03      	subs	r3, r0, #0
 800140c:	d001      	beq.n	8001412 <HAL_nRF24L01P_SetRFChannel+0x30>
	{
		return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_nRF24L01P_SetRFChannel+0x32>
	}
	return HAL_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	0018      	movs	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	b002      	add	sp, #8
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_nRF24L01P_ClearInterrupts>:

HAL_StatusTypeDef HAL_nRF24L01P_ClearInterrupts(nRF24L01P *nRF)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b084      	sub	sp, #16
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_STATUS, &regValue) != HAL_OK)
 8001424:	230f      	movs	r3, #15
 8001426:	18fa      	adds	r2, r7, r3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2107      	movs	r1, #7
 800142c:	0018      	movs	r0, r3
 800142e:	f000 f8b2 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 8001432:	1e03      	subs	r3, r0, #0
 8001434:	d001      	beq.n	800143a <HAL_nRF24L01P_ClearInterrupts+0x1e>
	{
		return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e012      	b.n	8001460 <HAL_nRF24L01P_ClearInterrupts+0x44>
	}
	
	regValue |= (0x07 << 4); //nRF_STATUS reg's 4.,5. and 6. bits are RESET
 800143a:	210f      	movs	r1, #15
 800143c:	187b      	adds	r3, r7, r1
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	2270      	movs	r2, #112	@ 0x70
 8001442:	4313      	orrs	r3, r2
 8001444:	b2da      	uxtb	r2, r3
 8001446:	187b      	adds	r3, r7, r1
 8001448:	701a      	strb	r2, [r3, #0]
	
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_STATUS, &regValue) != HAL_OK)
 800144a:	187a      	adds	r2, r7, r1
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2107      	movs	r1, #7
 8001450:	0018      	movs	r0, r3
 8001452:	f000 f87f 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 8001456:	1e03      	subs	r3, r0, #0
 8001458:	d001      	beq.n	800145e <HAL_nRF24L01P_ClearInterrupts+0x42>
	{
		return HAL_ERROR;
 800145a:	2301      	movs	r3, #1
 800145c:	e000      	b.n	8001460 <HAL_nRF24L01P_ClearInterrupts+0x44>
	}
	return HAL_OK;
 800145e:	2300      	movs	r3, #0
}
 8001460:	0018      	movs	r0, r3
 8001462:	46bd      	mov	sp, r7
 8001464:	b004      	add	sp, #16
 8001466:	bd80      	pop	{r7, pc}

08001468 <HAL_nRF24L01P_SetDataRate>:
	}
	return HAL_OK;
}

HAL_StatusTypeDef HAL_nRF24L01P_SetDataRate(nRF24L01P *nRF, nRF_DATA_RATE Rate)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	000a      	movs	r2, r1
 8001472:	1cfb      	adds	r3, r7, #3
 8001474:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t regValue;
	/* ---- Pre Process ---- */
	if(HAL_nRF24L01P_ReadRegister(nRF, nRF_RF_SETUP, &regValue) != HAL_OK)
 8001476:	230f      	movs	r3, #15
 8001478:	18fa      	adds	r2, r7, r3
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	2106      	movs	r1, #6
 800147e:	0018      	movs	r0, r3
 8001480:	f000 f889 	bl	8001596 <HAL_nRF24L01P_ReadRegister>
 8001484:	1e03      	subs	r3, r0, #0
 8001486:	d001      	beq.n	800148c <HAL_nRF24L01P_SetDataRate+0x24>
	{
		return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e046      	b.n	800151a <HAL_nRF24L01P_SetDataRate+0xb2>
	}
	switch(Rate)
 800148c:	1cfb      	adds	r3, r7, #3
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b02      	cmp	r3, #2
 8001492:	d024      	beq.n	80014de <HAL_nRF24L01P_SetDataRate+0x76>
 8001494:	dc33      	bgt.n	80014fe <HAL_nRF24L01P_SetDataRate+0x96>
 8001496:	2b00      	cmp	r3, #0
 8001498:	d011      	beq.n	80014be <HAL_nRF24L01P_SetDataRate+0x56>
 800149a:	2b01      	cmp	r3, #1
 800149c:	d12f      	bne.n	80014fe <HAL_nRF24L01P_SetDataRate+0x96>
	{
		case nRF_DATA_RATE_250KBPS:
			regValue |=  (0x01 << 5);	//nRF_RF_SETUP reg's 5. bit is SET
 800149e:	210f      	movs	r1, #15
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2220      	movs	r2, #32
 80014a6:	4313      	orrs	r3, r2
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	701a      	strb	r2, [r3, #0]
			regValue &= ~(0x01 << 3);	//nRF_RF_SETUP reg's 3. bit is RESET
 80014ae:	187b      	adds	r3, r7, r1
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2208      	movs	r2, #8
 80014b4:	4393      	bics	r3, r2
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	187b      	adds	r3, r7, r1
 80014ba:	701a      	strb	r2, [r3, #0]
		break;
 80014bc:	e021      	b.n	8001502 <HAL_nRF24L01P_SetDataRate+0x9a>
		case nRF_DATA_RATE_1MBPS:
			regValue &= ~(0x01 << 5);	//nRF_RF_SETUP reg's 5. bit is RESET
 80014be:	210f      	movs	r1, #15
 80014c0:	187b      	adds	r3, r7, r1
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2220      	movs	r2, #32
 80014c6:	4393      	bics	r3, r2
 80014c8:	b2da      	uxtb	r2, r3
 80014ca:	187b      	adds	r3, r7, r1
 80014cc:	701a      	strb	r2, [r3, #0]
			regValue &= ~(0x01 << 3);	//nRF_RF_SETUP reg's 3. bit is RESET
 80014ce:	187b      	adds	r3, r7, r1
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	2208      	movs	r2, #8
 80014d4:	4393      	bics	r3, r2
 80014d6:	b2da      	uxtb	r2, r3
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	701a      	strb	r2, [r3, #0]
		break;
 80014dc:	e011      	b.n	8001502 <HAL_nRF24L01P_SetDataRate+0x9a>
		case nRF_DATA_RATE_2MBPS:
			regValue &= ~(0x01 << 5);	//nRF_RF_SETUP reg's 5. bit is RESET
 80014de:	210f      	movs	r1, #15
 80014e0:	187b      	adds	r3, r7, r1
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2220      	movs	r2, #32
 80014e6:	4393      	bics	r3, r2
 80014e8:	b2da      	uxtb	r2, r3
 80014ea:	187b      	adds	r3, r7, r1
 80014ec:	701a      	strb	r2, [r3, #0]
			regValue |=  (0x01 << 3);	//nRF_RF_SETUP reg's 3. bit is SET
 80014ee:	187b      	adds	r3, r7, r1
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2208      	movs	r2, #8
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b2da      	uxtb	r2, r3
 80014f8:	187b      	adds	r3, r7, r1
 80014fa:	701a      	strb	r2, [r3, #0]
		break;
 80014fc:	e001      	b.n	8001502 <HAL_nRF24L01P_SetDataRate+0x9a>
		default:
			return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e00b      	b.n	800151a <HAL_nRF24L01P_SetDataRate+0xb2>
	}
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_WriteRegister(nRF, nRF_RF_SETUP, &regValue) != HAL_OK)
 8001502:	230f      	movs	r3, #15
 8001504:	18fa      	adds	r2, r7, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2106      	movs	r1, #6
 800150a:	0018      	movs	r0, r3
 800150c:	f000 f822 	bl	8001554 <HAL_nRF24L01P_WriteRegister>
 8001510:	1e03      	subs	r3, r0, #0
 8001512:	d001      	beq.n	8001518 <HAL_nRF24L01P_SetDataRate+0xb0>
	{
		return HAL_ERROR;
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <HAL_nRF24L01P_SetDataRate+0xb2>
	}
	return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	0018      	movs	r0, r3
 800151c:	46bd      	mov	sp, r7
 800151e:	b004      	add	sp, #16
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_nRF24L01P_FlushRX>:
	}
	return HAL_OK;
}

HAL_StatusTypeDef HAL_nRF24L01P_FlushRX(nRF24L01P *nRF)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b086      	sub	sp, #24
 8001526:	af02      	add	r7, sp, #8
 8001528:	6078      	str	r0, [r7, #4]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 800152a:	210f      	movs	r1, #15
 800152c:	187b      	adds	r3, r7, r1
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_FLUSH_RX, &Zero, &Zero, 0) != HAL_OK)
 8001532:	187b      	adds	r3, r7, r1
 8001534:	187a      	adds	r2, r7, r1
 8001536:	6878      	ldr	r0, [r7, #4]
 8001538:	2100      	movs	r1, #0
 800153a:	9100      	str	r1, [sp, #0]
 800153c:	21e2      	movs	r1, #226	@ 0xe2
 800153e:	f000 f84a 	bl	80015d6 <HAL_nRF24L01P_SendCommand>
 8001542:	1e03      	subs	r3, r0, #0
 8001544:	d001      	beq.n	800154a <HAL_nRF24L01P_FlushRX+0x28>
	{
		return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e000      	b.n	800154c <HAL_nRF24L01P_FlushRX+0x2a>
	}
	return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	0018      	movs	r0, r3
 800154e:	46bd      	mov	sp, r7
 8001550:	b004      	add	sp, #16
 8001552:	bd80      	pop	{r7, pc}

08001554 <HAL_nRF24L01P_WriteRegister>:
	}
	return HAL_OK;
}

HAL_StatusTypeDef HAL_nRF24L01P_WriteRegister(nRF24L01P *nRF, uint8_t regAddr, uint8_t *pRegData)
{
 8001554:	b590      	push	{r4, r7, lr}
 8001556:	b089      	sub	sp, #36	@ 0x24
 8001558:	af02      	add	r7, sp, #8
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	200b      	movs	r0, #11
 8001560:	183b      	adds	r3, r7, r0
 8001562:	1c0a      	adds	r2, r1, #0
 8001564:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 8001566:	2417      	movs	r4, #23
 8001568:	193b      	adds	r3, r7, r4
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_W_REGISTER + regAddr, pRegData, &Zero, 1) != HAL_OK)
 800156e:	183b      	adds	r3, r7, r0
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	3320      	adds	r3, #32
 8001574:	b2d9      	uxtb	r1, r3
 8001576:	193b      	adds	r3, r7, r4
 8001578:	687a      	ldr	r2, [r7, #4]
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	2401      	movs	r4, #1
 800157e:	9400      	str	r4, [sp, #0]
 8001580:	f000 f829 	bl	80015d6 <HAL_nRF24L01P_SendCommand>
 8001584:	1e03      	subs	r3, r0, #0
 8001586:	d001      	beq.n	800158c <HAL_nRF24L01P_WriteRegister+0x38>
	{
		return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e000      	b.n	800158e <HAL_nRF24L01P_WriteRegister+0x3a>
	}
	return HAL_OK;
 800158c:	2300      	movs	r3, #0
}
 800158e:	0018      	movs	r0, r3
 8001590:	46bd      	mov	sp, r7
 8001592:	b007      	add	sp, #28
 8001594:	bd90      	pop	{r4, r7, pc}

08001596 <HAL_nRF24L01P_ReadRegister>:

HAL_StatusTypeDef HAL_nRF24L01P_ReadRegister(nRF24L01P *nRF, uint8_t regAddr, uint8_t *pRegData)
{
 8001596:	b590      	push	{r4, r7, lr}
 8001598:	b089      	sub	sp, #36	@ 0x24
 800159a:	af02      	add	r7, sp, #8
 800159c:	60f8      	str	r0, [r7, #12]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	200b      	movs	r0, #11
 80015a2:	183b      	adds	r3, r7, r0
 80015a4:	1c0a      	adds	r2, r1, #0
 80015a6:	701a      	strb	r2, [r3, #0]
	/* ---- Local Vars. ---- */
	uint8_t Zero = 0x00;
 80015a8:	2117      	movs	r1, #23
 80015aa:	187b      	adds	r3, r7, r1
 80015ac:	2200      	movs	r2, #0
 80015ae:	701a      	strb	r2, [r3, #0]
	/* ---- Fcn Process ---- */
	if(HAL_nRF24L01P_SendCommand(nRF, nRF_CMD_R_REGISTER + regAddr, &Zero, pRegData, 1) != HAL_OK)
 80015b0:	687c      	ldr	r4, [r7, #4]
 80015b2:	187a      	adds	r2, r7, r1
 80015b4:	183b      	adds	r3, r7, r0
 80015b6:	7819      	ldrb	r1, [r3, #0]
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	2301      	movs	r3, #1
 80015bc:	9300      	str	r3, [sp, #0]
 80015be:	0023      	movs	r3, r4
 80015c0:	f000 f809 	bl	80015d6 <HAL_nRF24L01P_SendCommand>
 80015c4:	1e03      	subs	r3, r0, #0
 80015c6:	d001      	beq.n	80015cc <HAL_nRF24L01P_ReadRegister+0x36>
	{
		return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <HAL_nRF24L01P_ReadRegister+0x38>
	}
	return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	0018      	movs	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	b007      	add	sp, #28
 80015d4:	bd90      	pop	{r4, r7, pc}

080015d6 <HAL_nRF24L01P_SendCommand>:

HAL_StatusTypeDef HAL_nRF24L01P_SendCommand(nRF24L01P *nRF, uint8_t Command, uint8_t *TxBuffer, uint8_t *RxBuffer, uint8_t Size)
{
 80015d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015d8:	46c6      	mov	lr, r8
 80015da:	b500      	push	{lr}
 80015dc:	b09a      	sub	sp, #104	@ 0x68
 80015de:	af02      	add	r7, sp, #8
 80015e0:	6478      	str	r0, [r7, #68]	@ 0x44
 80015e2:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80015e4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015e6:	230b      	movs	r3, #11
 80015e8:	2038      	movs	r0, #56	@ 0x38
 80015ea:	181b      	adds	r3, r3, r0
 80015ec:	19da      	adds	r2, r3, r7
 80015ee:	1c0b      	adds	r3, r1, #0
 80015f0:	7013      	strb	r3, [r2, #0]
 80015f2:	466b      	mov	r3, sp
 80015f4:	4698      	mov	r8, r3
	/* ---- Local Vars. ---- */
	uint8_t tempTxBuffer[Size + 1];
 80015f6:	2140      	movs	r1, #64	@ 0x40
 80015f8:	180b      	adds	r3, r1, r0
 80015fa:	19db      	adds	r3, r3, r7
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	1c5a      	adds	r2, r3, #1
 8001600:	1e53      	subs	r3, r2, #1
 8001602:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001604:	0013      	movs	r3, r2
 8001606:	61bb      	str	r3, [r7, #24]
 8001608:	2300      	movs	r3, #0
 800160a:	61fb      	str	r3, [r7, #28]
 800160c:	69b8      	ldr	r0, [r7, #24]
 800160e:	69f9      	ldr	r1, [r7, #28]
 8001610:	0003      	movs	r3, r0
 8001612:	0f5b      	lsrs	r3, r3, #29
 8001614:	000e      	movs	r6, r1
 8001616:	00f5      	lsls	r5, r6, #3
 8001618:	431d      	orrs	r5, r3
 800161a:	00c4      	lsls	r4, r0, #3
 800161c:	0013      	movs	r3, r2
 800161e:	613b      	str	r3, [r7, #16]
 8001620:	2300      	movs	r3, #0
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	6938      	ldr	r0, [r7, #16]
 8001626:	6979      	ldr	r1, [r7, #20]
 8001628:	0004      	movs	r4, r0
 800162a:	0f63      	lsrs	r3, r4, #29
 800162c:	000c      	movs	r4, r1
 800162e:	00e4      	lsls	r4, r4, #3
 8001630:	637c      	str	r4, [r7, #52]	@ 0x34
 8001632:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8001634:	431c      	orrs	r4, r3
 8001636:	637c      	str	r4, [r7, #52]	@ 0x34
 8001638:	00c0      	lsls	r0, r0, #3
 800163a:	6338      	str	r0, [r7, #48]	@ 0x30
 800163c:	0013      	movs	r3, r2
 800163e:	3307      	adds	r3, #7
 8001640:	08db      	lsrs	r3, r3, #3
 8001642:	00db      	lsls	r3, r3, #3
 8001644:	4668      	mov	r0, sp
 8001646:	1ac0      	subs	r0, r0, r3
 8001648:	4685      	mov	sp, r0
 800164a:	ab02      	add	r3, sp, #8
 800164c:	3300      	adds	r3, #0
 800164e:	657b      	str	r3, [r7, #84]	@ 0x54
	uint8_t tempRxBuffer[Size + 1];
 8001650:	2140      	movs	r1, #64	@ 0x40
 8001652:	2538      	movs	r5, #56	@ 0x38
 8001654:	194b      	adds	r3, r1, r5
 8001656:	19db      	adds	r3, r3, r7
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	1e5a      	subs	r2, r3, #1
 800165e:	653a      	str	r2, [r7, #80]	@ 0x50
 8001660:	001a      	movs	r2, r3
 8001662:	60ba      	str	r2, [r7, #8]
 8001664:	2200      	movs	r2, #0
 8001666:	60fa      	str	r2, [r7, #12]
 8001668:	68b8      	ldr	r0, [r7, #8]
 800166a:	68f9      	ldr	r1, [r7, #12]
 800166c:	0004      	movs	r4, r0
 800166e:	0f62      	lsrs	r2, r4, #29
 8001670:	000c      	movs	r4, r1
 8001672:	00e4      	lsls	r4, r4, #3
 8001674:	62fc      	str	r4, [r7, #44]	@ 0x2c
 8001676:	6afc      	ldr	r4, [r7, #44]	@ 0x2c
 8001678:	4314      	orrs	r4, r2
 800167a:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800167c:	0001      	movs	r1, r0
 800167e:	00c9      	lsls	r1, r1, #3
 8001680:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001682:	001a      	movs	r2, r3
 8001684:	603a      	str	r2, [r7, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	607a      	str	r2, [r7, #4]
 800168a:	6838      	ldr	r0, [r7, #0]
 800168c:	6879      	ldr	r1, [r7, #4]
 800168e:	0004      	movs	r4, r0
 8001690:	0f62      	lsrs	r2, r4, #29
 8001692:	000c      	movs	r4, r1
 8001694:	00e4      	lsls	r4, r4, #3
 8001696:	627c      	str	r4, [r7, #36]	@ 0x24
 8001698:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 800169a:	4314      	orrs	r4, r2
 800169c:	627c      	str	r4, [r7, #36]	@ 0x24
 800169e:	0001      	movs	r1, r0
 80016a0:	00c9      	lsls	r1, r1, #3
 80016a2:	6239      	str	r1, [r7, #32]
 80016a4:	3307      	adds	r3, #7
 80016a6:	08db      	lsrs	r3, r3, #3
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4669      	mov	r1, sp
 80016ac:	1ac9      	subs	r1, r1, r3
 80016ae:	468d      	mov	sp, r1
 80016b0:	ab02      	add	r3, sp, #8
 80016b2:	3300      	adds	r3, #0
 80016b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	/* ---- Pre Process ---- */
	tempTxBuffer[0] = Command;
 80016b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80016b8:	220b      	movs	r2, #11
 80016ba:	1952      	adds	r2, r2, r5
 80016bc:	19d2      	adds	r2, r2, r7
 80016be:	7812      	ldrb	r2, [r2, #0]
 80016c0:	701a      	strb	r2, [r3, #0]
	tempRxBuffer[0] = 0x00;
 80016c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < Size; i++)
 80016c8:	2327      	movs	r3, #39	@ 0x27
 80016ca:	195b      	adds	r3, r3, r5
 80016cc:	19db      	adds	r3, r3, r7
 80016ce:	2200      	movs	r2, #0
 80016d0:	701a      	strb	r2, [r3, #0]
 80016d2:	e01b      	b.n	800170c <HAL_nRF24L01P_SendCommand+0x136>
	{
		tempTxBuffer[i + 1] = TxBuffer[i]; // Fill tempTxBuffer with Command + All of TxBuffer
 80016d4:	2027      	movs	r0, #39	@ 0x27
 80016d6:	2438      	movs	r4, #56	@ 0x38
 80016d8:	1903      	adds	r3, r0, r4
 80016da:	19db      	adds	r3, r3, r7
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80016e0:	18d2      	adds	r2, r2, r3
 80016e2:	1903      	adds	r3, r0, r4
 80016e4:	19db      	adds	r3, r3, r7
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	7811      	ldrb	r1, [r2, #0]
 80016ec:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80016ee:	54d1      	strb	r1, [r2, r3]
		tempRxBuffer[i + 1] = 0x00;
 80016f0:	1903      	adds	r3, r0, r4
 80016f2:	19db      	adds	r3, r3, r7
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	3301      	adds	r3, #1
 80016f8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80016fa:	2100      	movs	r1, #0
 80016fc:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < Size; i++)
 80016fe:	1903      	adds	r3, r0, r4
 8001700:	19db      	adds	r3, r3, r7
 8001702:	781a      	ldrb	r2, [r3, #0]
 8001704:	1903      	adds	r3, r0, r4
 8001706:	19db      	adds	r3, r3, r7
 8001708:	3201      	adds	r2, #1
 800170a:	701a      	strb	r2, [r3, #0]
 800170c:	2327      	movs	r3, #39	@ 0x27
 800170e:	2538      	movs	r5, #56	@ 0x38
 8001710:	195b      	adds	r3, r3, r5
 8001712:	19da      	adds	r2, r3, r7
 8001714:	2440      	movs	r4, #64	@ 0x40
 8001716:	1963      	adds	r3, r4, r5
 8001718:	19db      	adds	r3, r3, r7
 800171a:	7812      	ldrb	r2, [r2, #0]
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	429a      	cmp	r2, r3
 8001720:	d3d8      	bcc.n	80016d4 <HAL_nRF24L01P_SendCommand+0xfe>
	}
	/* ---- Fcn Process ---- */
	HAL_nRF24L01P_nSS_Low(nRF); // notSlaveSelect pin is Low
 8001722:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001724:	0018      	movs	r0, r3
 8001726:	f000 f857 	bl	80017d8 <HAL_nRF24L01P_nSS_Low>
	if(HAL_SPI_TransmitReceive(nRF->hspi, tempTxBuffer, tempRxBuffer, Size + 1, nRF_SPI_TIMEOUT) != HAL_OK)
 800172a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800172c:	6818      	ldr	r0, [r3, #0]
 800172e:	1963      	adds	r3, r4, r5
 8001730:	19db      	adds	r3, r3, r7
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b29b      	uxth	r3, r3
 8001736:	3301      	adds	r3, #1
 8001738:	b29c      	uxth	r4, r3
 800173a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800173c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800173e:	23fa      	movs	r3, #250	@ 0xfa
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	9300      	str	r3, [sp, #0]
 8001744:	0023      	movs	r3, r4
 8001746:	f003 f823 	bl	8004790 <HAL_SPI_TransmitReceive>
 800174a:	1e03      	subs	r3, r0, #0
 800174c:	d001      	beq.n	8001752 <HAL_nRF24L01P_SendCommand+0x17c>
	{
		return HAL_ERROR;
 800174e:	2301      	movs	r3, #1
 8001750:	e02b      	b.n	80017aa <HAL_nRF24L01P_SendCommand+0x1d4>
	}
	/* ---- PostProcess ---- */
	for(uint8_t i = 0; i < Size; i++)
 8001752:	2326      	movs	r3, #38	@ 0x26
 8001754:	2238      	movs	r2, #56	@ 0x38
 8001756:	189b      	adds	r3, r3, r2
 8001758:	19db      	adds	r3, r3, r7
 800175a:	2200      	movs	r2, #0
 800175c:	701a      	strb	r2, [r3, #0]
 800175e:	e014      	b.n	800178a <HAL_nRF24L01P_SendCommand+0x1b4>
	{
		RxBuffer[i] = tempRxBuffer[i + 1];
 8001760:	2026      	movs	r0, #38	@ 0x26
 8001762:	2438      	movs	r4, #56	@ 0x38
 8001764:	1903      	adds	r3, r0, r4
 8001766:	19db      	adds	r3, r3, r7
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	1c5a      	adds	r2, r3, #1
 800176c:	1903      	adds	r3, r0, r4
 800176e:	19db      	adds	r3, r3, r7
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001774:	18cb      	adds	r3, r1, r3
 8001776:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001778:	5c8a      	ldrb	r2, [r1, r2]
 800177a:	701a      	strb	r2, [r3, #0]
	for(uint8_t i = 0; i < Size; i++)
 800177c:	1903      	adds	r3, r0, r4
 800177e:	19db      	adds	r3, r3, r7
 8001780:	781a      	ldrb	r2, [r3, #0]
 8001782:	1903      	adds	r3, r0, r4
 8001784:	19db      	adds	r3, r3, r7
 8001786:	3201      	adds	r2, #1
 8001788:	701a      	strb	r2, [r3, #0]
 800178a:	2326      	movs	r3, #38	@ 0x26
 800178c:	2138      	movs	r1, #56	@ 0x38
 800178e:	185b      	adds	r3, r3, r1
 8001790:	19da      	adds	r2, r3, r7
 8001792:	2340      	movs	r3, #64	@ 0x40
 8001794:	185b      	adds	r3, r3, r1
 8001796:	19db      	adds	r3, r3, r7
 8001798:	7812      	ldrb	r2, [r2, #0]
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	429a      	cmp	r2, r3
 800179e:	d3df      	bcc.n	8001760 <HAL_nRF24L01P_SendCommand+0x18a>
	}
	HAL_nRF24L01P_nSS_High(nRF); // notSlaveSelect pin is High
 80017a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80017a2:	0018      	movs	r0, r3
 80017a4:	f000 f808 	bl	80017b8 <HAL_nRF24L01P_nSS_High>
	return HAL_OK;
 80017a8:	2300      	movs	r3, #0
 80017aa:	46c5      	mov	sp, r8
}
 80017ac:	0018      	movs	r0, r3
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b018      	add	sp, #96	@ 0x60
 80017b2:	bc80      	pop	{r7}
 80017b4:	46b8      	mov	r8, r7
 80017b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080017b8 <HAL_nRF24L01P_nSS_High>:

void HAL_nRF24L01P_nSS_High(nRF24L01P *nRF)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b082      	sub	sp, #8
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_nSS_GPIO_PORT, nRF->nRF_nSS_GPIO_PIN, GPIO_PIN_SET);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017c8:	2201      	movs	r2, #1
 80017ca:	0019      	movs	r1, r3
 80017cc:	f001 fba6 	bl	8002f1c <HAL_GPIO_WritePin>
}
 80017d0:	46c0      	nop			@ (mov r8, r8)
 80017d2:	46bd      	mov	sp, r7
 80017d4:	b002      	add	sp, #8
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <HAL_nRF24L01P_nSS_Low>:
void HAL_nRF24L01P_nSS_Low(nRF24L01P *nRF)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(nRF->nRF_nSS_GPIO_PORT, nRF->nRF_nSS_GPIO_PIN, GPIO_PIN_RESET);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e8:	2200      	movs	r2, #0
 80017ea:	0019      	movs	r1, r3
 80017ec:	f001 fb96 	bl	8002f1c <HAL_GPIO_WritePin>
}
 80017f0:	46c0      	nop			@ (mov r8, r8)
 80017f2:	46bd      	mov	sp, r7
 80017f4:	b002      	add	sp, #8
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <ssd1306_WriteCommand>:
static SSD1306_t SSD1306;


//I2C write command
void ssd1306_WriteCommand(uint8_t command)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af04      	add	r7, sp, #16
 80017fe:	0002      	movs	r2, r0
 8001800:	1dfb      	adds	r3, r7, #7
 8001802:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x00,1,&command,1,10);
 8001804:	4807      	ldr	r0, [pc, #28]	@ (8001824 <ssd1306_WriteCommand+0x2c>)
 8001806:	230a      	movs	r3, #10
 8001808:	9302      	str	r3, [sp, #8]
 800180a:	2301      	movs	r3, #1
 800180c:	9301      	str	r3, [sp, #4]
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	2301      	movs	r3, #1
 8001814:	2200      	movs	r2, #0
 8001816:	2178      	movs	r1, #120	@ 0x78
 8001818:	f001 fc44 	bl	80030a4 <HAL_I2C_Mem_Write>
}
 800181c:	46c0      	nop			@ (mov r8, r8)
 800181e:	46bd      	mov	sp, r7
 8001820:	b002      	add	sp, #8
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000160 	.word	0x20000160

08001828 <ssd1306_Init>:


//Initializing SSD1306 chip
uint8_t ssd1306_Init(void)
{	
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0

	HAL_Delay(100);
 800182c:	2064      	movs	r0, #100	@ 0x64
 800182e:	f000 fb05 	bl	8001e3c <HAL_Delay>
	
	/* Init LCD */
	ssd1306_WriteCommand(0xAE); //display off
 8001832:	20ae      	movs	r0, #174	@ 0xae
 8001834:	f7ff ffe0 	bl	80017f8 <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode   
 8001838:	2020      	movs	r0, #32
 800183a:	f7ff ffdd 	bl	80017f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800183e:	2000      	movs	r0, #0
 8001840:	f7ff ffda 	bl	80017f8 <ssd1306_WriteCommand>


	ssd1306_WriteCommand(0x81); //--set contrast control register
 8001844:	2081      	movs	r0, #129	@ 0x81
 8001846:	f7ff ffd7 	bl	80017f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xF0);
 800184a:	20f0      	movs	r0, #240	@ 0xf0
 800184c:	f7ff ffd4 	bl	80017f8 <ssd1306_WriteCommand>

	ssd1306_WriteCommand(0xA6); //--set normal display
 8001850:	20a6      	movs	r0, #166	@ 0xa6
 8001852:	f7ff ffd1 	bl	80017f8 <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64)
 8001856:	20a8      	movs	r0, #168	@ 0xa8
 8001858:	f7ff ffce 	bl	80017f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(SSD1306_HEIGHT - 1); //
 800185c:	201f      	movs	r0, #31
 800185e:	f7ff ffcb 	bl	80017f8 <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001862:	20a4      	movs	r0, #164	@ 0xa4
 8001864:	f7ff ffc8 	bl	80017f8 <ssd1306_WriteCommand>

  ssd1306_WriteCommand(0xD3); //-set display offset
 8001868:	20d3      	movs	r0, #211	@ 0xd3
 800186a:	f7ff ffc5 	bl	80017f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x00); //-not offset
 800186e:	2000      	movs	r0, #0
 8001870:	f7ff ffc2 	bl	80017f8 <ssd1306_WriteCommand>

  ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001874:	20d5      	movs	r0, #213	@ 0xd5
 8001876:	f7ff ffbf 	bl	80017f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x80); //--set divide ratio
 800187a:	2080      	movs	r0, #128	@ 0x80
 800187c:	f7ff ffbc 	bl	80017f8 <ssd1306_WriteCommand>

  ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001880:	20d9      	movs	r0, #217	@ 0xd9
 8001882:	f7ff ffb9 	bl	80017f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x22); //
 8001886:	2022      	movs	r0, #34	@ 0x22
 8001888:	f7ff ffb6 	bl	80017f8 <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration
 800188c:	20da      	movs	r0, #218	@ 0xda
 800188e:	f7ff ffb3 	bl	80017f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x02);	//128*32
 8001892:	2002      	movs	r0, #2
 8001894:	f7ff ffb0 	bl	80017f8 <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0xDB); //--set vcomh
 8001898:	20db      	movs	r0, #219	@ 0xdb
 800189a:	f7ff ffad 	bl	80017f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x40); 
 800189e:	2040      	movs	r0, #64	@ 0x40
 80018a0:	f7ff ffaa 	bl	80017f8 <ssd1306_WriteCommand>
	
	ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80018a4:	208d      	movs	r0, #141	@ 0x8d
 80018a6:	f7ff ffa7 	bl	80017f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0x14); //
 80018aa:	2014      	movs	r0, #20
 80018ac:	f7ff ffa4 	bl	80017f8 <ssd1306_WriteCommand>
	ssd1306_WriteCommand(0xAF); //--turn on SSD1306 panel
 80018b0:	20af      	movs	r0, #175	@ 0xaf
 80018b2:	f7ff ffa1 	bl	80017f8 <ssd1306_WriteCommand>
	
	/* Clear screen */
	ssd1306_Fill(Black);
 80018b6:	2000      	movs	r0, #0
 80018b8:	f000 f812 	bl	80018e0 <ssd1306_Fill>
	
	/* Update screen */
	ssd1306_UpdateScreen();
 80018bc:	f000 f834 	bl	8001928 <ssd1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80018c0:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <ssd1306_Init+0xb4>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80018c6:	4b05      	ldr	r3, [pc, #20]	@ (80018dc <ssd1306_Init+0xb4>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80018cc:	4b03      	ldr	r3, [pc, #12]	@ (80018dc <ssd1306_Init+0xb4>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	0018      	movs	r0, r3
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	20000464 	.word	0x20000464

080018e0 <ssd1306_Fill>:


//Fill screen with black or white
void ssd1306_Fill(SSD1306_COLOR color) 
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	0002      	movs	r2, r0
 80018e8:	1dfb      	adds	r3, r7, #7
 80018ea:	701a      	strb	r2, [r3, #0]
	/* Set memory */
	uint32_t i;

	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 80018ec:	2300      	movs	r3, #0
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	e00e      	b.n	8001910 <ssd1306_Fill+0x30>
	{
		SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 80018f2:	1dfb      	adds	r3, r7, #7
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d101      	bne.n	80018fe <ssd1306_Fill+0x1e>
 80018fa:	2100      	movs	r1, #0
 80018fc:	e000      	b.n	8001900 <ssd1306_Fill+0x20>
 80018fe:	21ff      	movs	r1, #255	@ 0xff
 8001900:	4a08      	ldr	r2, [pc, #32]	@ (8001924 <ssd1306_Fill+0x44>)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	18d3      	adds	r3, r2, r3
 8001906:	1c0a      	adds	r2, r1, #0
 8001908:	701a      	strb	r2, [r3, #0]
	for(i = 0; i < sizeof(SSD1306_Buffer); i++)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	3301      	adds	r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	2380      	movs	r3, #128	@ 0x80
 8001914:	009b      	lsls	r3, r3, #2
 8001916:	429a      	cmp	r2, r3
 8001918:	d3eb      	bcc.n	80018f2 <ssd1306_Fill+0x12>
	}
}
 800191a:	46c0      	nop			@ (mov r8, r8)
 800191c:	46c0      	nop			@ (mov r8, r8)
 800191e:	46bd      	mov	sp, r7
 8001920:	b004      	add	sp, #16
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000264 	.word	0x20000264

08001928 <ssd1306_UpdateScreen>:


//Update RAM to screen
void ssd1306_UpdateScreen(void) 
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af04      	add	r7, sp, #16
	uint8_t i;
	
	for (i = 0; i < 8; i++) {
 800192e:	1dfb      	adds	r3, r7, #7
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
 8001934:	e021      	b.n	800197a <ssd1306_UpdateScreen+0x52>
		ssd1306_WriteCommand(0xB0 + i);
 8001936:	1dfb      	adds	r3, r7, #7
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	3b50      	subs	r3, #80	@ 0x50
 800193c:	b2db      	uxtb	r3, r3
 800193e:	0018      	movs	r0, r3
 8001940:	f7ff ff5a 	bl	80017f8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x00);
 8001944:	2000      	movs	r0, #0
 8001946:	f7ff ff57 	bl	80017f8 <ssd1306_WriteCommand>
		ssd1306_WriteCommand(0x10);
 800194a:	2010      	movs	r0, #16
 800194c:	f7ff ff54 	bl	80017f8 <ssd1306_WriteCommand>

		HAL_I2C_Mem_Write(&hi2c1,SSD1306_I2C_ADDR,0x40,1,&SSD1306_Buffer[SSD1306_WIDTH * i],SSD1306_WIDTH,100);
 8001950:	1dfb      	adds	r3, r7, #7
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	01da      	lsls	r2, r3, #7
 8001956:	4b0d      	ldr	r3, [pc, #52]	@ (800198c <ssd1306_UpdateScreen+0x64>)
 8001958:	18d3      	adds	r3, r2, r3
 800195a:	480d      	ldr	r0, [pc, #52]	@ (8001990 <ssd1306_UpdateScreen+0x68>)
 800195c:	2264      	movs	r2, #100	@ 0x64
 800195e:	9202      	str	r2, [sp, #8]
 8001960:	2280      	movs	r2, #128	@ 0x80
 8001962:	9201      	str	r2, [sp, #4]
 8001964:	9300      	str	r3, [sp, #0]
 8001966:	2301      	movs	r3, #1
 8001968:	2240      	movs	r2, #64	@ 0x40
 800196a:	2178      	movs	r1, #120	@ 0x78
 800196c:	f001 fb9a 	bl	80030a4 <HAL_I2C_Mem_Write>
	for (i = 0; i < 8; i++) {
 8001970:	1dfb      	adds	r3, r7, #7
 8001972:	781a      	ldrb	r2, [r3, #0]
 8001974:	1dfb      	adds	r3, r7, #7
 8001976:	3201      	adds	r2, #1
 8001978:	701a      	strb	r2, [r3, #0]
 800197a:	1dfb      	adds	r3, r7, #7
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b07      	cmp	r3, #7
 8001980:	d9d9      	bls.n	8001936 <ssd1306_UpdateScreen+0xe>
	}
}
 8001982:	46c0      	nop			@ (mov r8, r8)
 8001984:	46c0      	nop			@ (mov r8, r8)
 8001986:	46bd      	mov	sp, r7
 8001988:	b002      	add	sp, #8
 800198a:	bd80      	pop	{r7, pc}
 800198c:	20000264 	.word	0x20000264
 8001990:	20000160 	.word	0x20000160

08001994 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <HAL_MspInit+0x44>)
 800199c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800199e:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <HAL_MspInit+0x44>)
 80019a0:	2101      	movs	r1, #1
 80019a2:	430a      	orrs	r2, r1
 80019a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80019a6:	4b0c      	ldr	r3, [pc, #48]	@ (80019d8 <HAL_MspInit+0x44>)
 80019a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019aa:	2201      	movs	r2, #1
 80019ac:	4013      	ands	r3, r2
 80019ae:	607b      	str	r3, [r7, #4]
 80019b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b2:	4b09      	ldr	r3, [pc, #36]	@ (80019d8 <HAL_MspInit+0x44>)
 80019b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019b6:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <HAL_MspInit+0x44>)
 80019b8:	2180      	movs	r1, #128	@ 0x80
 80019ba:	0549      	lsls	r1, r1, #21
 80019bc:	430a      	orrs	r2, r1
 80019be:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019c0:	4b05      	ldr	r3, [pc, #20]	@ (80019d8 <HAL_MspInit+0x44>)
 80019c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019c4:	2380      	movs	r3, #128	@ 0x80
 80019c6:	055b      	lsls	r3, r3, #21
 80019c8:	4013      	ands	r3, r2
 80019ca:	603b      	str	r3, [r7, #0]
 80019cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ce:	46c0      	nop			@ (mov r8, r8)
 80019d0:	46bd      	mov	sp, r7
 80019d2:	b002      	add	sp, #8
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	46c0      	nop			@ (mov r8, r8)
 80019d8:	40021000 	.word	0x40021000

080019dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80019dc:	b590      	push	{r4, r7, lr}
 80019de:	b08b      	sub	sp, #44	@ 0x2c
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	2414      	movs	r4, #20
 80019e6:	193b      	adds	r3, r7, r4
 80019e8:	0018      	movs	r0, r3
 80019ea:	2314      	movs	r3, #20
 80019ec:	001a      	movs	r2, r3
 80019ee:	2100      	movs	r1, #0
 80019f0:	f003 fd28 	bl	8005444 <memset>
  if(hadc->Instance==ADC1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a2d      	ldr	r2, [pc, #180]	@ (8001ab0 <HAL_ADC_MspInit+0xd4>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d154      	bne.n	8001aa8 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80019fe:	4b2d      	ldr	r3, [pc, #180]	@ (8001ab4 <HAL_ADC_MspInit+0xd8>)
 8001a00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a02:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab4 <HAL_ADC_MspInit+0xd8>)
 8001a04:	2180      	movs	r1, #128	@ 0x80
 8001a06:	0349      	lsls	r1, r1, #13
 8001a08:	430a      	orrs	r2, r1
 8001a0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a0c:	4b29      	ldr	r3, [pc, #164]	@ (8001ab4 <HAL_ADC_MspInit+0xd8>)
 8001a0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a10:	2380      	movs	r3, #128	@ 0x80
 8001a12:	035b      	lsls	r3, r3, #13
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
 8001a18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1a:	4b26      	ldr	r3, [pc, #152]	@ (8001ab4 <HAL_ADC_MspInit+0xd8>)
 8001a1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a1e:	4b25      	ldr	r3, [pc, #148]	@ (8001ab4 <HAL_ADC_MspInit+0xd8>)
 8001a20:	2101      	movs	r1, #1
 8001a22:	430a      	orrs	r2, r1
 8001a24:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a26:	4b23      	ldr	r3, [pc, #140]	@ (8001ab4 <HAL_ADC_MspInit+0xd8>)
 8001a28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]
    PA0     ------> ADC1_IN0
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001a32:	193b      	adds	r3, r7, r4
 8001a34:	2239      	movs	r2, #57	@ 0x39
 8001a36:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a38:	193b      	adds	r3, r7, r4
 8001a3a:	2203      	movs	r2, #3
 8001a3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	193b      	adds	r3, r7, r4
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	193a      	adds	r2, r7, r4
 8001a46:	23a0      	movs	r3, #160	@ 0xa0
 8001a48:	05db      	lsls	r3, r3, #23
 8001a4a:	0011      	movs	r1, r2
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f001 f901 	bl	8002c54 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001a52:	4b19      	ldr	r3, [pc, #100]	@ (8001ab8 <HAL_ADC_MspInit+0xdc>)
 8001a54:	4a19      	ldr	r2, [pc, #100]	@ (8001abc <HAL_ADC_MspInit+0xe0>)
 8001a56:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001a58:	4b17      	ldr	r3, [pc, #92]	@ (8001ab8 <HAL_ADC_MspInit+0xdc>)
 8001a5a:	2205      	movs	r2, #5
 8001a5c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	@ (8001ab8 <HAL_ADC_MspInit+0xdc>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a64:	4b14      	ldr	r3, [pc, #80]	@ (8001ab8 <HAL_ADC_MspInit+0xdc>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	@ (8001ab8 <HAL_ADC_MspInit+0xdc>)
 8001a6c:	2280      	movs	r2, #128	@ 0x80
 8001a6e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a70:	4b11      	ldr	r3, [pc, #68]	@ (8001ab8 <HAL_ADC_MspInit+0xdc>)
 8001a72:	2280      	movs	r2, #128	@ 0x80
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a78:	4b0f      	ldr	r3, [pc, #60]	@ (8001ab8 <HAL_ADC_MspInit+0xdc>)
 8001a7a:	2280      	movs	r2, #128	@ 0x80
 8001a7c:	0112      	lsls	r2, r2, #4
 8001a7e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001a80:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab8 <HAL_ADC_MspInit+0xdc>)
 8001a82:	2220      	movs	r2, #32
 8001a84:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001a86:	4b0c      	ldr	r3, [pc, #48]	@ (8001ab8 <HAL_ADC_MspInit+0xdc>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ab8 <HAL_ADC_MspInit+0xdc>)
 8001a8e:	0018      	movs	r0, r3
 8001a90:	f000 ff54 	bl	800293c <HAL_DMA_Init>
 8001a94:	1e03      	subs	r3, r0, #0
 8001a96:	d001      	beq.n	8001a9c <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8001a98:	f7fe fe7e 	bl	8000798 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	4a06      	ldr	r2, [pc, #24]	@ (8001ab8 <HAL_ADC_MspInit+0xdc>)
 8001aa0:	651a      	str	r2, [r3, #80]	@ 0x50
 8001aa2:	4b05      	ldr	r3, [pc, #20]	@ (8001ab8 <HAL_ADC_MspInit+0xdc>)
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001aa8:	46c0      	nop			@ (mov r8, r8)
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	b00b      	add	sp, #44	@ 0x2c
 8001aae:	bd90      	pop	{r4, r7, pc}
 8001ab0:	40012400 	.word	0x40012400
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	20000104 	.word	0x20000104
 8001abc:	40020008 	.word	0x40020008

08001ac0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b095      	sub	sp, #84	@ 0x54
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	233c      	movs	r3, #60	@ 0x3c
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	0018      	movs	r0, r3
 8001ace:	2314      	movs	r3, #20
 8001ad0:	001a      	movs	r2, r3
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	f003 fcb6 	bl	8005444 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ad8:	2414      	movs	r4, #20
 8001ada:	193b      	adds	r3, r7, r4
 8001adc:	0018      	movs	r0, r3
 8001ade:	2328      	movs	r3, #40	@ 0x28
 8001ae0:	001a      	movs	r2, r3
 8001ae2:	2100      	movs	r1, #0
 8001ae4:	f003 fcae 	bl	8005444 <memset>
  if(hi2c->Instance==I2C1)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a22      	ldr	r2, [pc, #136]	@ (8001b78 <HAL_I2C_MspInit+0xb8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d13d      	bne.n	8001b6e <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001af2:	193b      	adds	r3, r7, r4
 8001af4:	2220      	movs	r2, #32
 8001af6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001af8:	193b      	adds	r3, r7, r4
 8001afa:	2200      	movs	r2, #0
 8001afc:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001afe:	193b      	adds	r3, r7, r4
 8001b00:	0018      	movs	r0, r3
 8001b02:	f002 fc13 	bl	800432c <HAL_RCCEx_PeriphCLKConfig>
 8001b06:	1e03      	subs	r3, r0, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001b0a:	f7fe fe45 	bl	8000798 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b0e:	4b1b      	ldr	r3, [pc, #108]	@ (8001b7c <HAL_I2C_MspInit+0xbc>)
 8001b10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b12:	4b1a      	ldr	r3, [pc, #104]	@ (8001b7c <HAL_I2C_MspInit+0xbc>)
 8001b14:	2102      	movs	r1, #2
 8001b16:	430a      	orrs	r2, r1
 8001b18:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b1a:	4b18      	ldr	r3, [pc, #96]	@ (8001b7c <HAL_I2C_MspInit+0xbc>)
 8001b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b1e:	2202      	movs	r2, #2
 8001b20:	4013      	ands	r3, r2
 8001b22:	613b      	str	r3, [r7, #16]
 8001b24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001b26:	213c      	movs	r1, #60	@ 0x3c
 8001b28:	187b      	adds	r3, r7, r1
 8001b2a:	22c0      	movs	r2, #192	@ 0xc0
 8001b2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b2e:	187b      	adds	r3, r7, r1
 8001b30:	2212      	movs	r2, #18
 8001b32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	187b      	adds	r3, r7, r1
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	187b      	adds	r3, r7, r1
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	2206      	movs	r2, #6
 8001b44:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b46:	187b      	adds	r3, r7, r1
 8001b48:	4a0d      	ldr	r2, [pc, #52]	@ (8001b80 <HAL_I2C_MspInit+0xc0>)
 8001b4a:	0019      	movs	r1, r3
 8001b4c:	0010      	movs	r0, r2
 8001b4e:	f001 f881 	bl	8002c54 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b52:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <HAL_I2C_MspInit+0xbc>)
 8001b54:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b56:	4b09      	ldr	r3, [pc, #36]	@ (8001b7c <HAL_I2C_MspInit+0xbc>)
 8001b58:	2180      	movs	r1, #128	@ 0x80
 8001b5a:	0389      	lsls	r1, r1, #14
 8001b5c:	430a      	orrs	r2, r1
 8001b5e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b60:	4b06      	ldr	r3, [pc, #24]	@ (8001b7c <HAL_I2C_MspInit+0xbc>)
 8001b62:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b64:	2380      	movs	r3, #128	@ 0x80
 8001b66:	039b      	lsls	r3, r3, #14
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b6e:	46c0      	nop			@ (mov r8, r8)
 8001b70:	46bd      	mov	sp, r7
 8001b72:	b015      	add	sp, #84	@ 0x54
 8001b74:	bd90      	pop	{r4, r7, pc}
 8001b76:	46c0      	nop			@ (mov r8, r8)
 8001b78:	40005400 	.word	0x40005400
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	50000400 	.word	0x50000400

08001b84 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b84:	b590      	push	{r4, r7, lr}
 8001b86:	b08b      	sub	sp, #44	@ 0x2c
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	2414      	movs	r4, #20
 8001b8e:	193b      	adds	r3, r7, r4
 8001b90:	0018      	movs	r0, r3
 8001b92:	2314      	movs	r3, #20
 8001b94:	001a      	movs	r2, r3
 8001b96:	2100      	movs	r1, #0
 8001b98:	f003 fc54 	bl	8005444 <memset>
  if(hspi->Instance==SPI1)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a1b      	ldr	r2, [pc, #108]	@ (8001c10 <HAL_SPI_MspInit+0x8c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d130      	bne.n	8001c08 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c14 <HAL_SPI_MspInit+0x90>)
 8001ba8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001baa:	4b1a      	ldr	r3, [pc, #104]	@ (8001c14 <HAL_SPI_MspInit+0x90>)
 8001bac:	2180      	movs	r1, #128	@ 0x80
 8001bae:	0149      	lsls	r1, r1, #5
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001bb4:	4b17      	ldr	r3, [pc, #92]	@ (8001c14 <HAL_SPI_MspInit+0x90>)
 8001bb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001bb8:	2380      	movs	r3, #128	@ 0x80
 8001bba:	015b      	lsls	r3, r3, #5
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	4b14      	ldr	r3, [pc, #80]	@ (8001c14 <HAL_SPI_MspInit+0x90>)
 8001bc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bc6:	4b13      	ldr	r3, [pc, #76]	@ (8001c14 <HAL_SPI_MspInit+0x90>)
 8001bc8:	2101      	movs	r1, #1
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001bce:	4b11      	ldr	r3, [pc, #68]	@ (8001c14 <HAL_SPI_MspInit+0x90>)
 8001bd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bd2:	2201      	movs	r2, #1
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    PA6     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_6;
 8001bda:	0021      	movs	r1, r4
 8001bdc:	187b      	adds	r3, r7, r1
 8001bde:	2246      	movs	r2, #70	@ 0x46
 8001be0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	187b      	adds	r3, r7, r1
 8001be4:	2202      	movs	r2, #2
 8001be6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	187b      	adds	r3, r7, r1
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bee:	187b      	adds	r3, r7, r1
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001bf4:	187b      	adds	r3, r7, r1
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	187a      	adds	r2, r7, r1
 8001bfc:	23a0      	movs	r3, #160	@ 0xa0
 8001bfe:	05db      	lsls	r3, r3, #23
 8001c00:	0011      	movs	r1, r2
 8001c02:	0018      	movs	r0, r3
 8001c04:	f001 f826 	bl	8002c54 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001c08:	46c0      	nop			@ (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b00b      	add	sp, #44	@ 0x2c
 8001c0e:	bd90      	pop	{r4, r7, pc}
 8001c10:	40013000 	.word	0x40013000
 8001c14:	40021000 	.word	0x40021000

08001c18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b08f      	sub	sp, #60	@ 0x3c
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c20:	2410      	movs	r4, #16
 8001c22:	193b      	adds	r3, r7, r4
 8001c24:	0018      	movs	r0, r3
 8001c26:	2328      	movs	r3, #40	@ 0x28
 8001c28:	001a      	movs	r2, r3
 8001c2a:	2100      	movs	r1, #0
 8001c2c:	f003 fc0a 	bl	8005444 <memset>
  if(htim_base->Instance==TIM1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a11      	ldr	r2, [pc, #68]	@ (8001c7c <HAL_TIM_Base_MspInit+0x64>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d11c      	bne.n	8001c74 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001c3a:	193b      	adds	r3, r7, r4
 8001c3c:	2280      	movs	r2, #128	@ 0x80
 8001c3e:	0392      	lsls	r2, r2, #14
 8001c40:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8001c42:	193b      	adds	r3, r7, r4
 8001c44:	2200      	movs	r2, #0
 8001c46:	621a      	str	r2, [r3, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c48:	193b      	adds	r3, r7, r4
 8001c4a:	0018      	movs	r0, r3
 8001c4c:	f002 fb6e 	bl	800432c <HAL_RCCEx_PeriphCLKConfig>
 8001c50:	1e03      	subs	r3, r0, #0
 8001c52:	d001      	beq.n	8001c58 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8001c54:	f7fe fda0 	bl	8000798 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001c58:	4b09      	ldr	r3, [pc, #36]	@ (8001c80 <HAL_TIM_Base_MspInit+0x68>)
 8001c5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c5c:	4b08      	ldr	r3, [pc, #32]	@ (8001c80 <HAL_TIM_Base_MspInit+0x68>)
 8001c5e:	2180      	movs	r1, #128	@ 0x80
 8001c60:	0109      	lsls	r1, r1, #4
 8001c62:	430a      	orrs	r2, r1
 8001c64:	641a      	str	r2, [r3, #64]	@ 0x40
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_TIM_Base_MspInit+0x68>)
 8001c68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001c6a:	2380      	movs	r3, #128	@ 0x80
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	4013      	ands	r3, r2
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001c74:	46c0      	nop			@ (mov r8, r8)
 8001c76:	46bd      	mov	sp, r7
 8001c78:	b00f      	add	sp, #60	@ 0x3c
 8001c7a:	bd90      	pop	{r4, r7, pc}
 8001c7c:	40012c00 	.word	0x40012c00
 8001c80:	40021000 	.word	0x40021000

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c88:	46c0      	nop			@ (mov r8, r8)
 8001c8a:	e7fd      	b.n	8001c88 <NMI_Handler+0x4>

08001c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c90:	46c0      	nop			@ (mov r8, r8)
 8001c92:	e7fd      	b.n	8001c90 <HardFault_Handler+0x4>

08001c94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c98:	46c0      	nop			@ (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cac:	f000 f8aa 	bl	8001e04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb0:	46c0      	nop			@ (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cbc:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <DMA1_Channel1_IRQHandler+0x14>)
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f000 fec6 	bl	8002a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cc4:	46c0      	nop			@ (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	20000104 	.word	0x20000104

08001cd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cd4:	46c0      	nop			@ (mov r8, r8)
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001cdc:	480d      	ldr	r0, [pc, #52]	@ (8001d14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001cde:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ce0:	f7ff fff6 	bl	8001cd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ce4:	480c      	ldr	r0, [pc, #48]	@ (8001d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ce6:	490d      	ldr	r1, [pc, #52]	@ (8001d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8001d20 <LoopForever+0xe>)
  movs r3, #0
 8001cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001cec:	e002      	b.n	8001cf4 <LoopCopyDataInit>

08001cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cf2:	3304      	adds	r3, #4

08001cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf8:	d3f9      	bcc.n	8001cee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8001d28 <LoopForever+0x16>)
  movs r3, #0
 8001cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d00:	e001      	b.n	8001d06 <LoopFillZerobss>

08001d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d04:	3204      	adds	r2, #4

08001d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d08:	d3fb      	bcc.n	8001d02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001d0a:	f003 fba3 	bl	8005454 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8001d0e:	f7fe fa91 	bl	8000234 <main>

08001d12 <LoopForever>:

LoopForever:
  b LoopForever
 8001d12:	e7fe      	b.n	8001d12 <LoopForever>
  ldr   r0, =_estack
 8001d14:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001d20:	08005580 	.word	0x08005580
  ldr r2, =_sbss
 8001d24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001d28:	20000470 	.word	0x20000470

08001d2c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001d2c:	e7fe      	b.n	8001d2c <ADC1_IRQHandler>
	...

08001d30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d36:	1dfb      	adds	r3, r7, #7
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d3c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d6c <HAL_Init+0x3c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	4b0a      	ldr	r3, [pc, #40]	@ (8001d6c <HAL_Init+0x3c>)
 8001d42:	2180      	movs	r1, #128	@ 0x80
 8001d44:	0049      	lsls	r1, r1, #1
 8001d46:	430a      	orrs	r2, r1
 8001d48:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d4a:	2003      	movs	r0, #3
 8001d4c:	f000 f810 	bl	8001d70 <HAL_InitTick>
 8001d50:	1e03      	subs	r3, r0, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001d54:	1dfb      	adds	r3, r7, #7
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	e001      	b.n	8001d60 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001d5c:	f7ff fe1a 	bl	8001994 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d60:	1dfb      	adds	r3, r7, #7
 8001d62:	781b      	ldrb	r3, [r3, #0]
}
 8001d64:	0018      	movs	r0, r3
 8001d66:	46bd      	mov	sp, r7
 8001d68:	b002      	add	sp, #8
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	40022000 	.word	0x40022000

08001d70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d70:	b590      	push	{r4, r7, lr}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d78:	230f      	movs	r3, #15
 8001d7a:	18fb      	adds	r3, r7, r3
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001d80:	4b1d      	ldr	r3, [pc, #116]	@ (8001df8 <HAL_InitTick+0x88>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d02b      	beq.n	8001de0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001d88:	4b1c      	ldr	r3, [pc, #112]	@ (8001dfc <HAL_InitTick+0x8c>)
 8001d8a:	681c      	ldr	r4, [r3, #0]
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001df8 <HAL_InitTick+0x88>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	0019      	movs	r1, r3
 8001d92:	23fa      	movs	r3, #250	@ 0xfa
 8001d94:	0098      	lsls	r0, r3, #2
 8001d96:	f7fe f9b5 	bl	8000104 <__udivsi3>
 8001d9a:	0003      	movs	r3, r0
 8001d9c:	0019      	movs	r1, r3
 8001d9e:	0020      	movs	r0, r4
 8001da0:	f7fe f9b0 	bl	8000104 <__udivsi3>
 8001da4:	0003      	movs	r3, r0
 8001da6:	0018      	movs	r0, r3
 8001da8:	f000 fdbb 	bl	8002922 <HAL_SYSTICK_Config>
 8001dac:	1e03      	subs	r3, r0, #0
 8001dae:	d112      	bne.n	8001dd6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b03      	cmp	r3, #3
 8001db4:	d80a      	bhi.n	8001dcc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001db6:	6879      	ldr	r1, [r7, #4]
 8001db8:	2301      	movs	r3, #1
 8001dba:	425b      	negs	r3, r3
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	0018      	movs	r0, r3
 8001dc0:	f000 fd8a 	bl	80028d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001dc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001e00 <HAL_InitTick+0x90>)
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	e00d      	b.n	8001de8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001dcc:	230f      	movs	r3, #15
 8001dce:	18fb      	adds	r3, r7, r3
 8001dd0:	2201      	movs	r2, #1
 8001dd2:	701a      	strb	r2, [r3, #0]
 8001dd4:	e008      	b.n	8001de8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dd6:	230f      	movs	r3, #15
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	2201      	movs	r2, #1
 8001ddc:	701a      	strb	r2, [r3, #0]
 8001dde:	e003      	b.n	8001de8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001de0:	230f      	movs	r3, #15
 8001de2:	18fb      	adds	r3, r7, r3
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001de8:	230f      	movs	r3, #15
 8001dea:	18fb      	adds	r3, r7, r3
 8001dec:	781b      	ldrb	r3, [r3, #0]
}
 8001dee:	0018      	movs	r0, r3
 8001df0:	46bd      	mov	sp, r7
 8001df2:	b005      	add	sp, #20
 8001df4:	bd90      	pop	{r4, r7, pc}
 8001df6:	46c0      	nop			@ (mov r8, r8)
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	20000000 	.word	0x20000000
 8001e00:	20000004 	.word	0x20000004

08001e04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e08:	4b05      	ldr	r3, [pc, #20]	@ (8001e20 <HAL_IncTick+0x1c>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	001a      	movs	r2, r3
 8001e0e:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <HAL_IncTick+0x20>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	18d2      	adds	r2, r2, r3
 8001e14:	4b03      	ldr	r3, [pc, #12]	@ (8001e24 <HAL_IncTick+0x20>)
 8001e16:	601a      	str	r2, [r3, #0]
}
 8001e18:	46c0      	nop			@ (mov r8, r8)
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	46c0      	nop			@ (mov r8, r8)
 8001e20:	20000008 	.word	0x20000008
 8001e24:	2000046c 	.word	0x2000046c

08001e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e2c:	4b02      	ldr	r3, [pc, #8]	@ (8001e38 <HAL_GetTick+0x10>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	46c0      	nop			@ (mov r8, r8)
 8001e38:	2000046c 	.word	0x2000046c

08001e3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff fff0 	bl	8001e28 <HAL_GetTick>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	3301      	adds	r3, #1
 8001e54:	d005      	beq.n	8001e62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e56:	4b0a      	ldr	r3, [pc, #40]	@ (8001e80 <HAL_Delay+0x44>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	001a      	movs	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	189b      	adds	r3, r3, r2
 8001e60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e62:	46c0      	nop			@ (mov r8, r8)
 8001e64:	f7ff ffe0 	bl	8001e28 <HAL_GetTick>
 8001e68:	0002      	movs	r2, r0
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	1ad3      	subs	r3, r2, r3
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d8f7      	bhi.n	8001e64 <HAL_Delay+0x28>
  {
  }
}
 8001e74:	46c0      	nop			@ (mov r8, r8)
 8001e76:	46c0      	nop			@ (mov r8, r8)
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b004      	add	sp, #16
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			@ (mov r8, r8)
 8001e80:	20000008 	.word	0x20000008

08001e84 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a05      	ldr	r2, [pc, #20]	@ (8001ea8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001e94:	401a      	ands	r2, r3
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	601a      	str	r2, [r3, #0]
}
 8001e9e:	46c0      	nop			@ (mov r8, r8)
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	b002      	add	sp, #8
 8001ea4:	bd80      	pop	{r7, pc}
 8001ea6:	46c0      	nop			@ (mov r8, r8)
 8001ea8:	fe3fffff 	.word	0xfe3fffff

08001eac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	23e0      	movs	r3, #224	@ 0xe0
 8001eba:	045b      	lsls	r3, r3, #17
 8001ebc:	4013      	ands	r3, r2
}
 8001ebe:	0018      	movs	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	b002      	add	sp, #8
 8001ec4:	bd80      	pop	{r7, pc}

08001ec6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001ec6:	b580      	push	{r7, lr}
 8001ec8:	b084      	sub	sp, #16
 8001eca:	af00      	add	r7, sp, #0
 8001ecc:	60f8      	str	r0, [r7, #12]
 8001ece:	60b9      	str	r1, [r7, #8]
 8001ed0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	68ba      	ldr	r2, [r7, #8]
 8001ed8:	2104      	movs	r1, #4
 8001eda:	400a      	ands	r2, r1
 8001edc:	2107      	movs	r1, #7
 8001ede:	4091      	lsls	r1, r2
 8001ee0:	000a      	movs	r2, r1
 8001ee2:	43d2      	mvns	r2, r2
 8001ee4:	401a      	ands	r2, r3
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	2104      	movs	r1, #4
 8001eea:	400b      	ands	r3, r1
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4099      	lsls	r1, r3
 8001ef0:	000b      	movs	r3, r1
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001ef8:	46c0      	nop			@ (mov r8, r8)
 8001efa:	46bd      	mov	sp, r7
 8001efc:	b004      	add	sp, #16
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	2104      	movs	r1, #4
 8001f12:	400a      	ands	r2, r1
 8001f14:	2107      	movs	r1, #7
 8001f16:	4091      	lsls	r1, r2
 8001f18:	000a      	movs	r2, r1
 8001f1a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2104      	movs	r1, #4
 8001f20:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f22:	40da      	lsrs	r2, r3
 8001f24:	0013      	movs	r3, r2
}
 8001f26:	0018      	movs	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	b002      	add	sp, #8
 8001f2c:	bd80      	pop	{r7, pc}

08001f2e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f2e:	b580      	push	{r7, lr}
 8001f30:	b084      	sub	sp, #16
 8001f32:	af00      	add	r7, sp, #0
 8001f34:	60f8      	str	r0, [r7, #12]
 8001f36:	60b9      	str	r1, [r7, #8]
 8001f38:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	211f      	movs	r1, #31
 8001f42:	400a      	ands	r2, r1
 8001f44:	210f      	movs	r1, #15
 8001f46:	4091      	lsls	r1, r2
 8001f48:	000a      	movs	r2, r1
 8001f4a:	43d2      	mvns	r2, r2
 8001f4c:	401a      	ands	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	0e9b      	lsrs	r3, r3, #26
 8001f52:	210f      	movs	r1, #15
 8001f54:	4019      	ands	r1, r3
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	201f      	movs	r0, #31
 8001f5a:	4003      	ands	r3, r0
 8001f5c:	4099      	lsls	r1, r3
 8001f5e:	000b      	movs	r3, r1
 8001f60:	431a      	orrs	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f66:	46c0      	nop			@ (mov r8, r8)
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	b004      	add	sp, #16
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	035b      	lsls	r3, r3, #13
 8001f80:	0b5b      	lsrs	r3, r3, #13
 8001f82:	431a      	orrs	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f88:	46c0      	nop			@ (mov r8, r8)
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	b002      	add	sp, #8
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
 8001f98:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f9e:	683a      	ldr	r2, [r7, #0]
 8001fa0:	0352      	lsls	r2, r2, #13
 8001fa2:	0b52      	lsrs	r2, r2, #13
 8001fa4:	43d2      	mvns	r2, r2
 8001fa6:	401a      	ands	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001fac:	46c0      	nop			@ (mov r8, r8)
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b002      	add	sp, #8
 8001fb2:	bd80      	pop	{r7, pc}

08001fb4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	68ba      	ldr	r2, [r7, #8]
 8001fc6:	0212      	lsls	r2, r2, #8
 8001fc8:	43d2      	mvns	r2, r2
 8001fca:	401a      	ands	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	400b      	ands	r3, r1
 8001fd4:	4904      	ldr	r1, [pc, #16]	@ (8001fe8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001fd6:	400b      	ands	r3, r1
 8001fd8:	431a      	orrs	r2, r3
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8001fde:	46c0      	nop			@ (mov r8, r8)
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b004      	add	sp, #16
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	46c0      	nop			@ (mov r8, r8)
 8001fe8:	07ffff00 	.word	0x07ffff00

08001fec <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4a05      	ldr	r2, [pc, #20]	@ (8002010 <LL_ADC_EnableInternalRegulator+0x24>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	2280      	movs	r2, #128	@ 0x80
 8001ffe:	0552      	lsls	r2, r2, #21
 8002000:	431a      	orrs	r2, r3
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002006:	46c0      	nop			@ (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	b002      	add	sp, #8
 800200c:	bd80      	pop	{r7, pc}
 800200e:	46c0      	nop			@ (mov r8, r8)
 8002010:	6fffffe8 	.word	0x6fffffe8

08002014 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	2380      	movs	r3, #128	@ 0x80
 8002022:	055b      	lsls	r3, r3, #21
 8002024:	401a      	ands	r2, r3
 8002026:	2380      	movs	r3, #128	@ 0x80
 8002028:	055b      	lsls	r3, r3, #21
 800202a:	429a      	cmp	r2, r3
 800202c:	d101      	bne.n	8002032 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 800202e:	2301      	movs	r3, #1
 8002030:	e000      	b.n	8002034 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002032:	2300      	movs	r3, #0
}
 8002034:	0018      	movs	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	b002      	add	sp, #8
 800203a:	bd80      	pop	{r7, pc}

0800203c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b082      	sub	sp, #8
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	2201      	movs	r2, #1
 800204a:	4013      	ands	r3, r2
 800204c:	2b01      	cmp	r3, #1
 800204e:	d101      	bne.n	8002054 <LL_ADC_IsEnabled+0x18>
 8002050:	2301      	movs	r3, #1
 8002052:	e000      	b.n	8002056 <LL_ADC_IsEnabled+0x1a>
 8002054:	2300      	movs	r3, #0
}
 8002056:	0018      	movs	r0, r3
 8002058:	46bd      	mov	sp, r7
 800205a:	b002      	add	sp, #8
 800205c:	bd80      	pop	{r7, pc}

0800205e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b082      	sub	sp, #8
 8002062:	af00      	add	r7, sp, #0
 8002064:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2204      	movs	r2, #4
 800206c:	4013      	ands	r3, r2
 800206e:	2b04      	cmp	r3, #4
 8002070:	d101      	bne.n	8002076 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002076:	2300      	movs	r3, #0
}
 8002078:	0018      	movs	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	b002      	add	sp, #8
 800207e:	bd80      	pop	{r7, pc}

08002080 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002088:	231f      	movs	r3, #31
 800208a:	18fb      	adds	r3, r7, r3
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8002090:	2300      	movs	r3, #0
 8002092:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8002094:	2300      	movs	r3, #0
 8002096:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002098:	2300      	movs	r3, #0
 800209a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e17f      	b.n	80023a6 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10a      	bne.n	80020c4 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0018      	movs	r0, r3
 80020b2:	f7ff fc93 	bl	80019dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2254      	movs	r2, #84	@ 0x54
 80020c0:	2100      	movs	r1, #0
 80020c2:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	0018      	movs	r0, r3
 80020ca:	f7ff ffa3 	bl	8002014 <LL_ADC_IsInternalRegulatorEnabled>
 80020ce:	1e03      	subs	r3, r0, #0
 80020d0:	d115      	bne.n	80020fe <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	0018      	movs	r0, r3
 80020d8:	f7ff ff88 	bl	8001fec <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80020dc:	4bb4      	ldr	r3, [pc, #720]	@ (80023b0 <HAL_ADC_Init+0x330>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	49b4      	ldr	r1, [pc, #720]	@ (80023b4 <HAL_ADC_Init+0x334>)
 80020e2:	0018      	movs	r0, r3
 80020e4:	f7fe f80e 	bl	8000104 <__udivsi3>
 80020e8:	0003      	movs	r3, r0
 80020ea:	3301      	adds	r3, #1
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020f0:	e002      	b.n	80020f8 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	3b01      	subs	r3, #1
 80020f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f9      	bne.n	80020f2 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	0018      	movs	r0, r3
 8002104:	f7ff ff86 	bl	8002014 <LL_ADC_IsInternalRegulatorEnabled>
 8002108:	1e03      	subs	r3, r0, #0
 800210a:	d10f      	bne.n	800212c <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002110:	2210      	movs	r2, #16
 8002112:	431a      	orrs	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800211c:	2201      	movs	r2, #1
 800211e:	431a      	orrs	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002124:	231f      	movs	r3, #31
 8002126:	18fb      	adds	r3, r7, r3
 8002128:	2201      	movs	r2, #1
 800212a:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	0018      	movs	r0, r3
 8002132:	f7ff ff94 	bl	800205e <LL_ADC_REG_IsConversionOngoing>
 8002136:	0003      	movs	r3, r0
 8002138:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800213e:	2210      	movs	r2, #16
 8002140:	4013      	ands	r3, r2
 8002142:	d000      	beq.n	8002146 <HAL_ADC_Init+0xc6>
 8002144:	e122      	b.n	800238c <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d000      	beq.n	800214e <HAL_ADC_Init+0xce>
 800214c:	e11e      	b.n	800238c <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002152:	4a99      	ldr	r2, [pc, #612]	@ (80023b8 <HAL_ADC_Init+0x338>)
 8002154:	4013      	ands	r3, r2
 8002156:	2202      	movs	r2, #2
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	0018      	movs	r0, r3
 8002164:	f7ff ff6a 	bl	800203c <LL_ADC_IsEnabled>
 8002168:	1e03      	subs	r3, r0, #0
 800216a:	d000      	beq.n	800216e <HAL_ADC_Init+0xee>
 800216c:	e0ad      	b.n	80022ca <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	7e1b      	ldrb	r3, [r3, #24]
 8002176:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8002178:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	7e5b      	ldrb	r3, [r3, #25]
 800217e:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002180:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	7e9b      	ldrb	r3, [r3, #26]
 8002186:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002188:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	2b00      	cmp	r3, #0
 8002190:	d002      	beq.n	8002198 <HAL_ADC_Init+0x118>
 8002192:	2380      	movs	r3, #128	@ 0x80
 8002194:	015b      	lsls	r3, r3, #5
 8002196:	e000      	b.n	800219a <HAL_ADC_Init+0x11a>
 8002198:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800219a:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80021a0:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	691b      	ldr	r3, [r3, #16]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	da04      	bge.n	80021b4 <HAL_ADC_Init+0x134>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	691b      	ldr	r3, [r3, #16]
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	085b      	lsrs	r3, r3, #1
 80021b2:	e001      	b.n	80021b8 <HAL_ADC_Init+0x138>
 80021b4:	2380      	movs	r3, #128	@ 0x80
 80021b6:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 80021b8:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	212c      	movs	r1, #44	@ 0x2c
 80021be:	5c5b      	ldrb	r3, [r3, r1]
 80021c0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80021c2:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2220      	movs	r2, #32
 80021ce:	5c9b      	ldrb	r3, [r3, r2]
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d115      	bne.n	8002200 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	7e9b      	ldrb	r3, [r3, #26]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d105      	bne.n	80021e8 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	2280      	movs	r2, #128	@ 0x80
 80021e0:	0252      	lsls	r2, r2, #9
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	e00b      	b.n	8002200 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ec:	2220      	movs	r2, #32
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f8:	2201      	movs	r2, #1
 80021fa:	431a      	orrs	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002204:	2b00      	cmp	r3, #0
 8002206:	d00a      	beq.n	800221e <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800220c:	23e0      	movs	r3, #224	@ 0xe0
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002216:	4313      	orrs	r3, r2
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	4a65      	ldr	r2, [pc, #404]	@ (80023bc <HAL_ADC_Init+0x33c>)
 8002226:	4013      	ands	r3, r2
 8002228:	0019      	movs	r1, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	430a      	orrs	r2, r1
 8002232:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	0f9b      	lsrs	r3, r3, #30
 800223a:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002240:	4313      	orrs	r3, r2
 8002242:	697a      	ldr	r2, [r7, #20]
 8002244:	4313      	orrs	r3, r2
 8002246:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	223c      	movs	r2, #60	@ 0x3c
 800224c:	5c9b      	ldrb	r3, [r3, r2]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d111      	bne.n	8002276 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	0f9b      	lsrs	r3, r3, #30
 8002258:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800225e:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                      hadc->Init.Oversampling.Ratio         |
 8002264:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                      hadc->Init.Oversampling.RightBitShift |
 800226a:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	4313      	orrs	r3, r2
 8002270:	2201      	movs	r2, #1
 8002272:	4313      	orrs	r3, r2
 8002274:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	4a50      	ldr	r2, [pc, #320]	@ (80023c0 <HAL_ADC_Init+0x340>)
 800227e:	4013      	ands	r3, r2
 8002280:	0019      	movs	r1, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	697a      	ldr	r2, [r7, #20]
 8002288:	430a      	orrs	r2, r1
 800228a:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	685a      	ldr	r2, [r3, #4]
 8002290:	23c0      	movs	r3, #192	@ 0xc0
 8002292:	061b      	lsls	r3, r3, #24
 8002294:	429a      	cmp	r2, r3
 8002296:	d018      	beq.n	80022ca <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 800229c:	2380      	movs	r3, #128	@ 0x80
 800229e:	05db      	lsls	r3, r3, #23
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d012      	beq.n	80022ca <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80022a8:	2380      	movs	r3, #128	@ 0x80
 80022aa:	061b      	lsls	r3, r3, #24
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d00c      	beq.n	80022ca <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80022b0:	4b44      	ldr	r3, [pc, #272]	@ (80023c4 <HAL_ADC_Init+0x344>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a44      	ldr	r2, [pc, #272]	@ (80023c8 <HAL_ADC_Init+0x348>)
 80022b6:	4013      	ands	r3, r2
 80022b8:	0019      	movs	r1, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	23f0      	movs	r3, #240	@ 0xf0
 80022c0:	039b      	lsls	r3, r3, #14
 80022c2:	401a      	ands	r2, r3
 80022c4:	4b3f      	ldr	r3, [pc, #252]	@ (80023c4 <HAL_ADC_Init+0x344>)
 80022c6:	430a      	orrs	r2, r1
 80022c8:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6818      	ldr	r0, [r3, #0]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80022d2:	001a      	movs	r2, r3
 80022d4:	2100      	movs	r1, #0
 80022d6:	f7ff fdf6 	bl	8001ec6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6818      	ldr	r0, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022e2:	493a      	ldr	r1, [pc, #232]	@ (80023cc <HAL_ADC_Init+0x34c>)
 80022e4:	001a      	movs	r2, r3
 80022e6:	f7ff fdee 	bl	8001ec6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	691b      	ldr	r3, [r3, #16]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d109      	bne.n	8002306 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2110      	movs	r1, #16
 80022fe:	4249      	negs	r1, r1
 8002300:	430a      	orrs	r2, r1
 8002302:	629a      	str	r2, [r3, #40]	@ 0x28
 8002304:	e018      	b.n	8002338 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	691a      	ldr	r2, [r3, #16]
 800230a:	2380      	movs	r3, #128	@ 0x80
 800230c:	039b      	lsls	r3, r3, #14
 800230e:	429a      	cmp	r2, r3
 8002310:	d112      	bne.n	8002338 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	3b01      	subs	r3, #1
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	221c      	movs	r2, #28
 8002322:	4013      	ands	r3, r2
 8002324:	2210      	movs	r2, #16
 8002326:	4252      	negs	r2, r2
 8002328:	409a      	lsls	r2, r3
 800232a:	0011      	movs	r1, r2
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	430a      	orrs	r2, r1
 8002336:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2100      	movs	r1, #0
 800233e:	0018      	movs	r0, r3
 8002340:	f7ff fdde 	bl	8001f00 <LL_ADC_GetSamplingTimeCommonChannels>
 8002344:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800234a:	429a      	cmp	r2, r3
 800234c:	d10b      	bne.n	8002366 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002358:	2203      	movs	r2, #3
 800235a:	4393      	bics	r3, r2
 800235c:	2201      	movs	r2, #1
 800235e:	431a      	orrs	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002364:	e01c      	b.n	80023a0 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800236a:	2212      	movs	r2, #18
 800236c:	4393      	bics	r3, r2
 800236e:	2210      	movs	r2, #16
 8002370:	431a      	orrs	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800237a:	2201      	movs	r2, #1
 800237c:	431a      	orrs	r2, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8002382:	231f      	movs	r3, #31
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	2201      	movs	r2, #1
 8002388:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800238a:	e009      	b.n	80023a0 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002390:	2210      	movs	r2, #16
 8002392:	431a      	orrs	r2, r3
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002398:	231f      	movs	r3, #31
 800239a:	18fb      	adds	r3, r7, r3
 800239c:	2201      	movs	r2, #1
 800239e:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80023a0:	231f      	movs	r3, #31
 80023a2:	18fb      	adds	r3, r7, r3
 80023a4:	781b      	ldrb	r3, [r3, #0]
}
 80023a6:	0018      	movs	r0, r3
 80023a8:	46bd      	mov	sp, r7
 80023aa:	b008      	add	sp, #32
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	46c0      	nop			@ (mov r8, r8)
 80023b0:	20000000 	.word	0x20000000
 80023b4:	00030d40 	.word	0x00030d40
 80023b8:	fffffefd 	.word	0xfffffefd
 80023bc:	ffde0201 	.word	0xffde0201
 80023c0:	1ffffc02 	.word	0x1ffffc02
 80023c4:	40012708 	.word	0x40012708
 80023c8:	ffc3ffff 	.word	0xffc3ffff
 80023cc:	07ffff04 	.word	0x07ffff04

080023d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b086      	sub	sp, #24
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023da:	2317      	movs	r3, #23
 80023dc:	18fb      	adds	r3, r7, r3
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80023e2:	2300      	movs	r3, #0
 80023e4:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2254      	movs	r2, #84	@ 0x54
 80023ea:	5c9b      	ldrb	r3, [r3, r2]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x24>
 80023f0:	2302      	movs	r3, #2
 80023f2:	e1c0      	b.n	8002776 <HAL_ADC_ConfigChannel+0x3a6>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2254      	movs	r2, #84	@ 0x54
 80023f8:	2101      	movs	r1, #1
 80023fa:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0018      	movs	r0, r3
 8002402:	f7ff fe2c 	bl	800205e <LL_ADC_REG_IsConversionOngoing>
 8002406:	1e03      	subs	r3, r0, #0
 8002408:	d000      	beq.n	800240c <HAL_ADC_ConfigChannel+0x3c>
 800240a:	e1a3      	b.n	8002754 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d100      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x46>
 8002414:	e143      	b.n	800269e <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	2380      	movs	r3, #128	@ 0x80
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	429a      	cmp	r2, r3
 8002420:	d004      	beq.n	800242c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002426:	4ac1      	ldr	r2, [pc, #772]	@ (800272c <HAL_ADC_ConfigChannel+0x35c>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d108      	bne.n	800243e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0019      	movs	r1, r3
 8002436:	0010      	movs	r0, r2
 8002438:	f7ff fd99 	bl	8001f6e <LL_ADC_REG_SetSequencerChAdd>
 800243c:	e0c9      	b.n	80025d2 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	211f      	movs	r1, #31
 8002448:	400b      	ands	r3, r1
 800244a:	210f      	movs	r1, #15
 800244c:	4099      	lsls	r1, r3
 800244e:	000b      	movs	r3, r1
 8002450:	43db      	mvns	r3, r3
 8002452:	4013      	ands	r3, r2
 8002454:	0019      	movs	r1, r3
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	035b      	lsls	r3, r3, #13
 800245c:	0b5b      	lsrs	r3, r3, #13
 800245e:	d105      	bne.n	800246c <HAL_ADC_ConfigChannel+0x9c>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	0e9b      	lsrs	r3, r3, #26
 8002466:	221f      	movs	r2, #31
 8002468:	4013      	ands	r3, r2
 800246a:	e098      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2201      	movs	r2, #1
 8002472:	4013      	ands	r3, r2
 8002474:	d000      	beq.n	8002478 <HAL_ADC_ConfigChannel+0xa8>
 8002476:	e091      	b.n	800259c <HAL_ADC_ConfigChannel+0x1cc>
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2202      	movs	r2, #2
 800247e:	4013      	ands	r3, r2
 8002480:	d000      	beq.n	8002484 <HAL_ADC_ConfigChannel+0xb4>
 8002482:	e089      	b.n	8002598 <HAL_ADC_ConfigChannel+0x1c8>
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2204      	movs	r2, #4
 800248a:	4013      	ands	r3, r2
 800248c:	d000      	beq.n	8002490 <HAL_ADC_ConfigChannel+0xc0>
 800248e:	e081      	b.n	8002594 <HAL_ADC_ConfigChannel+0x1c4>
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2208      	movs	r2, #8
 8002496:	4013      	ands	r3, r2
 8002498:	d000      	beq.n	800249c <HAL_ADC_ConfigChannel+0xcc>
 800249a:	e079      	b.n	8002590 <HAL_ADC_ConfigChannel+0x1c0>
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	2210      	movs	r2, #16
 80024a2:	4013      	ands	r3, r2
 80024a4:	d000      	beq.n	80024a8 <HAL_ADC_ConfigChannel+0xd8>
 80024a6:	e071      	b.n	800258c <HAL_ADC_ConfigChannel+0x1bc>
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2220      	movs	r2, #32
 80024ae:	4013      	ands	r3, r2
 80024b0:	d000      	beq.n	80024b4 <HAL_ADC_ConfigChannel+0xe4>
 80024b2:	e069      	b.n	8002588 <HAL_ADC_ConfigChannel+0x1b8>
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2240      	movs	r2, #64	@ 0x40
 80024ba:	4013      	ands	r3, r2
 80024bc:	d000      	beq.n	80024c0 <HAL_ADC_ConfigChannel+0xf0>
 80024be:	e061      	b.n	8002584 <HAL_ADC_ConfigChannel+0x1b4>
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2280      	movs	r2, #128	@ 0x80
 80024c6:	4013      	ands	r3, r2
 80024c8:	d000      	beq.n	80024cc <HAL_ADC_ConfigChannel+0xfc>
 80024ca:	e059      	b.n	8002580 <HAL_ADC_ConfigChannel+0x1b0>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2380      	movs	r3, #128	@ 0x80
 80024d2:	005b      	lsls	r3, r3, #1
 80024d4:	4013      	ands	r3, r2
 80024d6:	d151      	bne.n	800257c <HAL_ADC_ConfigChannel+0x1ac>
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	2380      	movs	r3, #128	@ 0x80
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4013      	ands	r3, r2
 80024e2:	d149      	bne.n	8002578 <HAL_ADC_ConfigChannel+0x1a8>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	2380      	movs	r3, #128	@ 0x80
 80024ea:	00db      	lsls	r3, r3, #3
 80024ec:	4013      	ands	r3, r2
 80024ee:	d141      	bne.n	8002574 <HAL_ADC_ConfigChannel+0x1a4>
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2380      	movs	r3, #128	@ 0x80
 80024f6:	011b      	lsls	r3, r3, #4
 80024f8:	4013      	ands	r3, r2
 80024fa:	d139      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x1a0>
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	2380      	movs	r3, #128	@ 0x80
 8002502:	015b      	lsls	r3, r3, #5
 8002504:	4013      	ands	r3, r2
 8002506:	d131      	bne.n	800256c <HAL_ADC_ConfigChannel+0x19c>
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	2380      	movs	r3, #128	@ 0x80
 800250e:	019b      	lsls	r3, r3, #6
 8002510:	4013      	ands	r3, r2
 8002512:	d129      	bne.n	8002568 <HAL_ADC_ConfigChannel+0x198>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	2380      	movs	r3, #128	@ 0x80
 800251a:	01db      	lsls	r3, r3, #7
 800251c:	4013      	ands	r3, r2
 800251e:	d121      	bne.n	8002564 <HAL_ADC_ConfigChannel+0x194>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	2380      	movs	r3, #128	@ 0x80
 8002526:	021b      	lsls	r3, r3, #8
 8002528:	4013      	ands	r3, r2
 800252a:	d119      	bne.n	8002560 <HAL_ADC_ConfigChannel+0x190>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	2380      	movs	r3, #128	@ 0x80
 8002532:	025b      	lsls	r3, r3, #9
 8002534:	4013      	ands	r3, r2
 8002536:	d111      	bne.n	800255c <HAL_ADC_ConfigChannel+0x18c>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	2380      	movs	r3, #128	@ 0x80
 800253e:	029b      	lsls	r3, r3, #10
 8002540:	4013      	ands	r3, r2
 8002542:	d109      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x188>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	2380      	movs	r3, #128	@ 0x80
 800254a:	02db      	lsls	r3, r3, #11
 800254c:	4013      	ands	r3, r2
 800254e:	d001      	beq.n	8002554 <HAL_ADC_ConfigChannel+0x184>
 8002550:	2312      	movs	r3, #18
 8002552:	e024      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 8002554:	2300      	movs	r3, #0
 8002556:	e022      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 8002558:	2311      	movs	r3, #17
 800255a:	e020      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 800255c:	2310      	movs	r3, #16
 800255e:	e01e      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 8002560:	230f      	movs	r3, #15
 8002562:	e01c      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 8002564:	230e      	movs	r3, #14
 8002566:	e01a      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 8002568:	230d      	movs	r3, #13
 800256a:	e018      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 800256c:	230c      	movs	r3, #12
 800256e:	e016      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 8002570:	230b      	movs	r3, #11
 8002572:	e014      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 8002574:	230a      	movs	r3, #10
 8002576:	e012      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 8002578:	2309      	movs	r3, #9
 800257a:	e010      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 800257c:	2308      	movs	r3, #8
 800257e:	e00e      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 8002580:	2307      	movs	r3, #7
 8002582:	e00c      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 8002584:	2306      	movs	r3, #6
 8002586:	e00a      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 8002588:	2305      	movs	r3, #5
 800258a:	e008      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 800258c:	2304      	movs	r3, #4
 800258e:	e006      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 8002590:	2303      	movs	r3, #3
 8002592:	e004      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 8002594:	2302      	movs	r3, #2
 8002596:	e002      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <HAL_ADC_ConfigChannel+0x1ce>
 800259c:	2300      	movs	r3, #0
 800259e:	683a      	ldr	r2, [r7, #0]
 80025a0:	6852      	ldr	r2, [r2, #4]
 80025a2:	201f      	movs	r0, #31
 80025a4:	4002      	ands	r2, r0
 80025a6:	4093      	lsls	r3, r2
 80025a8:	000a      	movs	r2, r1
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	69db      	ldr	r3, [r3, #28]
 80025bc:	429a      	cmp	r2, r3
 80025be:	d808      	bhi.n	80025d2 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6818      	ldr	r0, [r3, #0]
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	001a      	movs	r2, r3
 80025ce:	f7ff fcae 	bl	8001f2e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6818      	ldr	r0, [r3, #0]
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	6819      	ldr	r1, [r3, #0]
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	001a      	movs	r2, r3
 80025e0:	f7ff fce8 	bl	8001fb4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	db00      	blt.n	80025ee <HAL_ADC_ConfigChannel+0x21e>
 80025ec:	e0bc      	b.n	8002768 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025ee:	4b50      	ldr	r3, [pc, #320]	@ (8002730 <HAL_ADC_ConfigChannel+0x360>)
 80025f0:	0018      	movs	r0, r3
 80025f2:	f7ff fc5b 	bl	8001eac <LL_ADC_GetCommonPathInternalCh>
 80025f6:	0003      	movs	r3, r0
 80025f8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a4d      	ldr	r2, [pc, #308]	@ (8002734 <HAL_ADC_ConfigChannel+0x364>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d122      	bne.n	800264a <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002604:	693a      	ldr	r2, [r7, #16]
 8002606:	2380      	movs	r3, #128	@ 0x80
 8002608:	041b      	lsls	r3, r3, #16
 800260a:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800260c:	d11d      	bne.n	800264a <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	2280      	movs	r2, #128	@ 0x80
 8002612:	0412      	lsls	r2, r2, #16
 8002614:	4313      	orrs	r3, r2
 8002616:	4a46      	ldr	r2, [pc, #280]	@ (8002730 <HAL_ADC_ConfigChannel+0x360>)
 8002618:	0019      	movs	r1, r3
 800261a:	0010      	movs	r0, r2
 800261c:	f7ff fc32 	bl	8001e84 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002620:	4b45      	ldr	r3, [pc, #276]	@ (8002738 <HAL_ADC_ConfigChannel+0x368>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4945      	ldr	r1, [pc, #276]	@ (800273c <HAL_ADC_ConfigChannel+0x36c>)
 8002626:	0018      	movs	r0, r3
 8002628:	f7fd fd6c 	bl	8000104 <__udivsi3>
 800262c:	0003      	movs	r3, r0
 800262e:	1c5a      	adds	r2, r3, #1
 8002630:	0013      	movs	r3, r2
 8002632:	005b      	lsls	r3, r3, #1
 8002634:	189b      	adds	r3, r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800263a:	e002      	b.n	8002642 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	3b01      	subs	r3, #1
 8002640:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f9      	bne.n	800263c <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002648:	e08e      	b.n	8002768 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a3c      	ldr	r2, [pc, #240]	@ (8002740 <HAL_ADC_ConfigChannel+0x370>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d10e      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002654:	693a      	ldr	r2, [r7, #16]
 8002656:	2380      	movs	r3, #128	@ 0x80
 8002658:	045b      	lsls	r3, r3, #17
 800265a:	4013      	ands	r3, r2
 800265c:	d109      	bne.n	8002672 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	2280      	movs	r2, #128	@ 0x80
 8002662:	0452      	lsls	r2, r2, #17
 8002664:	4313      	orrs	r3, r2
 8002666:	4a32      	ldr	r2, [pc, #200]	@ (8002730 <HAL_ADC_ConfigChannel+0x360>)
 8002668:	0019      	movs	r1, r3
 800266a:	0010      	movs	r0, r2
 800266c:	f7ff fc0a 	bl	8001e84 <LL_ADC_SetCommonPathInternalCh>
 8002670:	e07a      	b.n	8002768 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a33      	ldr	r2, [pc, #204]	@ (8002744 <HAL_ADC_ConfigChannel+0x374>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d000      	beq.n	800267e <HAL_ADC_ConfigChannel+0x2ae>
 800267c:	e074      	b.n	8002768 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	2380      	movs	r3, #128	@ 0x80
 8002682:	03db      	lsls	r3, r3, #15
 8002684:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002686:	d000      	beq.n	800268a <HAL_ADC_ConfigChannel+0x2ba>
 8002688:	e06e      	b.n	8002768 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	2280      	movs	r2, #128	@ 0x80
 800268e:	03d2      	lsls	r2, r2, #15
 8002690:	4313      	orrs	r3, r2
 8002692:	4a27      	ldr	r2, [pc, #156]	@ (8002730 <HAL_ADC_ConfigChannel+0x360>)
 8002694:	0019      	movs	r1, r3
 8002696:	0010      	movs	r0, r2
 8002698:	f7ff fbf4 	bl	8001e84 <LL_ADC_SetCommonPathInternalCh>
 800269c:	e064      	b.n	8002768 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691a      	ldr	r2, [r3, #16]
 80026a2:	2380      	movs	r3, #128	@ 0x80
 80026a4:	061b      	lsls	r3, r3, #24
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d004      	beq.n	80026b4 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026ae:	4a1f      	ldr	r2, [pc, #124]	@ (800272c <HAL_ADC_ConfigChannel+0x35c>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d107      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681a      	ldr	r2, [r3, #0]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	0019      	movs	r1, r3
 80026be:	0010      	movs	r0, r2
 80026c0:	f7ff fc66 	bl	8001f90 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	da4d      	bge.n	8002768 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026cc:	4b18      	ldr	r3, [pc, #96]	@ (8002730 <HAL_ADC_ConfigChannel+0x360>)
 80026ce:	0018      	movs	r0, r3
 80026d0:	f7ff fbec 	bl	8001eac <LL_ADC_GetCommonPathInternalCh>
 80026d4:	0003      	movs	r3, r0
 80026d6:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a15      	ldr	r2, [pc, #84]	@ (8002734 <HAL_ADC_ConfigChannel+0x364>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d108      	bne.n	80026f4 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4a18      	ldr	r2, [pc, #96]	@ (8002748 <HAL_ADC_ConfigChannel+0x378>)
 80026e6:	4013      	ands	r3, r2
 80026e8:	4a11      	ldr	r2, [pc, #68]	@ (8002730 <HAL_ADC_ConfigChannel+0x360>)
 80026ea:	0019      	movs	r1, r3
 80026ec:	0010      	movs	r0, r2
 80026ee:	f7ff fbc9 	bl	8001e84 <LL_ADC_SetCommonPathInternalCh>
 80026f2:	e039      	b.n	8002768 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a11      	ldr	r2, [pc, #68]	@ (8002740 <HAL_ADC_ConfigChannel+0x370>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d108      	bne.n	8002710 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	4a12      	ldr	r2, [pc, #72]	@ (800274c <HAL_ADC_ConfigChannel+0x37c>)
 8002702:	4013      	ands	r3, r2
 8002704:	4a0a      	ldr	r2, [pc, #40]	@ (8002730 <HAL_ADC_ConfigChannel+0x360>)
 8002706:	0019      	movs	r1, r3
 8002708:	0010      	movs	r0, r2
 800270a:	f7ff fbbb 	bl	8001e84 <LL_ADC_SetCommonPathInternalCh>
 800270e:	e02b      	b.n	8002768 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a0b      	ldr	r2, [pc, #44]	@ (8002744 <HAL_ADC_ConfigChannel+0x374>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d126      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4a0c      	ldr	r2, [pc, #48]	@ (8002750 <HAL_ADC_ConfigChannel+0x380>)
 800271e:	4013      	ands	r3, r2
 8002720:	4a03      	ldr	r2, [pc, #12]	@ (8002730 <HAL_ADC_ConfigChannel+0x360>)
 8002722:	0019      	movs	r1, r3
 8002724:	0010      	movs	r0, r2
 8002726:	f7ff fbad 	bl	8001e84 <LL_ADC_SetCommonPathInternalCh>
 800272a:	e01d      	b.n	8002768 <HAL_ADC_ConfigChannel+0x398>
 800272c:	80000004 	.word	0x80000004
 8002730:	40012708 	.word	0x40012708
 8002734:	b0001000 	.word	0xb0001000
 8002738:	20000000 	.word	0x20000000
 800273c:	00030d40 	.word	0x00030d40
 8002740:	b8004000 	.word	0xb8004000
 8002744:	b4002000 	.word	0xb4002000
 8002748:	ff7fffff 	.word	0xff7fffff
 800274c:	feffffff 	.word	0xfeffffff
 8002750:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002758:	2220      	movs	r2, #32
 800275a:	431a      	orrs	r2, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002760:	2317      	movs	r3, #23
 8002762:	18fb      	adds	r3, r7, r3
 8002764:	2201      	movs	r2, #1
 8002766:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2254      	movs	r2, #84	@ 0x54
 800276c:	2100      	movs	r1, #0
 800276e:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002770:	2317      	movs	r3, #23
 8002772:	18fb      	adds	r3, r7, r3
 8002774:	781b      	ldrb	r3, [r3, #0]
}
 8002776:	0018      	movs	r0, r3
 8002778:	46bd      	mov	sp, r7
 800277a:	b006      	add	sp, #24
 800277c:	bd80      	pop	{r7, pc}
 800277e:	46c0      	nop			@ (mov r8, r8)

08002780 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b082      	sub	sp, #8
 8002784:	af00      	add	r7, sp, #0
 8002786:	0002      	movs	r2, r0
 8002788:	1dfb      	adds	r3, r7, #7
 800278a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800278c:	1dfb      	adds	r3, r7, #7
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b7f      	cmp	r3, #127	@ 0x7f
 8002792:	d809      	bhi.n	80027a8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002794:	1dfb      	adds	r3, r7, #7
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	001a      	movs	r2, r3
 800279a:	231f      	movs	r3, #31
 800279c:	401a      	ands	r2, r3
 800279e:	4b04      	ldr	r3, [pc, #16]	@ (80027b0 <__NVIC_EnableIRQ+0x30>)
 80027a0:	2101      	movs	r1, #1
 80027a2:	4091      	lsls	r1, r2
 80027a4:	000a      	movs	r2, r1
 80027a6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80027a8:	46c0      	nop			@ (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b002      	add	sp, #8
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	e000e100 	.word	0xe000e100

080027b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	0002      	movs	r2, r0
 80027bc:	6039      	str	r1, [r7, #0]
 80027be:	1dfb      	adds	r3, r7, #7
 80027c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80027c2:	1dfb      	adds	r3, r7, #7
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b7f      	cmp	r3, #127	@ 0x7f
 80027c8:	d828      	bhi.n	800281c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80027ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002888 <__NVIC_SetPriority+0xd4>)
 80027cc:	1dfb      	adds	r3, r7, #7
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	b25b      	sxtb	r3, r3
 80027d2:	089b      	lsrs	r3, r3, #2
 80027d4:	33c0      	adds	r3, #192	@ 0xc0
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	589b      	ldr	r3, [r3, r2]
 80027da:	1dfa      	adds	r2, r7, #7
 80027dc:	7812      	ldrb	r2, [r2, #0]
 80027de:	0011      	movs	r1, r2
 80027e0:	2203      	movs	r2, #3
 80027e2:	400a      	ands	r2, r1
 80027e4:	00d2      	lsls	r2, r2, #3
 80027e6:	21ff      	movs	r1, #255	@ 0xff
 80027e8:	4091      	lsls	r1, r2
 80027ea:	000a      	movs	r2, r1
 80027ec:	43d2      	mvns	r2, r2
 80027ee:	401a      	ands	r2, r3
 80027f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	019b      	lsls	r3, r3, #6
 80027f6:	22ff      	movs	r2, #255	@ 0xff
 80027f8:	401a      	ands	r2, r3
 80027fa:	1dfb      	adds	r3, r7, #7
 80027fc:	781b      	ldrb	r3, [r3, #0]
 80027fe:	0018      	movs	r0, r3
 8002800:	2303      	movs	r3, #3
 8002802:	4003      	ands	r3, r0
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002808:	481f      	ldr	r0, [pc, #124]	@ (8002888 <__NVIC_SetPriority+0xd4>)
 800280a:	1dfb      	adds	r3, r7, #7
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	b25b      	sxtb	r3, r3
 8002810:	089b      	lsrs	r3, r3, #2
 8002812:	430a      	orrs	r2, r1
 8002814:	33c0      	adds	r3, #192	@ 0xc0
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800281a:	e031      	b.n	8002880 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800281c:	4a1b      	ldr	r2, [pc, #108]	@ (800288c <__NVIC_SetPriority+0xd8>)
 800281e:	1dfb      	adds	r3, r7, #7
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	0019      	movs	r1, r3
 8002824:	230f      	movs	r3, #15
 8002826:	400b      	ands	r3, r1
 8002828:	3b08      	subs	r3, #8
 800282a:	089b      	lsrs	r3, r3, #2
 800282c:	3306      	adds	r3, #6
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	18d3      	adds	r3, r2, r3
 8002832:	3304      	adds	r3, #4
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	1dfa      	adds	r2, r7, #7
 8002838:	7812      	ldrb	r2, [r2, #0]
 800283a:	0011      	movs	r1, r2
 800283c:	2203      	movs	r2, #3
 800283e:	400a      	ands	r2, r1
 8002840:	00d2      	lsls	r2, r2, #3
 8002842:	21ff      	movs	r1, #255	@ 0xff
 8002844:	4091      	lsls	r1, r2
 8002846:	000a      	movs	r2, r1
 8002848:	43d2      	mvns	r2, r2
 800284a:	401a      	ands	r2, r3
 800284c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	019b      	lsls	r3, r3, #6
 8002852:	22ff      	movs	r2, #255	@ 0xff
 8002854:	401a      	ands	r2, r3
 8002856:	1dfb      	adds	r3, r7, #7
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	0018      	movs	r0, r3
 800285c:	2303      	movs	r3, #3
 800285e:	4003      	ands	r3, r0
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002864:	4809      	ldr	r0, [pc, #36]	@ (800288c <__NVIC_SetPriority+0xd8>)
 8002866:	1dfb      	adds	r3, r7, #7
 8002868:	781b      	ldrb	r3, [r3, #0]
 800286a:	001c      	movs	r4, r3
 800286c:	230f      	movs	r3, #15
 800286e:	4023      	ands	r3, r4
 8002870:	3b08      	subs	r3, #8
 8002872:	089b      	lsrs	r3, r3, #2
 8002874:	430a      	orrs	r2, r1
 8002876:	3306      	adds	r3, #6
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	18c3      	adds	r3, r0, r3
 800287c:	3304      	adds	r3, #4
 800287e:	601a      	str	r2, [r3, #0]
}
 8002880:	46c0      	nop			@ (mov r8, r8)
 8002882:	46bd      	mov	sp, r7
 8002884:	b003      	add	sp, #12
 8002886:	bd90      	pop	{r4, r7, pc}
 8002888:	e000e100 	.word	0xe000e100
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	1e5a      	subs	r2, r3, #1
 800289c:	2380      	movs	r3, #128	@ 0x80
 800289e:	045b      	lsls	r3, r3, #17
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d301      	bcc.n	80028a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028a4:	2301      	movs	r3, #1
 80028a6:	e010      	b.n	80028ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028a8:	4b0a      	ldr	r3, [pc, #40]	@ (80028d4 <SysTick_Config+0x44>)
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	3a01      	subs	r2, #1
 80028ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028b0:	2301      	movs	r3, #1
 80028b2:	425b      	negs	r3, r3
 80028b4:	2103      	movs	r1, #3
 80028b6:	0018      	movs	r0, r3
 80028b8:	f7ff ff7c 	bl	80027b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028bc:	4b05      	ldr	r3, [pc, #20]	@ (80028d4 <SysTick_Config+0x44>)
 80028be:	2200      	movs	r2, #0
 80028c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028c2:	4b04      	ldr	r3, [pc, #16]	@ (80028d4 <SysTick_Config+0x44>)
 80028c4:	2207      	movs	r2, #7
 80028c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	0018      	movs	r0, r3
 80028cc:	46bd      	mov	sp, r7
 80028ce:	b002      	add	sp, #8
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	46c0      	nop			@ (mov r8, r8)
 80028d4:	e000e010 	.word	0xe000e010

080028d8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	607a      	str	r2, [r7, #4]
 80028e2:	210f      	movs	r1, #15
 80028e4:	187b      	adds	r3, r7, r1
 80028e6:	1c02      	adds	r2, r0, #0
 80028e8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	187b      	adds	r3, r7, r1
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	b25b      	sxtb	r3, r3
 80028f2:	0011      	movs	r1, r2
 80028f4:	0018      	movs	r0, r3
 80028f6:	f7ff ff5d 	bl	80027b4 <__NVIC_SetPriority>
}
 80028fa:	46c0      	nop			@ (mov r8, r8)
 80028fc:	46bd      	mov	sp, r7
 80028fe:	b004      	add	sp, #16
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b082      	sub	sp, #8
 8002906:	af00      	add	r7, sp, #0
 8002908:	0002      	movs	r2, r0
 800290a:	1dfb      	adds	r3, r7, #7
 800290c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800290e:	1dfb      	adds	r3, r7, #7
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	b25b      	sxtb	r3, r3
 8002914:	0018      	movs	r0, r3
 8002916:	f7ff ff33 	bl	8002780 <__NVIC_EnableIRQ>
}
 800291a:	46c0      	nop			@ (mov r8, r8)
 800291c:	46bd      	mov	sp, r7
 800291e:	b002      	add	sp, #8
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b082      	sub	sp, #8
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	0018      	movs	r0, r3
 800292e:	f7ff ffaf 	bl	8002890 <SysTick_Config>
 8002932:	0003      	movs	r3, r0
}
 8002934:	0018      	movs	r0, r3
 8002936:	46bd      	mov	sp, r7
 8002938:	b002      	add	sp, #8
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e077      	b.n	8002a3e <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a3d      	ldr	r2, [pc, #244]	@ (8002a48 <HAL_DMA_Init+0x10c>)
 8002954:	4694      	mov	ip, r2
 8002956:	4463      	add	r3, ip
 8002958:	2114      	movs	r1, #20
 800295a:	0018      	movs	r0, r3
 800295c:	f7fd fbd2 	bl	8000104 <__udivsi3>
 8002960:	0003      	movs	r3, r0
 8002962:	009a      	lsls	r2, r3, #2
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	641a      	str	r2, [r3, #64]	@ 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2225      	movs	r2, #37	@ 0x25
 800296c:	2102      	movs	r1, #2
 800296e:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4934      	ldr	r1, [pc, #208]	@ (8002a4c <HAL_DMA_Init+0x110>)
 800297c:	400a      	ands	r2, r1
 800297e:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	6819      	ldr	r1, [r3, #0]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	689a      	ldr	r2, [r3, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	431a      	orrs	r2, r3
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	431a      	orrs	r2, r3
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	695b      	ldr	r3, [r3, #20]
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	699b      	ldr	r3, [r3, #24]
 80029a0:	431a      	orrs	r2, r3
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	431a      	orrs	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 f8fb 	bl	8002bb4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	2380      	movs	r3, #128	@ 0x80
 80029c4:	01db      	lsls	r3, r3, #7
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d102      	bne.n	80029d0 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d8:	213f      	movs	r1, #63	@ 0x3f
 80029da:	400a      	ands	r2, r1
 80029dc:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80029e6:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d011      	beq.n	8002a14 <HAL_DMA_Init+0xd8>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	2b04      	cmp	r3, #4
 80029f6:	d80d      	bhi.n	8002a14 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	0018      	movs	r0, r3
 80029fc:	f000 f906 	bl	8002c0c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002a10:	605a      	str	r2, [r3, #4]
 8002a12:	e008      	b.n	8002a26 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2200      	movs	r2, #0
 8002a18:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2200      	movs	r2, #0
 8002a24:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2225      	movs	r2, #37	@ 0x25
 8002a30:	2101      	movs	r1, #1
 8002a32:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2224      	movs	r2, #36	@ 0x24
 8002a38:	2100      	movs	r1, #0
 8002a3a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a3c:	2300      	movs	r3, #0
}
 8002a3e:	0018      	movs	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	b002      	add	sp, #8
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	46c0      	nop			@ (mov r8, r8)
 8002a48:	bffdfff8 	.word	0xbffdfff8
 8002a4c:	ffff800f 	.word	0xffff800f

08002a50 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8002a58:	4b55      	ldr	r3, [pc, #340]	@ (8002bb0 <HAL_DMA_IRQHandler+0x160>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	221c      	movs	r2, #28
 8002a6c:	4013      	ands	r3, r2
 8002a6e:	2204      	movs	r2, #4
 8002a70:	409a      	lsls	r2, r3
 8002a72:	0013      	movs	r3, r2
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4013      	ands	r3, r2
 8002a78:	d027      	beq.n	8002aca <HAL_DMA_IRQHandler+0x7a>
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2204      	movs	r2, #4
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d023      	beq.n	8002aca <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2220      	movs	r2, #32
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d107      	bne.n	8002a9e <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2104      	movs	r1, #4
 8002a9a:	438a      	bics	r2, r1
 8002a9c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8002a9e:	4b44      	ldr	r3, [pc, #272]	@ (8002bb0 <HAL_DMA_IRQHandler+0x160>)
 8002aa0:	6859      	ldr	r1, [r3, #4]
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aa6:	221c      	movs	r2, #28
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	2204      	movs	r2, #4
 8002aac:	409a      	lsls	r2, r3
 8002aae:	4b40      	ldr	r3, [pc, #256]	@ (8002bb0 <HAL_DMA_IRQHandler+0x160>)
 8002ab0:	430a      	orrs	r2, r1
 8002ab2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d100      	bne.n	8002abe <HAL_DMA_IRQHandler+0x6e>
 8002abc:	e073      	b.n	8002ba6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	0010      	movs	r0, r2
 8002ac6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8002ac8:	e06d      	b.n	8002ba6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ace:	221c      	movs	r2, #28
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	409a      	lsls	r2, r3
 8002ad6:	0013      	movs	r3, r2
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4013      	ands	r3, r2
 8002adc:	d02e      	beq.n	8002b3c <HAL_DMA_IRQHandler+0xec>
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	2202      	movs	r2, #2
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	d02a      	beq.n	8002b3c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2220      	movs	r2, #32
 8002aee:	4013      	ands	r3, r2
 8002af0:	d10b      	bne.n	8002b0a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	210a      	movs	r1, #10
 8002afe:	438a      	bics	r2, r1
 8002b00:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2225      	movs	r2, #37	@ 0x25
 8002b06:	2101      	movs	r1, #1
 8002b08:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8002b0a:	4b29      	ldr	r3, [pc, #164]	@ (8002bb0 <HAL_DMA_IRQHandler+0x160>)
 8002b0c:	6859      	ldr	r1, [r3, #4]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	221c      	movs	r2, #28
 8002b14:	4013      	ands	r3, r2
 8002b16:	2202      	movs	r2, #2
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	4b25      	ldr	r3, [pc, #148]	@ (8002bb0 <HAL_DMA_IRQHandler+0x160>)
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2224      	movs	r2, #36	@ 0x24
 8002b24:	2100      	movs	r1, #0
 8002b26:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d03a      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	0010      	movs	r0, r2
 8002b38:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8002b3a:	e034      	b.n	8002ba6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b40:	221c      	movs	r2, #28
 8002b42:	4013      	ands	r3, r2
 8002b44:	2208      	movs	r2, #8
 8002b46:	409a      	lsls	r2, r3
 8002b48:	0013      	movs	r3, r2
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	d02b      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x158>
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	2208      	movs	r2, #8
 8002b54:	4013      	ands	r3, r2
 8002b56:	d027      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	681a      	ldr	r2, [r3, #0]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	210e      	movs	r1, #14
 8002b64:	438a      	bics	r2, r1
 8002b66:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8002b68:	4b11      	ldr	r3, [pc, #68]	@ (8002bb0 <HAL_DMA_IRQHandler+0x160>)
 8002b6a:	6859      	ldr	r1, [r3, #4]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b70:	221c      	movs	r2, #28
 8002b72:	4013      	ands	r3, r2
 8002b74:	2201      	movs	r2, #1
 8002b76:	409a      	lsls	r2, r3
 8002b78:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <HAL_DMA_IRQHandler+0x160>)
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2201      	movs	r2, #1
 8002b82:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2225      	movs	r2, #37	@ 0x25
 8002b88:	2101      	movs	r1, #1
 8002b8a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2224      	movs	r2, #36	@ 0x24
 8002b90:	2100      	movs	r1, #0
 8002b92:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d005      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	0010      	movs	r0, r2
 8002ba4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ba6:	46c0      	nop			@ (mov r8, r8)
 8002ba8:	46c0      	nop			@ (mov r8, r8)
}
 8002baa:	46bd      	mov	sp, r7
 8002bac:	b004      	add	sp, #16
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40020000 	.word	0x40020000

08002bb4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	4a10      	ldr	r2, [pc, #64]	@ (8002c04 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8002bc4:	4694      	mov	ip, r2
 8002bc6:	4463      	add	r3, ip
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	001a      	movs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	001a      	movs	r2, r3
 8002bd6:	23ff      	movs	r3, #255	@ 0xff
 8002bd8:	4013      	ands	r3, r2
 8002bda:	3b08      	subs	r3, #8
 8002bdc:	2114      	movs	r1, #20
 8002bde:	0018      	movs	r0, r3
 8002be0:	f7fd fa90 	bl	8000104 <__udivsi3>
 8002be4:	0003      	movs	r3, r0
 8002be6:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a07      	ldr	r2, [pc, #28]	@ (8002c08 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8002bec:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	221f      	movs	r2, #31
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	409a      	lsls	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002bfc:	46c0      	nop			@ (mov r8, r8)
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	b004      	add	sp, #16
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	10008200 	.word	0x10008200
 8002c08:	40020880 	.word	0x40020880

08002c0c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	223f      	movs	r2, #63	@ 0x3f
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	4a0a      	ldr	r2, [pc, #40]	@ (8002c4c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8002c22:	4694      	mov	ip, r2
 8002c24:	4463      	add	r3, ip
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	001a      	movs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	651a      	str	r2, [r3, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a07      	ldr	r2, [pc, #28]	@ (8002c50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8002c32:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	3b01      	subs	r3, #1
 8002c38:	2203      	movs	r2, #3
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	409a      	lsls	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8002c44:	46c0      	nop			@ (mov r8, r8)
 8002c46:	46bd      	mov	sp, r7
 8002c48:	b004      	add	sp, #16
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	1000823f 	.word	0x1000823f
 8002c50:	40020940 	.word	0x40020940

08002c54 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b086      	sub	sp, #24
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
 8002c5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c62:	e147      	b.n	8002ef4 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2101      	movs	r1, #1
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4091      	lsls	r1, r2
 8002c6e:	000a      	movs	r2, r1
 8002c70:	4013      	ands	r3, r2
 8002c72:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d100      	bne.n	8002c7c <HAL_GPIO_Init+0x28>
 8002c7a:	e138      	b.n	8002eee <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	2203      	movs	r2, #3
 8002c82:	4013      	ands	r3, r2
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d005      	beq.n	8002c94 <HAL_GPIO_Init+0x40>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	4013      	ands	r3, r2
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d130      	bne.n	8002cf6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	005b      	lsls	r3, r3, #1
 8002c9e:	2203      	movs	r2, #3
 8002ca0:	409a      	lsls	r2, r3
 8002ca2:	0013      	movs	r3, r2
 8002ca4:	43da      	mvns	r2, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4013      	ands	r3, r2
 8002caa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	005b      	lsls	r3, r3, #1
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	0013      	movs	r3, r2
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	693a      	ldr	r2, [r7, #16]
 8002cc2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002cca:	2201      	movs	r2, #1
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	43da      	mvns	r2, r3
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	091b      	lsrs	r3, r3, #4
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	401a      	ands	r2, r3
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	409a      	lsls	r2, r3
 8002ce8:	0013      	movs	r3, r2
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	4313      	orrs	r3, r2
 8002cee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d017      	beq.n	8002d32 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	0013      	movs	r3, r2
 8002d12:	43da      	mvns	r2, r3
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4013      	ands	r3, r2
 8002d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	409a      	lsls	r2, r3
 8002d24:	0013      	movs	r3, r2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2203      	movs	r2, #3
 8002d38:	4013      	ands	r3, r2
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d123      	bne.n	8002d86 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	08da      	lsrs	r2, r3, #3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	3208      	adds	r2, #8
 8002d46:	0092      	lsls	r2, r2, #2
 8002d48:	58d3      	ldr	r3, [r2, r3]
 8002d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	2207      	movs	r2, #7
 8002d50:	4013      	ands	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	220f      	movs	r2, #15
 8002d56:	409a      	lsls	r2, r3
 8002d58:	0013      	movs	r3, r2
 8002d5a:	43da      	mvns	r2, r3
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2107      	movs	r1, #7
 8002d6a:	400b      	ands	r3, r1
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	409a      	lsls	r2, r3
 8002d70:	0013      	movs	r3, r2
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	08da      	lsrs	r2, r3, #3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	3208      	adds	r2, #8
 8002d80:	0092      	lsls	r2, r2, #2
 8002d82:	6939      	ldr	r1, [r7, #16]
 8002d84:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d8c:	697b      	ldr	r3, [r7, #20]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	2203      	movs	r2, #3
 8002d92:	409a      	lsls	r2, r3
 8002d94:	0013      	movs	r3, r2
 8002d96:	43da      	mvns	r2, r3
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2203      	movs	r2, #3
 8002da4:	401a      	ands	r2, r3
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	409a      	lsls	r2, r3
 8002dac:	0013      	movs	r3, r2
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	693a      	ldr	r2, [r7, #16]
 8002db8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	23c0      	movs	r3, #192	@ 0xc0
 8002dc0:	029b      	lsls	r3, r3, #10
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	d100      	bne.n	8002dc8 <HAL_GPIO_Init+0x174>
 8002dc6:	e092      	b.n	8002eee <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002dc8:	4a50      	ldr	r2, [pc, #320]	@ (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	089b      	lsrs	r3, r3, #2
 8002dce:	3318      	adds	r3, #24
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	589b      	ldr	r3, [r3, r2]
 8002dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	2203      	movs	r2, #3
 8002dda:	4013      	ands	r3, r2
 8002ddc:	00db      	lsls	r3, r3, #3
 8002dde:	220f      	movs	r2, #15
 8002de0:	409a      	lsls	r2, r3
 8002de2:	0013      	movs	r3, r2
 8002de4:	43da      	mvns	r2, r3
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4013      	ands	r3, r2
 8002dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	23a0      	movs	r3, #160	@ 0xa0
 8002df0:	05db      	lsls	r3, r3, #23
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d013      	beq.n	8002e1e <HAL_GPIO_Init+0x1ca>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a45      	ldr	r2, [pc, #276]	@ (8002f10 <HAL_GPIO_Init+0x2bc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d00d      	beq.n	8002e1a <HAL_GPIO_Init+0x1c6>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a44      	ldr	r2, [pc, #272]	@ (8002f14 <HAL_GPIO_Init+0x2c0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d007      	beq.n	8002e16 <HAL_GPIO_Init+0x1c2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a43      	ldr	r2, [pc, #268]	@ (8002f18 <HAL_GPIO_Init+0x2c4>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d101      	bne.n	8002e12 <HAL_GPIO_Init+0x1be>
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e006      	b.n	8002e20 <HAL_GPIO_Init+0x1cc>
 8002e12:	2305      	movs	r3, #5
 8002e14:	e004      	b.n	8002e20 <HAL_GPIO_Init+0x1cc>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e002      	b.n	8002e20 <HAL_GPIO_Init+0x1cc>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <HAL_GPIO_Init+0x1cc>
 8002e1e:	2300      	movs	r3, #0
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	2103      	movs	r1, #3
 8002e24:	400a      	ands	r2, r1
 8002e26:	00d2      	lsls	r2, r2, #3
 8002e28:	4093      	lsls	r3, r2
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002e30:	4936      	ldr	r1, [pc, #216]	@ (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	089b      	lsrs	r3, r3, #2
 8002e36:	3318      	adds	r3, #24
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	693a      	ldr	r2, [r7, #16]
 8002e3c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e3e:	4b33      	ldr	r3, [pc, #204]	@ (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	43da      	mvns	r2, r3
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4013      	ands	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	2380      	movs	r3, #128	@ 0x80
 8002e54:	035b      	lsls	r3, r3, #13
 8002e56:	4013      	ands	r3, r2
 8002e58:	d003      	beq.n	8002e62 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e62:	4b2a      	ldr	r3, [pc, #168]	@ (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002e64:	693a      	ldr	r2, [r7, #16]
 8002e66:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002e68:	4b28      	ldr	r3, [pc, #160]	@ (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	43da      	mvns	r2, r3
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	4013      	ands	r3, r2
 8002e76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685a      	ldr	r2, [r3, #4]
 8002e7c:	2380      	movs	r3, #128	@ 0x80
 8002e7e:	039b      	lsls	r3, r3, #14
 8002e80:	4013      	ands	r3, r2
 8002e82:	d003      	beq.n	8002e8c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8002e84:	693a      	ldr	r2, [r7, #16]
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002e8e:	693a      	ldr	r2, [r7, #16]
 8002e90:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e92:	4a1e      	ldr	r2, [pc, #120]	@ (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002e94:	2384      	movs	r3, #132	@ 0x84
 8002e96:	58d3      	ldr	r3, [r2, r3]
 8002e98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	43da      	mvns	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	2380      	movs	r3, #128	@ 0x80
 8002eaa:	029b      	lsls	r3, r3, #10
 8002eac:	4013      	ands	r3, r2
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8002eb0:	693a      	ldr	r2, [r7, #16]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002eb8:	4914      	ldr	r1, [pc, #80]	@ (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002eba:	2284      	movs	r2, #132	@ 0x84
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002ec0:	4a12      	ldr	r2, [pc, #72]	@ (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002ec2:	2380      	movs	r3, #128	@ 0x80
 8002ec4:	58d3      	ldr	r3, [r2, r3]
 8002ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	43da      	mvns	r2, r3
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685a      	ldr	r2, [r3, #4]
 8002ed6:	2380      	movs	r3, #128	@ 0x80
 8002ed8:	025b      	lsls	r3, r3, #9
 8002eda:	4013      	ands	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002ee6:	4909      	ldr	r1, [pc, #36]	@ (8002f0c <HAL_GPIO_Init+0x2b8>)
 8002ee8:	2280      	movs	r2, #128	@ 0x80
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	40da      	lsrs	r2, r3
 8002efc:	1e13      	subs	r3, r2, #0
 8002efe:	d000      	beq.n	8002f02 <HAL_GPIO_Init+0x2ae>
 8002f00:	e6b0      	b.n	8002c64 <HAL_GPIO_Init+0x10>
  }
}
 8002f02:	46c0      	nop			@ (mov r8, r8)
 8002f04:	46c0      	nop			@ (mov r8, r8)
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b006      	add	sp, #24
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	40021800 	.word	0x40021800
 8002f10:	50000400 	.word	0x50000400
 8002f14:	50000800 	.word	0x50000800
 8002f18:	50000c00 	.word	0x50000c00

08002f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	0008      	movs	r0, r1
 8002f26:	0011      	movs	r1, r2
 8002f28:	1cbb      	adds	r3, r7, #2
 8002f2a:	1c02      	adds	r2, r0, #0
 8002f2c:	801a      	strh	r2, [r3, #0]
 8002f2e:	1c7b      	adds	r3, r7, #1
 8002f30:	1c0a      	adds	r2, r1, #0
 8002f32:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002f34:	1c7b      	adds	r3, r7, #1
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d004      	beq.n	8002f46 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002f3c:	1cbb      	adds	r3, r7, #2
 8002f3e:	881a      	ldrh	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002f44:	e003      	b.n	8002f4e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002f46:	1cbb      	adds	r3, r7, #2
 8002f48:	881a      	ldrh	r2, [r3, #0]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002f4e:	46c0      	nop			@ (mov r8, r8)
 8002f50:	46bd      	mov	sp, r7
 8002f52:	b002      	add	sp, #8
 8002f54:	bd80      	pop	{r7, pc}
	...

08002f58 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b082      	sub	sp, #8
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d101      	bne.n	8002f6a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e08f      	b.n	800308a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2241      	movs	r2, #65	@ 0x41
 8002f6e:	5c9b      	ldrb	r3, [r3, r2]
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d107      	bne.n	8002f86 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2240      	movs	r2, #64	@ 0x40
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f7fe fd9d 	bl	8001ac0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2241      	movs	r2, #65	@ 0x41
 8002f8a:	2124      	movs	r1, #36	@ 0x24
 8002f8c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2101      	movs	r1, #1
 8002f9a:	438a      	bics	r2, r1
 8002f9c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685a      	ldr	r2, [r3, #4]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	493b      	ldr	r1, [pc, #236]	@ (8003094 <HAL_I2C_Init+0x13c>)
 8002fa8:	400a      	ands	r2, r1
 8002faa:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4938      	ldr	r1, [pc, #224]	@ (8003098 <HAL_I2C_Init+0x140>)
 8002fb8:	400a      	ands	r2, r1
 8002fba:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	68db      	ldr	r3, [r3, #12]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d108      	bne.n	8002fd6 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2180      	movs	r1, #128	@ 0x80
 8002fce:	0209      	lsls	r1, r1, #8
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	609a      	str	r2, [r3, #8]
 8002fd4:	e007      	b.n	8002fe6 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2184      	movs	r1, #132	@ 0x84
 8002fe0:	0209      	lsls	r1, r1, #8
 8002fe2:	430a      	orrs	r2, r1
 8002fe4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d109      	bne.n	8003002 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2180      	movs	r1, #128	@ 0x80
 8002ffa:	0109      	lsls	r1, r1, #4
 8002ffc:	430a      	orrs	r2, r1
 8002ffe:	605a      	str	r2, [r3, #4]
 8003000:	e007      	b.n	8003012 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685a      	ldr	r2, [r3, #4]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4923      	ldr	r1, [pc, #140]	@ (800309c <HAL_I2C_Init+0x144>)
 800300e:	400a      	ands	r2, r1
 8003010:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	685a      	ldr	r2, [r3, #4]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4920      	ldr	r1, [pc, #128]	@ (80030a0 <HAL_I2C_Init+0x148>)
 800301e:	430a      	orrs	r2, r1
 8003020:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68da      	ldr	r2, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	491a      	ldr	r1, [pc, #104]	@ (8003098 <HAL_I2C_Init+0x140>)
 800302e:	400a      	ands	r2, r1
 8003030:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695b      	ldr	r3, [r3, #20]
 800303a:	431a      	orrs	r2, r3
 800303c:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	699b      	ldr	r3, [r3, #24]
 8003042:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69d9      	ldr	r1, [r3, #28]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1a      	ldr	r2, [r3, #32]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	430a      	orrs	r2, r1
 800305a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2101      	movs	r1, #1
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2241      	movs	r2, #65	@ 0x41
 8003076:	2120      	movs	r1, #32
 8003078:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2242      	movs	r2, #66	@ 0x42
 8003084:	2100      	movs	r1, #0
 8003086:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003088:	2300      	movs	r3, #0
}
 800308a:	0018      	movs	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	b002      	add	sp, #8
 8003090:	bd80      	pop	{r7, pc}
 8003092:	46c0      	nop			@ (mov r8, r8)
 8003094:	f0ffffff 	.word	0xf0ffffff
 8003098:	ffff7fff 	.word	0xffff7fff
 800309c:	fffff7ff 	.word	0xfffff7ff
 80030a0:	02008000 	.word	0x02008000

080030a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030a4:	b590      	push	{r4, r7, lr}
 80030a6:	b089      	sub	sp, #36	@ 0x24
 80030a8:	af02      	add	r7, sp, #8
 80030aa:	60f8      	str	r0, [r7, #12]
 80030ac:	000c      	movs	r4, r1
 80030ae:	0010      	movs	r0, r2
 80030b0:	0019      	movs	r1, r3
 80030b2:	230a      	movs	r3, #10
 80030b4:	18fb      	adds	r3, r7, r3
 80030b6:	1c22      	adds	r2, r4, #0
 80030b8:	801a      	strh	r2, [r3, #0]
 80030ba:	2308      	movs	r3, #8
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	1c02      	adds	r2, r0, #0
 80030c0:	801a      	strh	r2, [r3, #0]
 80030c2:	1dbb      	adds	r3, r7, #6
 80030c4:	1c0a      	adds	r2, r1, #0
 80030c6:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2241      	movs	r2, #65	@ 0x41
 80030cc:	5c9b      	ldrb	r3, [r3, r2]
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b20      	cmp	r3, #32
 80030d2:	d000      	beq.n	80030d6 <HAL_I2C_Mem_Write+0x32>
 80030d4:	e10c      	b.n	80032f0 <HAL_I2C_Mem_Write+0x24c>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d004      	beq.n	80030e6 <HAL_I2C_Mem_Write+0x42>
 80030dc:	232c      	movs	r3, #44	@ 0x2c
 80030de:	18fb      	adds	r3, r7, r3
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <HAL_I2C_Mem_Write+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2280      	movs	r2, #128	@ 0x80
 80030ea:	0092      	lsls	r2, r2, #2
 80030ec:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e0ff      	b.n	80032f2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2240      	movs	r2, #64	@ 0x40
 80030f6:	5c9b      	ldrb	r3, [r3, r2]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_I2C_Mem_Write+0x5c>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e0f8      	b.n	80032f2 <HAL_I2C_Mem_Write+0x24e>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2240      	movs	r2, #64	@ 0x40
 8003104:	2101      	movs	r1, #1
 8003106:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003108:	f7fe fe8e 	bl	8001e28 <HAL_GetTick>
 800310c:	0003      	movs	r3, r0
 800310e:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003110:	2380      	movs	r3, #128	@ 0x80
 8003112:	0219      	lsls	r1, r3, #8
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	2319      	movs	r3, #25
 800311c:	2201      	movs	r2, #1
 800311e:	f000 f975 	bl	800340c <I2C_WaitOnFlagUntilTimeout>
 8003122:	1e03      	subs	r3, r0, #0
 8003124:	d001      	beq.n	800312a <HAL_I2C_Mem_Write+0x86>
    {
      return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e0e3      	b.n	80032f2 <HAL_I2C_Mem_Write+0x24e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2241      	movs	r2, #65	@ 0x41
 800312e:	2121      	movs	r1, #33	@ 0x21
 8003130:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2242      	movs	r2, #66	@ 0x42
 8003136:	2140      	movs	r1, #64	@ 0x40
 8003138:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003144:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	222c      	movs	r2, #44	@ 0x2c
 800314a:	18ba      	adds	r2, r7, r2
 800314c:	8812      	ldrh	r2, [r2, #0]
 800314e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2200      	movs	r2, #0
 8003154:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003156:	1dbb      	adds	r3, r7, #6
 8003158:	881c      	ldrh	r4, [r3, #0]
 800315a:	2308      	movs	r3, #8
 800315c:	18fb      	adds	r3, r7, r3
 800315e:	881a      	ldrh	r2, [r3, #0]
 8003160:	230a      	movs	r3, #10
 8003162:	18fb      	adds	r3, r7, r3
 8003164:	8819      	ldrh	r1, [r3, #0]
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	9301      	str	r3, [sp, #4]
 800316c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316e:	9300      	str	r3, [sp, #0]
 8003170:	0023      	movs	r3, r4
 8003172:	f000 f8c5 	bl	8003300 <I2C_RequestMemoryWrite>
 8003176:	1e03      	subs	r3, r0, #0
 8003178:	d005      	beq.n	8003186 <HAL_I2C_Mem_Write+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2240      	movs	r2, #64	@ 0x40
 800317e:	2100      	movs	r1, #0
 8003180:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e0b5      	b.n	80032f2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	2bff      	cmp	r3, #255	@ 0xff
 800318e:	d911      	bls.n	80031b4 <HAL_I2C_Mem_Write+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	22ff      	movs	r2, #255	@ 0xff
 8003194:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800319a:	b2da      	uxtb	r2, r3
 800319c:	2380      	movs	r3, #128	@ 0x80
 800319e:	045c      	lsls	r4, r3, #17
 80031a0:	230a      	movs	r3, #10
 80031a2:	18fb      	adds	r3, r7, r3
 80031a4:	8819      	ldrh	r1, [r3, #0]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	2300      	movs	r3, #0
 80031aa:	9300      	str	r3, [sp, #0]
 80031ac:	0023      	movs	r3, r4
 80031ae:	f000 fb07 	bl	80037c0 <I2C_TransferConfig>
 80031b2:	e012      	b.n	80031da <HAL_I2C_Mem_Write+0x136>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c2:	b2da      	uxtb	r2, r3
 80031c4:	2380      	movs	r3, #128	@ 0x80
 80031c6:	049c      	lsls	r4, r3, #18
 80031c8:	230a      	movs	r3, #10
 80031ca:	18fb      	adds	r3, r7, r3
 80031cc:	8819      	ldrh	r1, [r3, #0]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	2300      	movs	r3, #0
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	0023      	movs	r3, r4
 80031d6:	f000 faf3 	bl	80037c0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	0018      	movs	r0, r3
 80031e2:	f000 f96b 	bl	80034bc <I2C_WaitOnTXISFlagUntilTimeout>
 80031e6:	1e03      	subs	r3, r0, #0
 80031e8:	d001      	beq.n	80031ee <HAL_I2C_Mem_Write+0x14a>
      {
        return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e081      	b.n	80032f2 <HAL_I2C_Mem_Write+0x24e>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031f2:	781a      	ldrb	r2, [r3, #0]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003216:	3b01      	subs	r3, #1
 8003218:	b29a      	uxth	r2, r3
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003222:	b29b      	uxth	r3, r3
 8003224:	2b00      	cmp	r3, #0
 8003226:	d03a      	beq.n	800329e <HAL_I2C_Mem_Write+0x1fa>
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800322c:	2b00      	cmp	r3, #0
 800322e:	d136      	bne.n	800329e <HAL_I2C_Mem_Write+0x1fa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003230:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	9300      	str	r3, [sp, #0]
 8003238:	0013      	movs	r3, r2
 800323a:	2200      	movs	r2, #0
 800323c:	2180      	movs	r1, #128	@ 0x80
 800323e:	f000 f8e5 	bl	800340c <I2C_WaitOnFlagUntilTimeout>
 8003242:	1e03      	subs	r3, r0, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_Mem_Write+0x1a6>
        {
          return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e053      	b.n	80032f2 <HAL_I2C_Mem_Write+0x24e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	2bff      	cmp	r3, #255	@ 0xff
 8003252:	d911      	bls.n	8003278 <HAL_I2C_Mem_Write+0x1d4>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	22ff      	movs	r2, #255	@ 0xff
 8003258:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800325e:	b2da      	uxtb	r2, r3
 8003260:	2380      	movs	r3, #128	@ 0x80
 8003262:	045c      	lsls	r4, r3, #17
 8003264:	230a      	movs	r3, #10
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	8819      	ldrh	r1, [r3, #0]
 800326a:	68f8      	ldr	r0, [r7, #12]
 800326c:	2300      	movs	r3, #0
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	0023      	movs	r3, r4
 8003272:	f000 faa5 	bl	80037c0 <I2C_TransferConfig>
 8003276:	e012      	b.n	800329e <HAL_I2C_Mem_Write+0x1fa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800327c:	b29a      	uxth	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003286:	b2da      	uxtb	r2, r3
 8003288:	2380      	movs	r3, #128	@ 0x80
 800328a:	049c      	lsls	r4, r3, #18
 800328c:	230a      	movs	r3, #10
 800328e:	18fb      	adds	r3, r7, r3
 8003290:	8819      	ldrh	r1, [r3, #0]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	2300      	movs	r3, #0
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	0023      	movs	r3, r4
 800329a:	f000 fa91 	bl	80037c0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d198      	bne.n	80031da <HAL_I2C_Mem_Write+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	0018      	movs	r0, r3
 80032b0:	f000 f94a 	bl	8003548 <I2C_WaitOnSTOPFlagUntilTimeout>
 80032b4:	1e03      	subs	r3, r0, #0
 80032b6:	d001      	beq.n	80032bc <HAL_I2C_Mem_Write+0x218>
    {
      return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e01a      	b.n	80032f2 <HAL_I2C_Mem_Write+0x24e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2220      	movs	r2, #32
 80032c2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	490b      	ldr	r1, [pc, #44]	@ (80032fc <HAL_I2C_Mem_Write+0x258>)
 80032d0:	400a      	ands	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2241      	movs	r2, #65	@ 0x41
 80032d8:	2120      	movs	r1, #32
 80032da:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2242      	movs	r2, #66	@ 0x42
 80032e0:	2100      	movs	r1, #0
 80032e2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2240      	movs	r2, #64	@ 0x40
 80032e8:	2100      	movs	r1, #0
 80032ea:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e000      	b.n	80032f2 <HAL_I2C_Mem_Write+0x24e>
  }
  else
  {
    return HAL_BUSY;
 80032f0:	2302      	movs	r3, #2
  }
}
 80032f2:	0018      	movs	r0, r3
 80032f4:	46bd      	mov	sp, r7
 80032f6:	b007      	add	sp, #28
 80032f8:	bd90      	pop	{r4, r7, pc}
 80032fa:	46c0      	nop			@ (mov r8, r8)
 80032fc:	fe00e800 	.word	0xfe00e800

08003300 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003300:	b5b0      	push	{r4, r5, r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	000c      	movs	r4, r1
 800330a:	0010      	movs	r0, r2
 800330c:	0019      	movs	r1, r3
 800330e:	250a      	movs	r5, #10
 8003310:	197b      	adds	r3, r7, r5
 8003312:	1c22      	adds	r2, r4, #0
 8003314:	801a      	strh	r2, [r3, #0]
 8003316:	2308      	movs	r3, #8
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	1c02      	adds	r2, r0, #0
 800331c:	801a      	strh	r2, [r3, #0]
 800331e:	1dbb      	adds	r3, r7, #6
 8003320:	1c0a      	adds	r2, r1, #0
 8003322:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003324:	1dbb      	adds	r3, r7, #6
 8003326:	881b      	ldrh	r3, [r3, #0]
 8003328:	b2da      	uxtb	r2, r3
 800332a:	2380      	movs	r3, #128	@ 0x80
 800332c:	045c      	lsls	r4, r3, #17
 800332e:	197b      	adds	r3, r7, r5
 8003330:	8819      	ldrh	r1, [r3, #0]
 8003332:	68f8      	ldr	r0, [r7, #12]
 8003334:	4b23      	ldr	r3, [pc, #140]	@ (80033c4 <I2C_RequestMemoryWrite+0xc4>)
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	0023      	movs	r3, r4
 800333a:	f000 fa41 	bl	80037c0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800333e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003340:	6a39      	ldr	r1, [r7, #32]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	0018      	movs	r0, r3
 8003346:	f000 f8b9 	bl	80034bc <I2C_WaitOnTXISFlagUntilTimeout>
 800334a:	1e03      	subs	r3, r0, #0
 800334c:	d001      	beq.n	8003352 <I2C_RequestMemoryWrite+0x52>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e033      	b.n	80033ba <I2C_RequestMemoryWrite+0xba>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003352:	1dbb      	adds	r3, r7, #6
 8003354:	881b      	ldrh	r3, [r3, #0]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d107      	bne.n	800336a <I2C_RequestMemoryWrite+0x6a>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800335a:	2308      	movs	r3, #8
 800335c:	18fb      	adds	r3, r7, r3
 800335e:	881b      	ldrh	r3, [r3, #0]
 8003360:	b2da      	uxtb	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	629a      	str	r2, [r3, #40]	@ 0x28
 8003368:	e019      	b.n	800339e <I2C_RequestMemoryWrite+0x9e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800336a:	2308      	movs	r3, #8
 800336c:	18fb      	adds	r3, r7, r3
 800336e:	881b      	ldrh	r3, [r3, #0]
 8003370:	0a1b      	lsrs	r3, r3, #8
 8003372:	b29b      	uxth	r3, r3
 8003374:	b2da      	uxtb	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800337c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800337e:	6a39      	ldr	r1, [r7, #32]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	0018      	movs	r0, r3
 8003384:	f000 f89a 	bl	80034bc <I2C_WaitOnTXISFlagUntilTimeout>
 8003388:	1e03      	subs	r3, r0, #0
 800338a:	d001      	beq.n	8003390 <I2C_RequestMemoryWrite+0x90>
    {
      return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e014      	b.n	80033ba <I2C_RequestMemoryWrite+0xba>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003390:	2308      	movs	r3, #8
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	881b      	ldrh	r3, [r3, #0]
 8003396:	b2da      	uxtb	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800339e:	6a3a      	ldr	r2, [r7, #32]
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	0013      	movs	r3, r2
 80033a8:	2200      	movs	r2, #0
 80033aa:	2180      	movs	r1, #128	@ 0x80
 80033ac:	f000 f82e 	bl	800340c <I2C_WaitOnFlagUntilTimeout>
 80033b0:	1e03      	subs	r3, r0, #0
 80033b2:	d001      	beq.n	80033b8 <I2C_RequestMemoryWrite+0xb8>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e000      	b.n	80033ba <I2C_RequestMemoryWrite+0xba>
  }

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	0018      	movs	r0, r3
 80033bc:	46bd      	mov	sp, r7
 80033be:	b004      	add	sp, #16
 80033c0:	bdb0      	pop	{r4, r5, r7, pc}
 80033c2:	46c0      	nop			@ (mov r8, r8)
 80033c4:	80002000 	.word	0x80002000

080033c8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	699b      	ldr	r3, [r3, #24]
 80033d6:	2202      	movs	r2, #2
 80033d8:	4013      	ands	r3, r2
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d103      	bne.n	80033e6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2200      	movs	r2, #0
 80033e4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2201      	movs	r2, #1
 80033ee:	4013      	ands	r3, r2
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d007      	beq.n	8003404 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	699a      	ldr	r2, [r3, #24]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2101      	movs	r1, #1
 8003400:	430a      	orrs	r2, r1
 8003402:	619a      	str	r2, [r3, #24]
  }
}
 8003404:	46c0      	nop			@ (mov r8, r8)
 8003406:	46bd      	mov	sp, r7
 8003408:	b002      	add	sp, #8
 800340a:	bd80      	pop	{r7, pc}

0800340c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	60b9      	str	r1, [r7, #8]
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	1dfb      	adds	r3, r7, #7
 800341a:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800341c:	e03a      	b.n	8003494 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	6839      	ldr	r1, [r7, #0]
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	0018      	movs	r0, r3
 8003426:	f000 f8d3 	bl	80035d0 <I2C_IsErrorOccurred>
 800342a:	1e03      	subs	r3, r0, #0
 800342c:	d001      	beq.n	8003432 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e040      	b.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	3301      	adds	r3, #1
 8003436:	d02d      	beq.n	8003494 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003438:	f7fe fcf6 	bl	8001e28 <HAL_GetTick>
 800343c:	0002      	movs	r2, r0
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d302      	bcc.n	800344e <I2C_WaitOnFlagUntilTimeout+0x42>
 8003448:	683b      	ldr	r3, [r7, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d122      	bne.n	8003494 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	699b      	ldr	r3, [r3, #24]
 8003454:	68ba      	ldr	r2, [r7, #8]
 8003456:	4013      	ands	r3, r2
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	1ad3      	subs	r3, r2, r3
 800345c:	425a      	negs	r2, r3
 800345e:	4153      	adcs	r3, r2
 8003460:	b2db      	uxtb	r3, r3
 8003462:	001a      	movs	r2, r3
 8003464:	1dfb      	adds	r3, r7, #7
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	429a      	cmp	r2, r3
 800346a:	d113      	bne.n	8003494 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003470:	2220      	movs	r2, #32
 8003472:	431a      	orrs	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2241      	movs	r2, #65	@ 0x41
 800347c:	2120      	movs	r1, #32
 800347e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2242      	movs	r2, #66	@ 0x42
 8003484:	2100      	movs	r1, #0
 8003486:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2240      	movs	r2, #64	@ 0x40
 800348c:	2100      	movs	r1, #0
 800348e:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e00f      	b.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	68ba      	ldr	r2, [r7, #8]
 800349c:	4013      	ands	r3, r2
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	425a      	negs	r2, r3
 80034a4:	4153      	adcs	r3, r2
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	001a      	movs	r2, r3
 80034aa:	1dfb      	adds	r3, r7, #7
 80034ac:	781b      	ldrb	r3, [r3, #0]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d0b5      	beq.n	800341e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	0018      	movs	r0, r3
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b004      	add	sp, #16
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034c8:	e032      	b.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68b9      	ldr	r1, [r7, #8]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	0018      	movs	r0, r3
 80034d2:	f000 f87d 	bl	80035d0 <I2C_IsErrorOccurred>
 80034d6:	1e03      	subs	r3, r0, #0
 80034d8:	d001      	beq.n	80034de <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e030      	b.n	8003540 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	3301      	adds	r3, #1
 80034e2:	d025      	beq.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e4:	f7fe fca0 	bl	8001e28 <HAL_GetTick>
 80034e8:	0002      	movs	r2, r0
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	68ba      	ldr	r2, [r7, #8]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d302      	bcc.n	80034fa <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d11a      	bne.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	699b      	ldr	r3, [r3, #24]
 8003500:	2202      	movs	r2, #2
 8003502:	4013      	ands	r3, r2
 8003504:	2b02      	cmp	r3, #2
 8003506:	d013      	beq.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350c:	2220      	movs	r2, #32
 800350e:	431a      	orrs	r2, r3
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2241      	movs	r2, #65	@ 0x41
 8003518:	2120      	movs	r1, #32
 800351a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2242      	movs	r2, #66	@ 0x42
 8003520:	2100      	movs	r1, #0
 8003522:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2240      	movs	r2, #64	@ 0x40
 8003528:	2100      	movs	r1, #0
 800352a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e007      	b.n	8003540 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	2202      	movs	r2, #2
 8003538:	4013      	ands	r3, r2
 800353a:	2b02      	cmp	r3, #2
 800353c:	d1c5      	bne.n	80034ca <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	0018      	movs	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	b004      	add	sp, #16
 8003546:	bd80      	pop	{r7, pc}

08003548 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003554:	e02f      	b.n	80035b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68b9      	ldr	r1, [r7, #8]
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	0018      	movs	r0, r3
 800355e:	f000 f837 	bl	80035d0 <I2C_IsErrorOccurred>
 8003562:	1e03      	subs	r3, r0, #0
 8003564:	d001      	beq.n	800356a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003566:	2301      	movs	r3, #1
 8003568:	e02d      	b.n	80035c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356a:	f7fe fc5d 	bl	8001e28 <HAL_GetTick>
 800356e:	0002      	movs	r2, r0
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	68ba      	ldr	r2, [r7, #8]
 8003576:	429a      	cmp	r2, r3
 8003578:	d302      	bcc.n	8003580 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d11a      	bne.n	80035b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	2220      	movs	r2, #32
 8003588:	4013      	ands	r3, r2
 800358a:	2b20      	cmp	r3, #32
 800358c:	d013      	beq.n	80035b6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003592:	2220      	movs	r2, #32
 8003594:	431a      	orrs	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2241      	movs	r2, #65	@ 0x41
 800359e:	2120      	movs	r1, #32
 80035a0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	2242      	movs	r2, #66	@ 0x42
 80035a6:	2100      	movs	r1, #0
 80035a8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2240      	movs	r2, #64	@ 0x40
 80035ae:	2100      	movs	r1, #0
 80035b0:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e007      	b.n	80035c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	699b      	ldr	r3, [r3, #24]
 80035bc:	2220      	movs	r2, #32
 80035be:	4013      	ands	r3, r2
 80035c0:	2b20      	cmp	r3, #32
 80035c2:	d1c8      	bne.n	8003556 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	0018      	movs	r0, r3
 80035c8:	46bd      	mov	sp, r7
 80035ca:	b004      	add	sp, #16
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	@ 0x28
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	60b9      	str	r1, [r7, #8]
 80035da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035dc:	2327      	movs	r3, #39	@ 0x27
 80035de:	18fb      	adds	r3, r7, r3
 80035e0:	2200      	movs	r2, #0
 80035e2:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035ec:	2300      	movs	r3, #0
 80035ee:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035f4:	69bb      	ldr	r3, [r7, #24]
 80035f6:	2210      	movs	r2, #16
 80035f8:	4013      	ands	r3, r2
 80035fa:	d100      	bne.n	80035fe <I2C_IsErrorOccurred+0x2e>
 80035fc:	e079      	b.n	80036f2 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2210      	movs	r2, #16
 8003604:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003606:	e057      	b.n	80036b8 <I2C_IsErrorOccurred+0xe8>
 8003608:	2227      	movs	r2, #39	@ 0x27
 800360a:	18bb      	adds	r3, r7, r2
 800360c:	18ba      	adds	r2, r7, r2
 800360e:	7812      	ldrb	r2, [r2, #0]
 8003610:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	3301      	adds	r3, #1
 8003616:	d04f      	beq.n	80036b8 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003618:	f7fe fc06 	bl	8001e28 <HAL_GetTick>
 800361c:	0002      	movs	r2, r0
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	429a      	cmp	r2, r3
 8003626:	d302      	bcc.n	800362e <I2C_IsErrorOccurred+0x5e>
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d144      	bne.n	80036b8 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	685a      	ldr	r2, [r3, #4]
 8003634:	2380      	movs	r3, #128	@ 0x80
 8003636:	01db      	lsls	r3, r3, #7
 8003638:	4013      	ands	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800363c:	2013      	movs	r0, #19
 800363e:	183b      	adds	r3, r7, r0
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	2142      	movs	r1, #66	@ 0x42
 8003644:	5c52      	ldrb	r2, [r2, r1]
 8003646:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	699a      	ldr	r2, [r3, #24]
 800364e:	2380      	movs	r3, #128	@ 0x80
 8003650:	021b      	lsls	r3, r3, #8
 8003652:	401a      	ands	r2, r3
 8003654:	2380      	movs	r3, #128	@ 0x80
 8003656:	021b      	lsls	r3, r3, #8
 8003658:	429a      	cmp	r2, r3
 800365a:	d126      	bne.n	80036aa <I2C_IsErrorOccurred+0xda>
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	2380      	movs	r3, #128	@ 0x80
 8003660:	01db      	lsls	r3, r3, #7
 8003662:	429a      	cmp	r2, r3
 8003664:	d021      	beq.n	80036aa <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8003666:	183b      	adds	r3, r7, r0
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b20      	cmp	r3, #32
 800366c:	d01d      	beq.n	80036aa <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2180      	movs	r1, #128	@ 0x80
 800367a:	01c9      	lsls	r1, r1, #7
 800367c:	430a      	orrs	r2, r1
 800367e:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003680:	f7fe fbd2 	bl	8001e28 <HAL_GetTick>
 8003684:	0003      	movs	r3, r0
 8003686:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003688:	e00f      	b.n	80036aa <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800368a:	f7fe fbcd 	bl	8001e28 <HAL_GetTick>
 800368e:	0002      	movs	r2, r0
 8003690:	69fb      	ldr	r3, [r7, #28]
 8003692:	1ad3      	subs	r3, r2, r3
 8003694:	2b19      	cmp	r3, #25
 8003696:	d908      	bls.n	80036aa <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003698:	6a3b      	ldr	r3, [r7, #32]
 800369a:	2220      	movs	r2, #32
 800369c:	4313      	orrs	r3, r2
 800369e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036a0:	2327      	movs	r3, #39	@ 0x27
 80036a2:	18fb      	adds	r3, r7, r3
 80036a4:	2201      	movs	r2, #1
 80036a6:	701a      	strb	r2, [r3, #0]

              break;
 80036a8:	e006      	b.n	80036b8 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	2220      	movs	r2, #32
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b20      	cmp	r3, #32
 80036b6:	d1e8      	bne.n	800368a <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	2220      	movs	r2, #32
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b20      	cmp	r3, #32
 80036c4:	d004      	beq.n	80036d0 <I2C_IsErrorOccurred+0x100>
 80036c6:	2327      	movs	r3, #39	@ 0x27
 80036c8:	18fb      	adds	r3, r7, r3
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d09b      	beq.n	8003608 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036d0:	2327      	movs	r3, #39	@ 0x27
 80036d2:	18fb      	adds	r3, r7, r3
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d103      	bne.n	80036e2 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2220      	movs	r2, #32
 80036e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036e2:	6a3b      	ldr	r3, [r7, #32]
 80036e4:	2204      	movs	r2, #4
 80036e6:	4313      	orrs	r3, r2
 80036e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036ea:	2327      	movs	r3, #39	@ 0x27
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	2201      	movs	r2, #1
 80036f0:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	699b      	ldr	r3, [r3, #24]
 80036f8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	2380      	movs	r3, #128	@ 0x80
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	4013      	ands	r3, r2
 8003702:	d00c      	beq.n	800371e <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	2201      	movs	r2, #1
 8003708:	4313      	orrs	r3, r2
 800370a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2280      	movs	r2, #128	@ 0x80
 8003712:	0052      	lsls	r2, r2, #1
 8003714:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003716:	2327      	movs	r3, #39	@ 0x27
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	2201      	movs	r2, #1
 800371c:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	2380      	movs	r3, #128	@ 0x80
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	4013      	ands	r3, r2
 8003726:	d00c      	beq.n	8003742 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	2208      	movs	r2, #8
 800372c:	4313      	orrs	r3, r2
 800372e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2280      	movs	r2, #128	@ 0x80
 8003736:	00d2      	lsls	r2, r2, #3
 8003738:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800373a:	2327      	movs	r3, #39	@ 0x27
 800373c:	18fb      	adds	r3, r7, r3
 800373e:	2201      	movs	r2, #1
 8003740:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	2380      	movs	r3, #128	@ 0x80
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	4013      	ands	r3, r2
 800374a:	d00c      	beq.n	8003766 <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	2202      	movs	r2, #2
 8003750:	4313      	orrs	r3, r2
 8003752:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	2280      	movs	r2, #128	@ 0x80
 800375a:	0092      	lsls	r2, r2, #2
 800375c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800375e:	2327      	movs	r3, #39	@ 0x27
 8003760:	18fb      	adds	r3, r7, r3
 8003762:	2201      	movs	r2, #1
 8003764:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8003766:	2327      	movs	r3, #39	@ 0x27
 8003768:	18fb      	adds	r3, r7, r3
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d01d      	beq.n	80037ac <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	0018      	movs	r0, r3
 8003774:	f7ff fe28 	bl	80033c8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	490e      	ldr	r1, [pc, #56]	@ (80037bc <I2C_IsErrorOccurred+0x1ec>)
 8003784:	400a      	ands	r2, r1
 8003786:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	431a      	orrs	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2241      	movs	r2, #65	@ 0x41
 8003798:	2120      	movs	r1, #32
 800379a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2242      	movs	r2, #66	@ 0x42
 80037a0:	2100      	movs	r1, #0
 80037a2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2240      	movs	r2, #64	@ 0x40
 80037a8:	2100      	movs	r1, #0
 80037aa:	5499      	strb	r1, [r3, r2]
  }

  return status;
 80037ac:	2327      	movs	r3, #39	@ 0x27
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	781b      	ldrb	r3, [r3, #0]
}
 80037b2:	0018      	movs	r0, r3
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b00a      	add	sp, #40	@ 0x28
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	46c0      	nop			@ (mov r8, r8)
 80037bc:	fe00e800 	.word	0xfe00e800

080037c0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	0008      	movs	r0, r1
 80037ca:	0011      	movs	r1, r2
 80037cc:	607b      	str	r3, [r7, #4]
 80037ce:	240a      	movs	r4, #10
 80037d0:	193b      	adds	r3, r7, r4
 80037d2:	1c02      	adds	r2, r0, #0
 80037d4:	801a      	strh	r2, [r3, #0]
 80037d6:	2009      	movs	r0, #9
 80037d8:	183b      	adds	r3, r7, r0
 80037da:	1c0a      	adds	r2, r1, #0
 80037dc:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037de:	193b      	adds	r3, r7, r4
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	059b      	lsls	r3, r3, #22
 80037e4:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037e6:	183b      	adds	r3, r7, r0
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	0419      	lsls	r1, r3, #16
 80037ec:	23ff      	movs	r3, #255	@ 0xff
 80037ee:	041b      	lsls	r3, r3, #16
 80037f0:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037f2:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037fa:	4313      	orrs	r3, r2
 80037fc:	005b      	lsls	r3, r3, #1
 80037fe:	085b      	lsrs	r3, r3, #1
 8003800:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800380a:	0d51      	lsrs	r1, r2, #21
 800380c:	2280      	movs	r2, #128	@ 0x80
 800380e:	00d2      	lsls	r2, r2, #3
 8003810:	400a      	ands	r2, r1
 8003812:	4907      	ldr	r1, [pc, #28]	@ (8003830 <I2C_TransferConfig+0x70>)
 8003814:	430a      	orrs	r2, r1
 8003816:	43d2      	mvns	r2, r2
 8003818:	401a      	ands	r2, r3
 800381a:	0011      	movs	r1, r2
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003826:	46c0      	nop			@ (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	b007      	add	sp, #28
 800382c:	bd90      	pop	{r4, r7, pc}
 800382e:	46c0      	nop			@ (mov r8, r8)
 8003830:	03ff63ff 	.word	0x03ff63ff

08003834 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2241      	movs	r2, #65	@ 0x41
 8003842:	5c9b      	ldrb	r3, [r3, r2]
 8003844:	b2db      	uxtb	r3, r3
 8003846:	2b20      	cmp	r3, #32
 8003848:	d138      	bne.n	80038bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2240      	movs	r2, #64	@ 0x40
 800384e:	5c9b      	ldrb	r3, [r3, r2]
 8003850:	2b01      	cmp	r3, #1
 8003852:	d101      	bne.n	8003858 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003854:	2302      	movs	r3, #2
 8003856:	e032      	b.n	80038be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2240      	movs	r2, #64	@ 0x40
 800385c:	2101      	movs	r1, #1
 800385e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2241      	movs	r2, #65	@ 0x41
 8003864:	2124      	movs	r1, #36	@ 0x24
 8003866:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2101      	movs	r1, #1
 8003874:	438a      	bics	r2, r1
 8003876:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4911      	ldr	r1, [pc, #68]	@ (80038c8 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003884:	400a      	ands	r2, r1
 8003886:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	6819      	ldr	r1, [r3, #0]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2101      	movs	r1, #1
 80038a4:	430a      	orrs	r2, r1
 80038a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2241      	movs	r2, #65	@ 0x41
 80038ac:	2120      	movs	r1, #32
 80038ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2240      	movs	r2, #64	@ 0x40
 80038b4:	2100      	movs	r1, #0
 80038b6:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80038b8:	2300      	movs	r3, #0
 80038ba:	e000      	b.n	80038be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038bc:	2302      	movs	r3, #2
  }
}
 80038be:	0018      	movs	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b002      	add	sp, #8
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	ffffefff 	.word	0xffffefff

080038cc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2241      	movs	r2, #65	@ 0x41
 80038da:	5c9b      	ldrb	r3, [r3, r2]
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b20      	cmp	r3, #32
 80038e0:	d139      	bne.n	8003956 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2240      	movs	r2, #64	@ 0x40
 80038e6:	5c9b      	ldrb	r3, [r3, r2]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d101      	bne.n	80038f0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038ec:	2302      	movs	r3, #2
 80038ee:	e033      	b.n	8003958 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2240      	movs	r2, #64	@ 0x40
 80038f4:	2101      	movs	r1, #1
 80038f6:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2241      	movs	r2, #65	@ 0x41
 80038fc:	2124      	movs	r1, #36	@ 0x24
 80038fe:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	681a      	ldr	r2, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2101      	movs	r1, #1
 800390c:	438a      	bics	r2, r1
 800390e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4a11      	ldr	r2, [pc, #68]	@ (8003960 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800391c:	4013      	ands	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	021b      	lsls	r3, r3, #8
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	2101      	movs	r1, #1
 800393e:	430a      	orrs	r2, r1
 8003940:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2241      	movs	r2, #65	@ 0x41
 8003946:	2120      	movs	r1, #32
 8003948:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2240      	movs	r2, #64	@ 0x40
 800394e:	2100      	movs	r1, #0
 8003950:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e000      	b.n	8003958 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003956:	2302      	movs	r3, #2
  }
}
 8003958:	0018      	movs	r0, r3
 800395a:	46bd      	mov	sp, r7
 800395c:	b004      	add	sp, #16
 800395e:	bd80      	pop	{r7, pc}
 8003960:	fffff0ff 	.word	0xfffff0ff

08003964 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b084      	sub	sp, #16
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800396c:	4b19      	ldr	r3, [pc, #100]	@ (80039d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a19      	ldr	r2, [pc, #100]	@ (80039d8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003972:	4013      	ands	r3, r2
 8003974:	0019      	movs	r1, r3
 8003976:	4b17      	ldr	r3, [pc, #92]	@ (80039d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	430a      	orrs	r2, r1
 800397c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	2380      	movs	r3, #128	@ 0x80
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	429a      	cmp	r2, r3
 8003986:	d11f      	bne.n	80039c8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003988:	4b14      	ldr	r3, [pc, #80]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0x78>)
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	0013      	movs	r3, r2
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	189b      	adds	r3, r3, r2
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	4912      	ldr	r1, [pc, #72]	@ (80039e0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003996:	0018      	movs	r0, r3
 8003998:	f7fc fbb4 	bl	8000104 <__udivsi3>
 800399c:	0003      	movs	r3, r0
 800399e:	3301      	adds	r3, #1
 80039a0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039a2:	e008      	b.n	80039b6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	60fb      	str	r3, [r7, #12]
 80039b0:	e001      	b.n	80039b6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80039b2:	2303      	movs	r3, #3
 80039b4:	e009      	b.n	80039ca <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80039b6:	4b07      	ldr	r3, [pc, #28]	@ (80039d4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80039b8:	695a      	ldr	r2, [r3, #20]
 80039ba:	2380      	movs	r3, #128	@ 0x80
 80039bc:	00db      	lsls	r3, r3, #3
 80039be:	401a      	ands	r2, r3
 80039c0:	2380      	movs	r3, #128	@ 0x80
 80039c2:	00db      	lsls	r3, r3, #3
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d0ed      	beq.n	80039a4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	0018      	movs	r0, r3
 80039cc:	46bd      	mov	sp, r7
 80039ce:	b004      	add	sp, #16
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	46c0      	nop			@ (mov r8, r8)
 80039d4:	40007000 	.word	0x40007000
 80039d8:	fffff9ff 	.word	0xfffff9ff
 80039dc:	20000000 	.word	0x20000000
 80039e0:	000f4240 	.word	0x000f4240

080039e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b088      	sub	sp, #32
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e2fe      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	2201      	movs	r2, #1
 80039fc:	4013      	ands	r3, r2
 80039fe:	d100      	bne.n	8003a02 <HAL_RCC_OscConfig+0x1e>
 8003a00:	e07c      	b.n	8003afc <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a02:	4bc3      	ldr	r3, [pc, #780]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2238      	movs	r2, #56	@ 0x38
 8003a08:	4013      	ands	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a0c:	4bc0      	ldr	r3, [pc, #768]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	2203      	movs	r2, #3
 8003a12:	4013      	ands	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b10      	cmp	r3, #16
 8003a1a:	d102      	bne.n	8003a22 <HAL_RCC_OscConfig+0x3e>
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2b03      	cmp	r3, #3
 8003a20:	d002      	beq.n	8003a28 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b08      	cmp	r3, #8
 8003a26:	d10b      	bne.n	8003a40 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a28:	4bb9      	ldr	r3, [pc, #740]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	2380      	movs	r3, #128	@ 0x80
 8003a2e:	029b      	lsls	r3, r3, #10
 8003a30:	4013      	ands	r3, r2
 8003a32:	d062      	beq.n	8003afa <HAL_RCC_OscConfig+0x116>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d15e      	bne.n	8003afa <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e2d9      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685a      	ldr	r2, [r3, #4]
 8003a44:	2380      	movs	r3, #128	@ 0x80
 8003a46:	025b      	lsls	r3, r3, #9
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_OscConfig+0x78>
 8003a4c:	4bb0      	ldr	r3, [pc, #704]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4baf      	ldr	r3, [pc, #700]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003a52:	2180      	movs	r1, #128	@ 0x80
 8003a54:	0249      	lsls	r1, r1, #9
 8003a56:	430a      	orrs	r2, r1
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	e020      	b.n	8003a9e <HAL_RCC_OscConfig+0xba>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	23a0      	movs	r3, #160	@ 0xa0
 8003a62:	02db      	lsls	r3, r3, #11
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d10e      	bne.n	8003a86 <HAL_RCC_OscConfig+0xa2>
 8003a68:	4ba9      	ldr	r3, [pc, #676]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003a6a:	681a      	ldr	r2, [r3, #0]
 8003a6c:	4ba8      	ldr	r3, [pc, #672]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003a6e:	2180      	movs	r1, #128	@ 0x80
 8003a70:	02c9      	lsls	r1, r1, #11
 8003a72:	430a      	orrs	r2, r1
 8003a74:	601a      	str	r2, [r3, #0]
 8003a76:	4ba6      	ldr	r3, [pc, #664]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003a78:	681a      	ldr	r2, [r3, #0]
 8003a7a:	4ba5      	ldr	r3, [pc, #660]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003a7c:	2180      	movs	r1, #128	@ 0x80
 8003a7e:	0249      	lsls	r1, r1, #9
 8003a80:	430a      	orrs	r2, r1
 8003a82:	601a      	str	r2, [r3, #0]
 8003a84:	e00b      	b.n	8003a9e <HAL_RCC_OscConfig+0xba>
 8003a86:	4ba2      	ldr	r3, [pc, #648]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	4ba1      	ldr	r3, [pc, #644]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003a8c:	49a1      	ldr	r1, [pc, #644]	@ (8003d14 <HAL_RCC_OscConfig+0x330>)
 8003a8e:	400a      	ands	r2, r1
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	4b9f      	ldr	r3, [pc, #636]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4b9e      	ldr	r3, [pc, #632]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003a98:	499f      	ldr	r1, [pc, #636]	@ (8003d18 <HAL_RCC_OscConfig+0x334>)
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d014      	beq.n	8003ad0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa6:	f7fe f9bf 	bl	8001e28 <HAL_GetTick>
 8003aaa:	0003      	movs	r3, r0
 8003aac:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ab0:	f7fe f9ba 	bl	8001e28 <HAL_GetTick>
 8003ab4:	0002      	movs	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b64      	cmp	r3, #100	@ 0x64
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e298      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ac2:	4b93      	ldr	r3, [pc, #588]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	2380      	movs	r3, #128	@ 0x80
 8003ac8:	029b      	lsls	r3, r3, #10
 8003aca:	4013      	ands	r3, r2
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0xcc>
 8003ace:	e015      	b.n	8003afc <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fe f9aa 	bl	8001e28 <HAL_GetTick>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ad8:	e008      	b.n	8003aec <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ada:	f7fe f9a5 	bl	8001e28 <HAL_GetTick>
 8003ade:	0002      	movs	r2, r0
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	2b64      	cmp	r3, #100	@ 0x64
 8003ae6:	d901      	bls.n	8003aec <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003ae8:	2303      	movs	r3, #3
 8003aea:	e283      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003aec:	4b88      	ldr	r3, [pc, #544]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	2380      	movs	r3, #128	@ 0x80
 8003af2:	029b      	lsls	r3, r3, #10
 8003af4:	4013      	ands	r3, r2
 8003af6:	d1f0      	bne.n	8003ada <HAL_RCC_OscConfig+0xf6>
 8003af8:	e000      	b.n	8003afc <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003afa:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2202      	movs	r2, #2
 8003b02:	4013      	ands	r3, r2
 8003b04:	d100      	bne.n	8003b08 <HAL_RCC_OscConfig+0x124>
 8003b06:	e099      	b.n	8003c3c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b08:	4b81      	ldr	r3, [pc, #516]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2238      	movs	r2, #56	@ 0x38
 8003b0e:	4013      	ands	r3, r2
 8003b10:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003b12:	4b7f      	ldr	r3, [pc, #508]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	2203      	movs	r2, #3
 8003b18:	4013      	ands	r3, r2
 8003b1a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003b1c:	69bb      	ldr	r3, [r7, #24]
 8003b1e:	2b10      	cmp	r3, #16
 8003b20:	d102      	bne.n	8003b28 <HAL_RCC_OscConfig+0x144>
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d002      	beq.n	8003b2e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d135      	bne.n	8003b9a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b2e:	4b78      	ldr	r3, [pc, #480]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	2380      	movs	r3, #128	@ 0x80
 8003b34:	00db      	lsls	r3, r3, #3
 8003b36:	4013      	ands	r3, r2
 8003b38:	d005      	beq.n	8003b46 <HAL_RCC_OscConfig+0x162>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68db      	ldr	r3, [r3, #12]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d101      	bne.n	8003b46 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e256      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b46:	4b72      	ldr	r3, [pc, #456]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4a74      	ldr	r2, [pc, #464]	@ (8003d1c <HAL_RCC_OscConfig+0x338>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	0019      	movs	r1, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	021a      	lsls	r2, r3, #8
 8003b56:	4b6e      	ldr	r3, [pc, #440]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d112      	bne.n	8003b88 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b62:	4b6b      	ldr	r3, [pc, #428]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a6e      	ldr	r2, [pc, #440]	@ (8003d20 <HAL_RCC_OscConfig+0x33c>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	0019      	movs	r1, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	4b67      	ldr	r3, [pc, #412]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003b72:	430a      	orrs	r2, r1
 8003b74:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003b76:	4b66      	ldr	r3, [pc, #408]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	0adb      	lsrs	r3, r3, #11
 8003b7c:	2207      	movs	r2, #7
 8003b7e:	4013      	ands	r3, r2
 8003b80:	4a68      	ldr	r2, [pc, #416]	@ (8003d24 <HAL_RCC_OscConfig+0x340>)
 8003b82:	40da      	lsrs	r2, r3
 8003b84:	4b68      	ldr	r3, [pc, #416]	@ (8003d28 <HAL_RCC_OscConfig+0x344>)
 8003b86:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b88:	4b68      	ldr	r3, [pc, #416]	@ (8003d2c <HAL_RCC_OscConfig+0x348>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f7fe f8ef 	bl	8001d70 <HAL_InitTick>
 8003b92:	1e03      	subs	r3, r0, #0
 8003b94:	d051      	beq.n	8003c3a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e22c      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d030      	beq.n	8003c04 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ba2:	4b5b      	ldr	r3, [pc, #364]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a5e      	ldr	r2, [pc, #376]	@ (8003d20 <HAL_RCC_OscConfig+0x33c>)
 8003ba8:	4013      	ands	r3, r2
 8003baa:	0019      	movs	r1, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	4b57      	ldr	r3, [pc, #348]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003bb6:	4b56      	ldr	r3, [pc, #344]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003bb8:	681a      	ldr	r2, [r3, #0]
 8003bba:	4b55      	ldr	r3, [pc, #340]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003bbc:	2180      	movs	r1, #128	@ 0x80
 8003bbe:	0049      	lsls	r1, r1, #1
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fe f930 	bl	8001e28 <HAL_GetTick>
 8003bc8:	0003      	movs	r3, r0
 8003bca:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003bcc:	e008      	b.n	8003be0 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bce:	f7fe f92b 	bl	8001e28 <HAL_GetTick>
 8003bd2:	0002      	movs	r2, r0
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d901      	bls.n	8003be0 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e209      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be0:	4b4b      	ldr	r3, [pc, #300]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	2380      	movs	r3, #128	@ 0x80
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	4013      	ands	r3, r2
 8003bea:	d0f0      	beq.n	8003bce <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bec:	4b48      	ldr	r3, [pc, #288]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4a4a      	ldr	r2, [pc, #296]	@ (8003d1c <HAL_RCC_OscConfig+0x338>)
 8003bf2:	4013      	ands	r3, r2
 8003bf4:	0019      	movs	r1, r3
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	695b      	ldr	r3, [r3, #20]
 8003bfa:	021a      	lsls	r2, r3, #8
 8003bfc:	4b44      	ldr	r3, [pc, #272]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
 8003c02:	e01b      	b.n	8003c3c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003c04:	4b42      	ldr	r3, [pc, #264]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	4b41      	ldr	r3, [pc, #260]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003c0a:	4949      	ldr	r1, [pc, #292]	@ (8003d30 <HAL_RCC_OscConfig+0x34c>)
 8003c0c:	400a      	ands	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fe f90a 	bl	8001e28 <HAL_GetTick>
 8003c14:	0003      	movs	r3, r0
 8003c16:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c18:	e008      	b.n	8003c2c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c1a:	f7fe f905 	bl	8001e28 <HAL_GetTick>
 8003c1e:	0002      	movs	r2, r0
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	1ad3      	subs	r3, r2, r3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d901      	bls.n	8003c2c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003c28:	2303      	movs	r3, #3
 8003c2a:	e1e3      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003c2c:	4b38      	ldr	r3, [pc, #224]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	2380      	movs	r3, #128	@ 0x80
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4013      	ands	r3, r2
 8003c36:	d1f0      	bne.n	8003c1a <HAL_RCC_OscConfig+0x236>
 8003c38:	e000      	b.n	8003c3c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003c3a:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2208      	movs	r2, #8
 8003c42:	4013      	ands	r3, r2
 8003c44:	d047      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003c46:	4b32      	ldr	r3, [pc, #200]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	2238      	movs	r2, #56	@ 0x38
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	2b18      	cmp	r3, #24
 8003c50:	d10a      	bne.n	8003c68 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003c52:	4b2f      	ldr	r3, [pc, #188]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c56:	2202      	movs	r2, #2
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d03c      	beq.n	8003cd6 <HAL_RCC_OscConfig+0x2f2>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d138      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e1c5      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d019      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003c70:	4b27      	ldr	r3, [pc, #156]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003c72:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003c74:	4b26      	ldr	r3, [pc, #152]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003c76:	2101      	movs	r1, #1
 8003c78:	430a      	orrs	r2, r1
 8003c7a:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c7c:	f7fe f8d4 	bl	8001e28 <HAL_GetTick>
 8003c80:	0003      	movs	r3, r0
 8003c82:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c86:	f7fe f8cf 	bl	8001e28 <HAL_GetTick>
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e1ad      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c98:	4b1d      	ldr	r3, [pc, #116]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003c9a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d0f1      	beq.n	8003c86 <HAL_RCC_OscConfig+0x2a2>
 8003ca2:	e018      	b.n	8003cd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003ca4:	4b1a      	ldr	r3, [pc, #104]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003ca6:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003ca8:	4b19      	ldr	r3, [pc, #100]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003caa:	2101      	movs	r1, #1
 8003cac:	438a      	bics	r2, r1
 8003cae:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fe f8ba 	bl	8001e28 <HAL_GetTick>
 8003cb4:	0003      	movs	r3, r0
 8003cb6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cba:	f7fe f8b5 	bl	8001e28 <HAL_GetTick>
 8003cbe:	0002      	movs	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e193      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ccc:	4b10      	ldr	r3, [pc, #64]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003cce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	d1f1      	bne.n	8003cba <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	2204      	movs	r2, #4
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d100      	bne.n	8003ce2 <HAL_RCC_OscConfig+0x2fe>
 8003ce0:	e0c6      	b.n	8003e70 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ce2:	231f      	movs	r3, #31
 8003ce4:	18fb      	adds	r3, r7, r3
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003cea:	4b09      	ldr	r3, [pc, #36]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2238      	movs	r2, #56	@ 0x38
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d11e      	bne.n	8003d34 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003cf6:	4b06      	ldr	r3, [pc, #24]	@ (8003d10 <HAL_RCC_OscConfig+0x32c>)
 8003cf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d100      	bne.n	8003d02 <HAL_RCC_OscConfig+0x31e>
 8003d00:	e0b6      	b.n	8003e70 <HAL_RCC_OscConfig+0x48c>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d000      	beq.n	8003d0c <HAL_RCC_OscConfig+0x328>
 8003d0a:	e0b1      	b.n	8003e70 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e171      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
 8003d10:	40021000 	.word	0x40021000
 8003d14:	fffeffff 	.word	0xfffeffff
 8003d18:	fffbffff 	.word	0xfffbffff
 8003d1c:	ffff80ff 	.word	0xffff80ff
 8003d20:	ffffc7ff 	.word	0xffffc7ff
 8003d24:	00f42400 	.word	0x00f42400
 8003d28:	20000000 	.word	0x20000000
 8003d2c:	20000004 	.word	0x20000004
 8003d30:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003d34:	4bb1      	ldr	r3, [pc, #708]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003d36:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d38:	2380      	movs	r3, #128	@ 0x80
 8003d3a:	055b      	lsls	r3, r3, #21
 8003d3c:	4013      	ands	r3, r2
 8003d3e:	d101      	bne.n	8003d44 <HAL_RCC_OscConfig+0x360>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <HAL_RCC_OscConfig+0x362>
 8003d44:	2300      	movs	r3, #0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d011      	beq.n	8003d6e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003d4a:	4bac      	ldr	r3, [pc, #688]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003d4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d4e:	4bab      	ldr	r3, [pc, #684]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003d50:	2180      	movs	r1, #128	@ 0x80
 8003d52:	0549      	lsls	r1, r1, #21
 8003d54:	430a      	orrs	r2, r1
 8003d56:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003d58:	4ba8      	ldr	r3, [pc, #672]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003d5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003d5c:	2380      	movs	r3, #128	@ 0x80
 8003d5e:	055b      	lsls	r3, r3, #21
 8003d60:	4013      	ands	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003d66:	231f      	movs	r3, #31
 8003d68:	18fb      	adds	r3, r7, r3
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d6e:	4ba4      	ldr	r3, [pc, #656]	@ (8004000 <HAL_RCC_OscConfig+0x61c>)
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	2380      	movs	r3, #128	@ 0x80
 8003d74:	005b      	lsls	r3, r3, #1
 8003d76:	4013      	ands	r3, r2
 8003d78:	d11a      	bne.n	8003db0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d7a:	4ba1      	ldr	r3, [pc, #644]	@ (8004000 <HAL_RCC_OscConfig+0x61c>)
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	4ba0      	ldr	r3, [pc, #640]	@ (8004000 <HAL_RCC_OscConfig+0x61c>)
 8003d80:	2180      	movs	r1, #128	@ 0x80
 8003d82:	0049      	lsls	r1, r1, #1
 8003d84:	430a      	orrs	r2, r1
 8003d86:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003d88:	f7fe f84e 	bl	8001e28 <HAL_GetTick>
 8003d8c:	0003      	movs	r3, r0
 8003d8e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d90:	e008      	b.n	8003da4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d92:	f7fe f849 	bl	8001e28 <HAL_GetTick>
 8003d96:	0002      	movs	r2, r0
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	2b02      	cmp	r3, #2
 8003d9e:	d901      	bls.n	8003da4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003da0:	2303      	movs	r3, #3
 8003da2:	e127      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003da4:	4b96      	ldr	r3, [pc, #600]	@ (8004000 <HAL_RCC_OscConfig+0x61c>)
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	2380      	movs	r3, #128	@ 0x80
 8003daa:	005b      	lsls	r3, r3, #1
 8003dac:	4013      	ands	r3, r2
 8003dae:	d0f0      	beq.n	8003d92 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d106      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x3e2>
 8003db8:	4b90      	ldr	r3, [pc, #576]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003dba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dbc:	4b8f      	ldr	r3, [pc, #572]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003dbe:	2101      	movs	r1, #1
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003dc4:	e01c      	b.n	8003e00 <HAL_RCC_OscConfig+0x41c>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b05      	cmp	r3, #5
 8003dcc:	d10c      	bne.n	8003de8 <HAL_RCC_OscConfig+0x404>
 8003dce:	4b8b      	ldr	r3, [pc, #556]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003dd0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dd2:	4b8a      	ldr	r3, [pc, #552]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003dd4:	2104      	movs	r1, #4
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003dda:	4b88      	ldr	r3, [pc, #544]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003ddc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dde:	4b87      	ldr	r3, [pc, #540]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003de0:	2101      	movs	r1, #1
 8003de2:	430a      	orrs	r2, r1
 8003de4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003de6:	e00b      	b.n	8003e00 <HAL_RCC_OscConfig+0x41c>
 8003de8:	4b84      	ldr	r3, [pc, #528]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003dea:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003dec:	4b83      	ldr	r3, [pc, #524]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003dee:	2101      	movs	r1, #1
 8003df0:	438a      	bics	r2, r1
 8003df2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003df4:	4b81      	ldr	r3, [pc, #516]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003df6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003df8:	4b80      	ldr	r3, [pc, #512]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003dfa:	2104      	movs	r1, #4
 8003dfc:	438a      	bics	r2, r1
 8003dfe:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d014      	beq.n	8003e32 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fe f80e 	bl	8001e28 <HAL_GetTick>
 8003e0c:	0003      	movs	r3, r0
 8003e0e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e10:	e009      	b.n	8003e26 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e12:	f7fe f809 	bl	8001e28 <HAL_GetTick>
 8003e16:	0002      	movs	r2, r0
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	4a79      	ldr	r2, [pc, #484]	@ (8004004 <HAL_RCC_OscConfig+0x620>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d901      	bls.n	8003e26 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e0e6      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e26:	4b75      	ldr	r3, [pc, #468]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	d0f0      	beq.n	8003e12 <HAL_RCC_OscConfig+0x42e>
 8003e30:	e013      	b.n	8003e5a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e32:	f7fd fff9 	bl	8001e28 <HAL_GetTick>
 8003e36:	0003      	movs	r3, r0
 8003e38:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e3a:	e009      	b.n	8003e50 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e3c:	f7fd fff4 	bl	8001e28 <HAL_GetTick>
 8003e40:	0002      	movs	r2, r0
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	4a6f      	ldr	r2, [pc, #444]	@ (8004004 <HAL_RCC_OscConfig+0x620>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d901      	bls.n	8003e50 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003e4c:	2303      	movs	r3, #3
 8003e4e:	e0d1      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003e50:	4b6a      	ldr	r3, [pc, #424]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003e52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e54:	2202      	movs	r2, #2
 8003e56:	4013      	ands	r3, r2
 8003e58:	d1f0      	bne.n	8003e3c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e5a:	231f      	movs	r3, #31
 8003e5c:	18fb      	adds	r3, r7, r3
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d105      	bne.n	8003e70 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e64:	4b65      	ldr	r3, [pc, #404]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003e66:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e68:	4b64      	ldr	r3, [pc, #400]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003e6a:	4967      	ldr	r1, [pc, #412]	@ (8004008 <HAL_RCC_OscConfig+0x624>)
 8003e6c:	400a      	ands	r2, r1
 8003e6e:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d100      	bne.n	8003e7a <HAL_RCC_OscConfig+0x496>
 8003e78:	e0bb      	b.n	8003ff2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e7a:	4b60      	ldr	r3, [pc, #384]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2238      	movs	r2, #56	@ 0x38
 8003e80:	4013      	ands	r3, r2
 8003e82:	2b10      	cmp	r3, #16
 8003e84:	d100      	bne.n	8003e88 <HAL_RCC_OscConfig+0x4a4>
 8003e86:	e07b      	b.n	8003f80 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	69db      	ldr	r3, [r3, #28]
 8003e8c:	2b02      	cmp	r3, #2
 8003e8e:	d156      	bne.n	8003f3e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e90:	4b5a      	ldr	r3, [pc, #360]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	4b59      	ldr	r3, [pc, #356]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003e96:	495d      	ldr	r1, [pc, #372]	@ (800400c <HAL_RCC_OscConfig+0x628>)
 8003e98:	400a      	ands	r2, r1
 8003e9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9c:	f7fd ffc4 	bl	8001e28 <HAL_GetTick>
 8003ea0:	0003      	movs	r3, r0
 8003ea2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ea6:	f7fd ffbf 	bl	8001e28 <HAL_GetTick>
 8003eaa:	0002      	movs	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e09d      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003eb8:	4b50      	ldr	r3, [pc, #320]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	2380      	movs	r3, #128	@ 0x80
 8003ebe:	049b      	lsls	r3, r3, #18
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	d1f0      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	4a51      	ldr	r2, [pc, #324]	@ (8004010 <HAL_RCC_OscConfig+0x62c>)
 8003eca:	4013      	ands	r3, r2
 8003ecc:	0019      	movs	r1, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1a      	ldr	r2, [r3, #32]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003edc:	021b      	lsls	r3, r3, #8
 8003ede:	431a      	orrs	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	431a      	orrs	r2, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ef0:	431a      	orrs	r2, r3
 8003ef2:	4b42      	ldr	r3, [pc, #264]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003ef4:	430a      	orrs	r2, r1
 8003ef6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ef8:	4b40      	ldr	r3, [pc, #256]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	4b3f      	ldr	r3, [pc, #252]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003efe:	2180      	movs	r1, #128	@ 0x80
 8003f00:	0449      	lsls	r1, r1, #17
 8003f02:	430a      	orrs	r2, r1
 8003f04:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003f06:	4b3d      	ldr	r3, [pc, #244]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003f08:	68da      	ldr	r2, [r3, #12]
 8003f0a:	4b3c      	ldr	r3, [pc, #240]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003f0c:	2180      	movs	r1, #128	@ 0x80
 8003f0e:	0549      	lsls	r1, r1, #21
 8003f10:	430a      	orrs	r2, r1
 8003f12:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f14:	f7fd ff88 	bl	8001e28 <HAL_GetTick>
 8003f18:	0003      	movs	r3, r0
 8003f1a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f1c:	e008      	b.n	8003f30 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f1e:	f7fd ff83 	bl	8001e28 <HAL_GetTick>
 8003f22:	0002      	movs	r2, r0
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	1ad3      	subs	r3, r2, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e061      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f30:	4b32      	ldr	r3, [pc, #200]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	2380      	movs	r3, #128	@ 0x80
 8003f36:	049b      	lsls	r3, r3, #18
 8003f38:	4013      	ands	r3, r2
 8003f3a:	d0f0      	beq.n	8003f1e <HAL_RCC_OscConfig+0x53a>
 8003f3c:	e059      	b.n	8003ff2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	4b2e      	ldr	r3, [pc, #184]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003f44:	4931      	ldr	r1, [pc, #196]	@ (800400c <HAL_RCC_OscConfig+0x628>)
 8003f46:	400a      	ands	r2, r1
 8003f48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f4a:	f7fd ff6d 	bl	8001e28 <HAL_GetTick>
 8003f4e:	0003      	movs	r3, r0
 8003f50:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f52:	e008      	b.n	8003f66 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f54:	f7fd ff68 	bl	8001e28 <HAL_GetTick>
 8003f58:	0002      	movs	r2, r0
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d901      	bls.n	8003f66 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e046      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f66:	4b25      	ldr	r3, [pc, #148]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	2380      	movs	r3, #128	@ 0x80
 8003f6c:	049b      	lsls	r3, r3, #18
 8003f6e:	4013      	ands	r3, r2
 8003f70:	d1f0      	bne.n	8003f54 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003f72:	4b22      	ldr	r3, [pc, #136]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003f74:	68da      	ldr	r2, [r3, #12]
 8003f76:	4b21      	ldr	r3, [pc, #132]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003f78:	4926      	ldr	r1, [pc, #152]	@ (8004014 <HAL_RCC_OscConfig+0x630>)
 8003f7a:	400a      	ands	r2, r1
 8003f7c:	60da      	str	r2, [r3, #12]
 8003f7e:	e038      	b.n	8003ff2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	69db      	ldr	r3, [r3, #28]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d101      	bne.n	8003f8c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e033      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8003ffc <HAL_RCC_OscConfig+0x618>)
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	2203      	movs	r2, #3
 8003f96:	401a      	ands	r2, r3
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d126      	bne.n	8003fee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	2270      	movs	r2, #112	@ 0x70
 8003fa4:	401a      	ands	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d11f      	bne.n	8003fee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	23fe      	movs	r3, #254	@ 0xfe
 8003fb2:	01db      	lsls	r3, r3, #7
 8003fb4:	401a      	ands	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fba:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d116      	bne.n	8003fee <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	23f8      	movs	r3, #248	@ 0xf8
 8003fc4:	039b      	lsls	r3, r3, #14
 8003fc6:	401a      	ands	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d10e      	bne.n	8003fee <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	23e0      	movs	r3, #224	@ 0xe0
 8003fd4:	051b      	lsls	r3, r3, #20
 8003fd6:	401a      	ands	r2, r3
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003fdc:	429a      	cmp	r2, r3
 8003fde:	d106      	bne.n	8003fee <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	0f5b      	lsrs	r3, r3, #29
 8003fe4:	075a      	lsls	r2, r3, #29
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d001      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e000      	b.n	8003ff4 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8003ff2:	2300      	movs	r3, #0
}
 8003ff4:	0018      	movs	r0, r3
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	b008      	add	sp, #32
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40021000 	.word	0x40021000
 8004000:	40007000 	.word	0x40007000
 8004004:	00001388 	.word	0x00001388
 8004008:	efffffff 	.word	0xefffffff
 800400c:	feffffff 	.word	0xfeffffff
 8004010:	11c1808c 	.word	0x11c1808c
 8004014:	eefefffc 	.word	0xeefefffc

08004018 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b084      	sub	sp, #16
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e0e9      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800402c:	4b76      	ldr	r3, [pc, #472]	@ (8004208 <HAL_RCC_ClockConfig+0x1f0>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2207      	movs	r2, #7
 8004032:	4013      	ands	r3, r2
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	429a      	cmp	r2, r3
 8004038:	d91e      	bls.n	8004078 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800403a:	4b73      	ldr	r3, [pc, #460]	@ (8004208 <HAL_RCC_ClockConfig+0x1f0>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	2207      	movs	r2, #7
 8004040:	4393      	bics	r3, r2
 8004042:	0019      	movs	r1, r3
 8004044:	4b70      	ldr	r3, [pc, #448]	@ (8004208 <HAL_RCC_ClockConfig+0x1f0>)
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800404c:	f7fd feec 	bl	8001e28 <HAL_GetTick>
 8004050:	0003      	movs	r3, r0
 8004052:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004054:	e009      	b.n	800406a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004056:	f7fd fee7 	bl	8001e28 <HAL_GetTick>
 800405a:	0002      	movs	r2, r0
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	4a6a      	ldr	r2, [pc, #424]	@ (800420c <HAL_RCC_ClockConfig+0x1f4>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d901      	bls.n	800406a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e0ca      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800406a:	4b67      	ldr	r3, [pc, #412]	@ (8004208 <HAL_RCC_ClockConfig+0x1f0>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2207      	movs	r2, #7
 8004070:	4013      	ands	r3, r2
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	429a      	cmp	r2, r3
 8004076:	d1ee      	bne.n	8004056 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2202      	movs	r2, #2
 800407e:	4013      	ands	r3, r2
 8004080:	d015      	beq.n	80040ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2204      	movs	r2, #4
 8004088:	4013      	ands	r3, r2
 800408a:	d006      	beq.n	800409a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800408c:	4b60      	ldr	r3, [pc, #384]	@ (8004210 <HAL_RCC_ClockConfig+0x1f8>)
 800408e:	689a      	ldr	r2, [r3, #8]
 8004090:	4b5f      	ldr	r3, [pc, #380]	@ (8004210 <HAL_RCC_ClockConfig+0x1f8>)
 8004092:	21e0      	movs	r1, #224	@ 0xe0
 8004094:	01c9      	lsls	r1, r1, #7
 8004096:	430a      	orrs	r2, r1
 8004098:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800409a:	4b5d      	ldr	r3, [pc, #372]	@ (8004210 <HAL_RCC_ClockConfig+0x1f8>)
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	4a5d      	ldr	r2, [pc, #372]	@ (8004214 <HAL_RCC_ClockConfig+0x1fc>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	0019      	movs	r1, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	4b59      	ldr	r3, [pc, #356]	@ (8004210 <HAL_RCC_ClockConfig+0x1f8>)
 80040aa:	430a      	orrs	r2, r1
 80040ac:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2201      	movs	r2, #1
 80040b4:	4013      	ands	r3, r2
 80040b6:	d057      	beq.n	8004168 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d107      	bne.n	80040d0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040c0:	4b53      	ldr	r3, [pc, #332]	@ (8004210 <HAL_RCC_ClockConfig+0x1f8>)
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	2380      	movs	r3, #128	@ 0x80
 80040c6:	029b      	lsls	r3, r3, #10
 80040c8:	4013      	ands	r3, r2
 80040ca:	d12b      	bne.n	8004124 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e097      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d107      	bne.n	80040e8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004210 <HAL_RCC_ClockConfig+0x1f8>)
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	2380      	movs	r3, #128	@ 0x80
 80040de:	049b      	lsls	r3, r3, #18
 80040e0:	4013      	ands	r3, r2
 80040e2:	d11f      	bne.n	8004124 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	e08b      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d107      	bne.n	8004100 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040f0:	4b47      	ldr	r3, [pc, #284]	@ (8004210 <HAL_RCC_ClockConfig+0x1f8>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	2380      	movs	r3, #128	@ 0x80
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	4013      	ands	r3, r2
 80040fa:	d113      	bne.n	8004124 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	e07f      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d106      	bne.n	8004116 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004108:	4b41      	ldr	r3, [pc, #260]	@ (8004210 <HAL_RCC_ClockConfig+0x1f8>)
 800410a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410c:	2202      	movs	r2, #2
 800410e:	4013      	ands	r3, r2
 8004110:	d108      	bne.n	8004124 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e074      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004116:	4b3e      	ldr	r3, [pc, #248]	@ (8004210 <HAL_RCC_ClockConfig+0x1f8>)
 8004118:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800411a:	2202      	movs	r2, #2
 800411c:	4013      	ands	r3, r2
 800411e:	d101      	bne.n	8004124 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	e06d      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004124:	4b3a      	ldr	r3, [pc, #232]	@ (8004210 <HAL_RCC_ClockConfig+0x1f8>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	2207      	movs	r2, #7
 800412a:	4393      	bics	r3, r2
 800412c:	0019      	movs	r1, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	4b37      	ldr	r3, [pc, #220]	@ (8004210 <HAL_RCC_ClockConfig+0x1f8>)
 8004134:	430a      	orrs	r2, r1
 8004136:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004138:	f7fd fe76 	bl	8001e28 <HAL_GetTick>
 800413c:	0003      	movs	r3, r0
 800413e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004140:	e009      	b.n	8004156 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004142:	f7fd fe71 	bl	8001e28 <HAL_GetTick>
 8004146:	0002      	movs	r2, r0
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	4a2f      	ldr	r2, [pc, #188]	@ (800420c <HAL_RCC_ClockConfig+0x1f4>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e054      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004156:	4b2e      	ldr	r3, [pc, #184]	@ (8004210 <HAL_RCC_ClockConfig+0x1f8>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	2238      	movs	r2, #56	@ 0x38
 800415c:	401a      	ands	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	429a      	cmp	r2, r3
 8004166:	d1ec      	bne.n	8004142 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004168:	4b27      	ldr	r3, [pc, #156]	@ (8004208 <HAL_RCC_ClockConfig+0x1f0>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2207      	movs	r2, #7
 800416e:	4013      	ands	r3, r2
 8004170:	683a      	ldr	r2, [r7, #0]
 8004172:	429a      	cmp	r2, r3
 8004174:	d21e      	bcs.n	80041b4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004176:	4b24      	ldr	r3, [pc, #144]	@ (8004208 <HAL_RCC_ClockConfig+0x1f0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2207      	movs	r2, #7
 800417c:	4393      	bics	r3, r2
 800417e:	0019      	movs	r1, r3
 8004180:	4b21      	ldr	r3, [pc, #132]	@ (8004208 <HAL_RCC_ClockConfig+0x1f0>)
 8004182:	683a      	ldr	r2, [r7, #0]
 8004184:	430a      	orrs	r2, r1
 8004186:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004188:	f7fd fe4e 	bl	8001e28 <HAL_GetTick>
 800418c:	0003      	movs	r3, r0
 800418e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004190:	e009      	b.n	80041a6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004192:	f7fd fe49 	bl	8001e28 <HAL_GetTick>
 8004196:	0002      	movs	r2, r0
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	4a1b      	ldr	r2, [pc, #108]	@ (800420c <HAL_RCC_ClockConfig+0x1f4>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d901      	bls.n	80041a6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80041a2:	2303      	movs	r3, #3
 80041a4:	e02c      	b.n	8004200 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80041a6:	4b18      	ldr	r3, [pc, #96]	@ (8004208 <HAL_RCC_ClockConfig+0x1f0>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2207      	movs	r2, #7
 80041ac:	4013      	ands	r3, r2
 80041ae:	683a      	ldr	r2, [r7, #0]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d1ee      	bne.n	8004192 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	2204      	movs	r2, #4
 80041ba:	4013      	ands	r3, r2
 80041bc:	d009      	beq.n	80041d2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80041be:	4b14      	ldr	r3, [pc, #80]	@ (8004210 <HAL_RCC_ClockConfig+0x1f8>)
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	4a15      	ldr	r2, [pc, #84]	@ (8004218 <HAL_RCC_ClockConfig+0x200>)
 80041c4:	4013      	ands	r3, r2
 80041c6:	0019      	movs	r1, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	68da      	ldr	r2, [r3, #12]
 80041cc:	4b10      	ldr	r3, [pc, #64]	@ (8004210 <HAL_RCC_ClockConfig+0x1f8>)
 80041ce:	430a      	orrs	r2, r1
 80041d0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80041d2:	f000 f829 	bl	8004228 <HAL_RCC_GetSysClockFreq>
 80041d6:	0001      	movs	r1, r0
 80041d8:	4b0d      	ldr	r3, [pc, #52]	@ (8004210 <HAL_RCC_ClockConfig+0x1f8>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	0a1b      	lsrs	r3, r3, #8
 80041de:	220f      	movs	r2, #15
 80041e0:	401a      	ands	r2, r3
 80041e2:	4b0e      	ldr	r3, [pc, #56]	@ (800421c <HAL_RCC_ClockConfig+0x204>)
 80041e4:	0092      	lsls	r2, r2, #2
 80041e6:	58d3      	ldr	r3, [r2, r3]
 80041e8:	221f      	movs	r2, #31
 80041ea:	4013      	ands	r3, r2
 80041ec:	000a      	movs	r2, r1
 80041ee:	40da      	lsrs	r2, r3
 80041f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004220 <HAL_RCC_ClockConfig+0x208>)
 80041f2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80041f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004224 <HAL_RCC_ClockConfig+0x20c>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	0018      	movs	r0, r3
 80041fa:	f7fd fdb9 	bl	8001d70 <HAL_InitTick>
 80041fe:	0003      	movs	r3, r0
}
 8004200:	0018      	movs	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	b004      	add	sp, #16
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40022000 	.word	0x40022000
 800420c:	00001388 	.word	0x00001388
 8004210:	40021000 	.word	0x40021000
 8004214:	fffff0ff 	.word	0xfffff0ff
 8004218:	ffff8fff 	.word	0xffff8fff
 800421c:	08005538 	.word	0x08005538
 8004220:	20000000 	.word	0x20000000
 8004224:	20000004 	.word	0x20000004

08004228 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b086      	sub	sp, #24
 800422c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800422e:	4b3c      	ldr	r3, [pc, #240]	@ (8004320 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004230:	689b      	ldr	r3, [r3, #8]
 8004232:	2238      	movs	r2, #56	@ 0x38
 8004234:	4013      	ands	r3, r2
 8004236:	d10f      	bne.n	8004258 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004238:	4b39      	ldr	r3, [pc, #228]	@ (8004320 <HAL_RCC_GetSysClockFreq+0xf8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0adb      	lsrs	r3, r3, #11
 800423e:	2207      	movs	r2, #7
 8004240:	4013      	ands	r3, r2
 8004242:	2201      	movs	r2, #1
 8004244:	409a      	lsls	r2, r3
 8004246:	0013      	movs	r3, r2
 8004248:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800424a:	6839      	ldr	r1, [r7, #0]
 800424c:	4835      	ldr	r0, [pc, #212]	@ (8004324 <HAL_RCC_GetSysClockFreq+0xfc>)
 800424e:	f7fb ff59 	bl	8000104 <__udivsi3>
 8004252:	0003      	movs	r3, r0
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	e05d      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004258:	4b31      	ldr	r3, [pc, #196]	@ (8004320 <HAL_RCC_GetSysClockFreq+0xf8>)
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2238      	movs	r2, #56	@ 0x38
 800425e:	4013      	ands	r3, r2
 8004260:	2b08      	cmp	r3, #8
 8004262:	d102      	bne.n	800426a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004264:	4b30      	ldr	r3, [pc, #192]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x100>)
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	e054      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800426a:	4b2d      	ldr	r3, [pc, #180]	@ (8004320 <HAL_RCC_GetSysClockFreq+0xf8>)
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2238      	movs	r2, #56	@ 0x38
 8004270:	4013      	ands	r3, r2
 8004272:	2b10      	cmp	r3, #16
 8004274:	d138      	bne.n	80042e8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004276:	4b2a      	ldr	r3, [pc, #168]	@ (8004320 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004278:	68db      	ldr	r3, [r3, #12]
 800427a:	2203      	movs	r2, #3
 800427c:	4013      	ands	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004280:	4b27      	ldr	r3, [pc, #156]	@ (8004320 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	2207      	movs	r2, #7
 8004288:	4013      	ands	r3, r2
 800428a:	3301      	adds	r3, #1
 800428c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2b03      	cmp	r3, #3
 8004292:	d10d      	bne.n	80042b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004294:	68b9      	ldr	r1, [r7, #8]
 8004296:	4824      	ldr	r0, [pc, #144]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x100>)
 8004298:	f7fb ff34 	bl	8000104 <__udivsi3>
 800429c:	0003      	movs	r3, r0
 800429e:	0019      	movs	r1, r3
 80042a0:	4b1f      	ldr	r3, [pc, #124]	@ (8004320 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	0a1b      	lsrs	r3, r3, #8
 80042a6:	227f      	movs	r2, #127	@ 0x7f
 80042a8:	4013      	ands	r3, r2
 80042aa:	434b      	muls	r3, r1
 80042ac:	617b      	str	r3, [r7, #20]
        break;
 80042ae:	e00d      	b.n	80042cc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80042b0:	68b9      	ldr	r1, [r7, #8]
 80042b2:	481c      	ldr	r0, [pc, #112]	@ (8004324 <HAL_RCC_GetSysClockFreq+0xfc>)
 80042b4:	f7fb ff26 	bl	8000104 <__udivsi3>
 80042b8:	0003      	movs	r3, r0
 80042ba:	0019      	movs	r1, r3
 80042bc:	4b18      	ldr	r3, [pc, #96]	@ (8004320 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	0a1b      	lsrs	r3, r3, #8
 80042c2:	227f      	movs	r2, #127	@ 0x7f
 80042c4:	4013      	ands	r3, r2
 80042c6:	434b      	muls	r3, r1
 80042c8:	617b      	str	r3, [r7, #20]
        break;
 80042ca:	46c0      	nop			@ (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80042cc:	4b14      	ldr	r3, [pc, #80]	@ (8004320 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	0f5b      	lsrs	r3, r3, #29
 80042d2:	2207      	movs	r2, #7
 80042d4:	4013      	ands	r3, r2
 80042d6:	3301      	adds	r3, #1
 80042d8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80042da:	6879      	ldr	r1, [r7, #4]
 80042dc:	6978      	ldr	r0, [r7, #20]
 80042de:	f7fb ff11 	bl	8000104 <__udivsi3>
 80042e2:	0003      	movs	r3, r0
 80042e4:	613b      	str	r3, [r7, #16]
 80042e6:	e015      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80042e8:	4b0d      	ldr	r3, [pc, #52]	@ (8004320 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2238      	movs	r2, #56	@ 0x38
 80042ee:	4013      	ands	r3, r2
 80042f0:	2b20      	cmp	r3, #32
 80042f2:	d103      	bne.n	80042fc <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80042f4:	2380      	movs	r3, #128	@ 0x80
 80042f6:	021b      	lsls	r3, r3, #8
 80042f8:	613b      	str	r3, [r7, #16]
 80042fa:	e00b      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80042fc:	4b08      	ldr	r3, [pc, #32]	@ (8004320 <HAL_RCC_GetSysClockFreq+0xf8>)
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2238      	movs	r2, #56	@ 0x38
 8004302:	4013      	ands	r3, r2
 8004304:	2b18      	cmp	r3, #24
 8004306:	d103      	bne.n	8004310 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004308:	23fa      	movs	r3, #250	@ 0xfa
 800430a:	01db      	lsls	r3, r3, #7
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	e001      	b.n	8004314 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004310:	2300      	movs	r3, #0
 8004312:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004314:	693b      	ldr	r3, [r7, #16]
}
 8004316:	0018      	movs	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	b006      	add	sp, #24
 800431c:	bd80      	pop	{r7, pc}
 800431e:	46c0      	nop			@ (mov r8, r8)
 8004320:	40021000 	.word	0x40021000
 8004324:	00f42400 	.word	0x00f42400
 8004328:	007a1200 	.word	0x007a1200

0800432c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b086      	sub	sp, #24
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004334:	2313      	movs	r3, #19
 8004336:	18fb      	adds	r3, r7, r3
 8004338:	2200      	movs	r2, #0
 800433a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800433c:	2312      	movs	r3, #18
 800433e:	18fb      	adds	r3, r7, r3
 8004340:	2200      	movs	r2, #0
 8004342:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	2380      	movs	r3, #128	@ 0x80
 800434a:	029b      	lsls	r3, r3, #10
 800434c:	4013      	ands	r3, r2
 800434e:	d100      	bne.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004350:	e0a3      	b.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004352:	2011      	movs	r0, #17
 8004354:	183b      	adds	r3, r7, r0
 8004356:	2200      	movs	r2, #0
 8004358:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800435a:	4ba5      	ldr	r3, [pc, #660]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800435c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800435e:	2380      	movs	r3, #128	@ 0x80
 8004360:	055b      	lsls	r3, r3, #21
 8004362:	4013      	ands	r3, r2
 8004364:	d110      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004366:	4ba2      	ldr	r3, [pc, #648]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004368:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800436a:	4ba1      	ldr	r3, [pc, #644]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800436c:	2180      	movs	r1, #128	@ 0x80
 800436e:	0549      	lsls	r1, r1, #21
 8004370:	430a      	orrs	r2, r1
 8004372:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004374:	4b9e      	ldr	r3, [pc, #632]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004376:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004378:	2380      	movs	r3, #128	@ 0x80
 800437a:	055b      	lsls	r3, r3, #21
 800437c:	4013      	ands	r3, r2
 800437e:	60bb      	str	r3, [r7, #8]
 8004380:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004382:	183b      	adds	r3, r7, r0
 8004384:	2201      	movs	r2, #1
 8004386:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004388:	4b9a      	ldr	r3, [pc, #616]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800438a:	681a      	ldr	r2, [r3, #0]
 800438c:	4b99      	ldr	r3, [pc, #612]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 800438e:	2180      	movs	r1, #128	@ 0x80
 8004390:	0049      	lsls	r1, r1, #1
 8004392:	430a      	orrs	r2, r1
 8004394:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004396:	f7fd fd47 	bl	8001e28 <HAL_GetTick>
 800439a:	0003      	movs	r3, r0
 800439c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800439e:	e00b      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043a0:	f7fd fd42 	bl	8001e28 <HAL_GetTick>
 80043a4:	0002      	movs	r2, r0
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	1ad3      	subs	r3, r2, r3
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d904      	bls.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80043ae:	2313      	movs	r3, #19
 80043b0:	18fb      	adds	r3, r7, r3
 80043b2:	2203      	movs	r2, #3
 80043b4:	701a      	strb	r2, [r3, #0]
        break;
 80043b6:	e005      	b.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043b8:	4b8e      	ldr	r3, [pc, #568]	@ (80045f4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>)
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	2380      	movs	r3, #128	@ 0x80
 80043be:	005b      	lsls	r3, r3, #1
 80043c0:	4013      	ands	r3, r2
 80043c2:	d0ed      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80043c4:	2313      	movs	r3, #19
 80043c6:	18fb      	adds	r3, r7, r3
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d154      	bne.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043ce:	4b88      	ldr	r3, [pc, #544]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043d0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043d2:	23c0      	movs	r3, #192	@ 0xc0
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	4013      	ands	r3, r2
 80043d8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d019      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d014      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043ea:	4b81      	ldr	r3, [pc, #516]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043ee:	4a82      	ldr	r2, [pc, #520]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 80043f0:	4013      	ands	r3, r2
 80043f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043f4:	4b7e      	ldr	r3, [pc, #504]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043f6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80043f8:	4b7d      	ldr	r3, [pc, #500]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80043fa:	2180      	movs	r1, #128	@ 0x80
 80043fc:	0249      	lsls	r1, r1, #9
 80043fe:	430a      	orrs	r2, r1
 8004400:	65da      	str	r2, [r3, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004402:	4b7b      	ldr	r3, [pc, #492]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004404:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004406:	4b7a      	ldr	r3, [pc, #488]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004408:	497c      	ldr	r1, [pc, #496]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>)
 800440a:	400a      	ands	r2, r1
 800440c:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800440e:	4b78      	ldr	r3, [pc, #480]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	2201      	movs	r2, #1
 8004418:	4013      	ands	r3, r2
 800441a:	d016      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800441c:	f7fd fd04 	bl	8001e28 <HAL_GetTick>
 8004420:	0003      	movs	r3, r0
 8004422:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004424:	e00c      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004426:	f7fd fcff 	bl	8001e28 <HAL_GetTick>
 800442a:	0002      	movs	r2, r0
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	1ad3      	subs	r3, r2, r3
 8004430:	4a73      	ldr	r2, [pc, #460]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d904      	bls.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8004436:	2313      	movs	r3, #19
 8004438:	18fb      	adds	r3, r7, r3
 800443a:	2203      	movs	r2, #3
 800443c:	701a      	strb	r2, [r3, #0]
            break;
 800443e:	e004      	b.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004440:	4b6b      	ldr	r3, [pc, #428]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004444:	2202      	movs	r2, #2
 8004446:	4013      	ands	r3, r2
 8004448:	d0ed      	beq.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 800444a:	2313      	movs	r3, #19
 800444c:	18fb      	adds	r3, r7, r3
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d10a      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004454:	4b66      	ldr	r3, [pc, #408]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004458:	4a67      	ldr	r2, [pc, #412]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x2cc>)
 800445a:	4013      	ands	r3, r2
 800445c:	0019      	movs	r1, r3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004462:	4b63      	ldr	r3, [pc, #396]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004464:	430a      	orrs	r2, r1
 8004466:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004468:	e00c      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800446a:	2312      	movs	r3, #18
 800446c:	18fb      	adds	r3, r7, r3
 800446e:	2213      	movs	r2, #19
 8004470:	18ba      	adds	r2, r7, r2
 8004472:	7812      	ldrb	r2, [r2, #0]
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	e005      	b.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004478:	2312      	movs	r3, #18
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	2213      	movs	r2, #19
 800447e:	18ba      	adds	r2, r7, r2
 8004480:	7812      	ldrb	r2, [r2, #0]
 8004482:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004484:	2311      	movs	r3, #17
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d105      	bne.n	800449a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800448e:	4b58      	ldr	r3, [pc, #352]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004490:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004492:	4b57      	ldr	r3, [pc, #348]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004494:	495b      	ldr	r1, [pc, #364]	@ (8004604 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
 8004496:	400a      	ands	r2, r1
 8004498:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2201      	movs	r2, #1
 80044a0:	4013      	ands	r3, r2
 80044a2:	d009      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044a4:	4b52      	ldr	r3, [pc, #328]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a8:	2203      	movs	r2, #3
 80044aa:	4393      	bics	r3, r2
 80044ac:	0019      	movs	r1, r3
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685a      	ldr	r2, [r3, #4]
 80044b2:	4b4f      	ldr	r3, [pc, #316]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044b4:	430a      	orrs	r2, r1
 80044b6:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	2210      	movs	r2, #16
 80044be:	4013      	ands	r3, r2
 80044c0:	d009      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80044c2:	4b4b      	ldr	r3, [pc, #300]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c6:	4a50      	ldr	r2, [pc, #320]	@ (8004608 <HAL_RCCEx_PeriphCLKConfig+0x2dc>)
 80044c8:	4013      	ands	r3, r2
 80044ca:	0019      	movs	r1, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	4b47      	ldr	r3, [pc, #284]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044d2:	430a      	orrs	r2, r1
 80044d4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	2380      	movs	r3, #128	@ 0x80
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4013      	ands	r3, r2
 80044e0:	d009      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80044e2:	4b43      	ldr	r3, [pc, #268]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e6:	4a49      	ldr	r2, [pc, #292]	@ (800460c <HAL_RCCEx_PeriphCLKConfig+0x2e0>)
 80044e8:	4013      	ands	r3, r2
 80044ea:	0019      	movs	r1, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	695a      	ldr	r2, [r3, #20]
 80044f0:	4b3f      	ldr	r3, [pc, #252]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80044f2:	430a      	orrs	r2, r1
 80044f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	2380      	movs	r3, #128	@ 0x80
 80044fc:	00db      	lsls	r3, r3, #3
 80044fe:	4013      	ands	r3, r2
 8004500:	d009      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004502:	4b3b      	ldr	r3, [pc, #236]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004504:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004506:	4a42      	ldr	r2, [pc, #264]	@ (8004610 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8004508:	4013      	ands	r3, r2
 800450a:	0019      	movs	r1, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	699a      	ldr	r2, [r3, #24]
 8004510:	4b37      	ldr	r3, [pc, #220]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004512:	430a      	orrs	r2, r1
 8004514:	655a      	str	r2, [r3, #84]	@ 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2220      	movs	r2, #32
 800451c:	4013      	ands	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004520:	4b33      	ldr	r3, [pc, #204]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004524:	4a3b      	ldr	r2, [pc, #236]	@ (8004614 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8004526:	4013      	ands	r3, r2
 8004528:	0019      	movs	r1, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68da      	ldr	r2, [r3, #12]
 800452e:	4b30      	ldr	r3, [pc, #192]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004530:	430a      	orrs	r2, r1
 8004532:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	2380      	movs	r3, #128	@ 0x80
 800453a:	01db      	lsls	r3, r3, #7
 800453c:	4013      	ands	r3, r2
 800453e:	d015      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004540:	4b2b      	ldr	r3, [pc, #172]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004542:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004544:	009b      	lsls	r3, r3, #2
 8004546:	0899      	lsrs	r1, r3, #2
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69da      	ldr	r2, [r3, #28]
 800454c:	4b28      	ldr	r3, [pc, #160]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800454e:	430a      	orrs	r2, r1
 8004550:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	69da      	ldr	r2, [r3, #28]
 8004556:	2380      	movs	r3, #128	@ 0x80
 8004558:	05db      	lsls	r3, r3, #23
 800455a:	429a      	cmp	r2, r3
 800455c:	d106      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x240>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800455e:	4b24      	ldr	r3, [pc, #144]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004560:	68da      	ldr	r2, [r3, #12]
 8004562:	4b23      	ldr	r3, [pc, #140]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004564:	2180      	movs	r1, #128	@ 0x80
 8004566:	0249      	lsls	r1, r1, #9
 8004568:	430a      	orrs	r2, r1
 800456a:	60da      	str	r2, [r3, #12]
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	2380      	movs	r3, #128	@ 0x80
 8004572:	039b      	lsls	r3, r3, #14
 8004574:	4013      	ands	r3, r2
 8004576:	d016      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004578:	4b1d      	ldr	r3, [pc, #116]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800457a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800457c:	4a26      	ldr	r2, [pc, #152]	@ (8004618 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 800457e:	4013      	ands	r3, r2
 8004580:	0019      	movs	r1, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a1a      	ldr	r2, [r3, #32]
 8004586:	4b1a      	ldr	r3, [pc, #104]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 8004588:	430a      	orrs	r2, r1
 800458a:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1a      	ldr	r2, [r3, #32]
 8004590:	2380      	movs	r3, #128	@ 0x80
 8004592:	03db      	lsls	r3, r3, #15
 8004594:	429a      	cmp	r2, r3
 8004596:	d106      	bne.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8004598:	4b15      	ldr	r3, [pc, #84]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800459a:	68da      	ldr	r2, [r3, #12]
 800459c:	4b14      	ldr	r3, [pc, #80]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 800459e:	2180      	movs	r1, #128	@ 0x80
 80045a0:	0449      	lsls	r1, r1, #17
 80045a2:	430a      	orrs	r2, r1
 80045a4:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681a      	ldr	r2, [r3, #0]
 80045aa:	2380      	movs	r3, #128	@ 0x80
 80045ac:	011b      	lsls	r3, r3, #4
 80045ae:	4013      	ands	r3, r2
 80045b0:	d016      	beq.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80045b2:	4b0f      	ldr	r3, [pc, #60]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045b6:	4a19      	ldr	r2, [pc, #100]	@ (800461c <HAL_RCCEx_PeriphCLKConfig+0x2f0>)
 80045b8:	4013      	ands	r3, r2
 80045ba:	0019      	movs	r1, r3
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	4b0b      	ldr	r3, [pc, #44]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045c2:	430a      	orrs	r2, r1
 80045c4:	655a      	str	r2, [r3, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691a      	ldr	r2, [r3, #16]
 80045ca:	2380      	movs	r3, #128	@ 0x80
 80045cc:	01db      	lsls	r3, r3, #7
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d106      	bne.n	80045e0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80045d2:	4b07      	ldr	r3, [pc, #28]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	4b06      	ldr	r3, [pc, #24]	@ (80045f0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>)
 80045d8:	2180      	movs	r1, #128	@ 0x80
 80045da:	0249      	lsls	r1, r1, #9
 80045dc:	430a      	orrs	r2, r1
 80045de:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80045e0:	2312      	movs	r3, #18
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	781b      	ldrb	r3, [r3, #0]
}
 80045e6:	0018      	movs	r0, r3
 80045e8:	46bd      	mov	sp, r7
 80045ea:	b006      	add	sp, #24
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	46c0      	nop			@ (mov r8, r8)
 80045f0:	40021000 	.word	0x40021000
 80045f4:	40007000 	.word	0x40007000
 80045f8:	fffffcff 	.word	0xfffffcff
 80045fc:	fffeffff 	.word	0xfffeffff
 8004600:	00001388 	.word	0x00001388
 8004604:	efffffff 	.word	0xefffffff
 8004608:	fffff3ff 	.word	0xfffff3ff
 800460c:	fff3ffff 	.word	0xfff3ffff
 8004610:	ffcfffff 	.word	0xffcfffff
 8004614:	ffffcfff 	.word	0xffffcfff
 8004618:	ffbfffff 	.word	0xffbfffff
 800461c:	ffff3fff 	.word	0xffff3fff

08004620 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d101      	bne.n	8004632 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800462e:	2301      	movs	r3, #1
 8004630:	e0a8      	b.n	8004784 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	2382      	movs	r3, #130	@ 0x82
 8004640:	005b      	lsls	r3, r3, #1
 8004642:	429a      	cmp	r2, r3
 8004644:	d009      	beq.n	800465a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	61da      	str	r2, [r3, #28]
 800464c:	e005      	b.n	800465a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	225d      	movs	r2, #93	@ 0x5d
 8004664:	5c9b      	ldrb	r3, [r3, r2]
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d107      	bne.n	800467c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	225c      	movs	r2, #92	@ 0x5c
 8004670:	2100      	movs	r1, #0
 8004672:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	0018      	movs	r0, r3
 8004678:	f7fd fa84 	bl	8001b84 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	225d      	movs	r2, #93	@ 0x5d
 8004680:	2102      	movs	r1, #2
 8004682:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681a      	ldr	r2, [r3, #0]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2140      	movs	r1, #64	@ 0x40
 8004690:	438a      	bics	r2, r1
 8004692:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	68da      	ldr	r2, [r3, #12]
 8004698:	23e0      	movs	r3, #224	@ 0xe0
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	429a      	cmp	r2, r3
 800469e:	d902      	bls.n	80046a6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	e002      	b.n	80046ac <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80046a6:	2380      	movs	r3, #128	@ 0x80
 80046a8:	015b      	lsls	r3, r3, #5
 80046aa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	68da      	ldr	r2, [r3, #12]
 80046b0:	23f0      	movs	r3, #240	@ 0xf0
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d008      	beq.n	80046ca <HAL_SPI_Init+0xaa>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	23e0      	movs	r3, #224	@ 0xe0
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d002      	beq.n	80046ca <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	2382      	movs	r3, #130	@ 0x82
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	401a      	ands	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6899      	ldr	r1, [r3, #8]
 80046d8:	2384      	movs	r3, #132	@ 0x84
 80046da:	021b      	lsls	r3, r3, #8
 80046dc:	400b      	ands	r3, r1
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	2102      	movs	r1, #2
 80046e6:	400b      	ands	r3, r1
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	695b      	ldr	r3, [r3, #20]
 80046ee:	2101      	movs	r1, #1
 80046f0:	400b      	ands	r3, r1
 80046f2:	431a      	orrs	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6999      	ldr	r1, [r3, #24]
 80046f8:	2380      	movs	r3, #128	@ 0x80
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	400b      	ands	r3, r1
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	2138      	movs	r1, #56	@ 0x38
 8004706:	400b      	ands	r3, r1
 8004708:	431a      	orrs	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a1b      	ldr	r3, [r3, #32]
 800470e:	2180      	movs	r1, #128	@ 0x80
 8004710:	400b      	ands	r3, r1
 8004712:	431a      	orrs	r2, r3
 8004714:	0011      	movs	r1, r2
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800471a:	2380      	movs	r3, #128	@ 0x80
 800471c:	019b      	lsls	r3, r3, #6
 800471e:	401a      	ands	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	430a      	orrs	r2, r1
 8004726:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	0c1b      	lsrs	r3, r3, #16
 800472e:	2204      	movs	r2, #4
 8004730:	401a      	ands	r2, r3
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004736:	2110      	movs	r1, #16
 8004738:	400b      	ands	r3, r1
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004740:	2108      	movs	r1, #8
 8004742:	400b      	ands	r3, r1
 8004744:	431a      	orrs	r2, r3
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	68d9      	ldr	r1, [r3, #12]
 800474a:	23f0      	movs	r3, #240	@ 0xf0
 800474c:	011b      	lsls	r3, r3, #4
 800474e:	400b      	ands	r3, r1
 8004750:	431a      	orrs	r2, r3
 8004752:	0011      	movs	r1, r2
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	2380      	movs	r3, #128	@ 0x80
 8004758:	015b      	lsls	r3, r3, #5
 800475a:	401a      	ands	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	69da      	ldr	r2, [r3, #28]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4907      	ldr	r1, [pc, #28]	@ (800478c <HAL_SPI_Init+0x16c>)
 8004770:	400a      	ands	r2, r1
 8004772:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	225d      	movs	r2, #93	@ 0x5d
 800477e:	2101      	movs	r1, #1
 8004780:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	0018      	movs	r0, r3
 8004786:	46bd      	mov	sp, r7
 8004788:	b004      	add	sp, #16
 800478a:	bd80      	pop	{r7, pc}
 800478c:	fffff7ff 	.word	0xfffff7ff

08004790 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08a      	sub	sp, #40	@ 0x28
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	001a      	movs	r2, r3
 800479e:	1cbb      	adds	r3, r7, #2
 80047a0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80047a2:	2301      	movs	r3, #1
 80047a4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80047a6:	2323      	movs	r3, #35	@ 0x23
 80047a8:	18fb      	adds	r3, r7, r3
 80047aa:	2200      	movs	r2, #0
 80047ac:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	225c      	movs	r2, #92	@ 0x5c
 80047b2:	5c9b      	ldrb	r3, [r3, r2]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_SPI_TransmitReceive+0x2c>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e1c4      	b.n	8004b46 <HAL_SPI_TransmitReceive+0x3b6>
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	225c      	movs	r2, #92	@ 0x5c
 80047c0:	2101      	movs	r1, #1
 80047c2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80047c4:	f7fd fb30 	bl	8001e28 <HAL_GetTick>
 80047c8:	0003      	movs	r3, r0
 80047ca:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80047cc:	201b      	movs	r0, #27
 80047ce:	183b      	adds	r3, r7, r0
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	215d      	movs	r1, #93	@ 0x5d
 80047d4:	5c52      	ldrb	r2, [r2, r1]
 80047d6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80047de:	2312      	movs	r3, #18
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	1cba      	adds	r2, r7, #2
 80047e4:	8812      	ldrh	r2, [r2, #0]
 80047e6:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80047e8:	183b      	adds	r3, r7, r0
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d011      	beq.n	8004814 <HAL_SPI_TransmitReceive+0x84>
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	2382      	movs	r3, #130	@ 0x82
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d107      	bne.n	800480a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d103      	bne.n	800480a <HAL_SPI_TransmitReceive+0x7a>
 8004802:	183b      	adds	r3, r7, r0
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b04      	cmp	r3, #4
 8004808:	d004      	beq.n	8004814 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800480a:	2323      	movs	r3, #35	@ 0x23
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	2202      	movs	r2, #2
 8004810:	701a      	strb	r2, [r3, #0]
    goto error;
 8004812:	e191      	b.n	8004b38 <HAL_SPI_TransmitReceive+0x3a8>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d006      	beq.n	8004828 <HAL_SPI_TransmitReceive+0x98>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <HAL_SPI_TransmitReceive+0x98>
 8004820:	1cbb      	adds	r3, r7, #2
 8004822:	881b      	ldrh	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d104      	bne.n	8004832 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8004828:	2323      	movs	r3, #35	@ 0x23
 800482a:	18fb      	adds	r3, r7, r3
 800482c:	2201      	movs	r2, #1
 800482e:	701a      	strb	r2, [r3, #0]
    goto error;
 8004830:	e182      	b.n	8004b38 <HAL_SPI_TransmitReceive+0x3a8>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	225d      	movs	r2, #93	@ 0x5d
 8004836:	5c9b      	ldrb	r3, [r3, r2]
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b04      	cmp	r3, #4
 800483c:	d003      	beq.n	8004846 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	225d      	movs	r2, #93	@ 0x5d
 8004842:	2105      	movs	r1, #5
 8004844:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2200      	movs	r2, #0
 800484a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	1cba      	adds	r2, r7, #2
 8004856:	2146      	movs	r1, #70	@ 0x46
 8004858:	8812      	ldrh	r2, [r2, #0]
 800485a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	1cba      	adds	r2, r7, #2
 8004860:	2144      	movs	r1, #68	@ 0x44
 8004862:	8812      	ldrh	r2, [r2, #0]
 8004864:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	68ba      	ldr	r2, [r7, #8]
 800486a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	1cba      	adds	r2, r7, #2
 8004870:	8812      	ldrh	r2, [r2, #0]
 8004872:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	1cba      	adds	r2, r7, #2
 8004878:	8812      	ldrh	r2, [r2, #0]
 800487a:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	23e0      	movs	r3, #224	@ 0xe0
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	429a      	cmp	r2, r3
 8004892:	d908      	bls.n	80048a6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685a      	ldr	r2, [r3, #4]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	49ac      	ldr	r1, [pc, #688]	@ (8004b50 <HAL_SPI_TransmitReceive+0x3c0>)
 80048a0:	400a      	ands	r2, r1
 80048a2:	605a      	str	r2, [r3, #4]
 80048a4:	e008      	b.n	80048b8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	685a      	ldr	r2, [r3, #4]
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2180      	movs	r1, #128	@ 0x80
 80048b2:	0149      	lsls	r1, r1, #5
 80048b4:	430a      	orrs	r2, r1
 80048b6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2240      	movs	r2, #64	@ 0x40
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b40      	cmp	r3, #64	@ 0x40
 80048c4:	d007      	beq.n	80048d6 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2140      	movs	r1, #64	@ 0x40
 80048d2:	430a      	orrs	r2, r1
 80048d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68da      	ldr	r2, [r3, #12]
 80048da:	23e0      	movs	r3, #224	@ 0xe0
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	429a      	cmp	r2, r3
 80048e0:	d800      	bhi.n	80048e4 <HAL_SPI_TransmitReceive+0x154>
 80048e2:	e083      	b.n	80049ec <HAL_SPI_TransmitReceive+0x25c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_SPI_TransmitReceive+0x168>
 80048ec:	2312      	movs	r3, #18
 80048ee:	18fb      	adds	r3, r7, r3
 80048f0:	881b      	ldrh	r3, [r3, #0]
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d000      	beq.n	80048f8 <HAL_SPI_TransmitReceive+0x168>
 80048f6:	e06d      	b.n	80049d4 <HAL_SPI_TransmitReceive+0x244>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fc:	881a      	ldrh	r2, [r3, #0]
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004908:	1c9a      	adds	r2, r3, #2
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800491c:	e05a      	b.n	80049d4 <HAL_SPI_TransmitReceive+0x244>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	2202      	movs	r2, #2
 8004926:	4013      	ands	r3, r2
 8004928:	2b02      	cmp	r3, #2
 800492a:	d11b      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x1d4>
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d016      	beq.n	8004964 <HAL_SPI_TransmitReceive+0x1d4>
 8004936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004938:	2b01      	cmp	r3, #1
 800493a:	d113      	bne.n	8004964 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004940:	881a      	ldrh	r2, [r3, #0]
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800494c:	1c9a      	adds	r2, r3, #2
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004960:	2300      	movs	r3, #0
 8004962:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	2201      	movs	r2, #1
 800496c:	4013      	ands	r3, r2
 800496e:	2b01      	cmp	r3, #1
 8004970:	d11c      	bne.n	80049ac <HAL_SPI_TransmitReceive+0x21c>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2246      	movs	r2, #70	@ 0x46
 8004976:	5a9b      	ldrh	r3, [r3, r2]
 8004978:	b29b      	uxth	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d016      	beq.n	80049ac <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68da      	ldr	r2, [r3, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004988:	b292      	uxth	r2, r2
 800498a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004990:	1c9a      	adds	r2, r3, #2
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2246      	movs	r2, #70	@ 0x46
 800499a:	5a9b      	ldrh	r3, [r3, r2]
 800499c:	b29b      	uxth	r3, r3
 800499e:	3b01      	subs	r3, #1
 80049a0:	b299      	uxth	r1, r3
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2246      	movs	r2, #70	@ 0x46
 80049a6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80049a8:	2301      	movs	r3, #1
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80049ac:	f7fd fa3c 	bl	8001e28 <HAL_GetTick>
 80049b0:	0002      	movs	r2, r0
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	1ad3      	subs	r3, r2, r3
 80049b6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d80b      	bhi.n	80049d4 <HAL_SPI_TransmitReceive+0x244>
 80049bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049be:	3301      	adds	r3, #1
 80049c0:	d008      	beq.n	80049d4 <HAL_SPI_TransmitReceive+0x244>
      {
        errorcode = HAL_TIMEOUT;
 80049c2:	2323      	movs	r3, #35	@ 0x23
 80049c4:	18fb      	adds	r3, r7, r3
 80049c6:	2203      	movs	r2, #3
 80049c8:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	225d      	movs	r2, #93	@ 0x5d
 80049ce:	2101      	movs	r1, #1
 80049d0:	5499      	strb	r1, [r3, r2]
        goto error;
 80049d2:	e0b1      	b.n	8004b38 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80049d8:	b29b      	uxth	r3, r3
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d19f      	bne.n	800491e <HAL_SPI_TransmitReceive+0x18e>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2246      	movs	r2, #70	@ 0x46
 80049e2:	5a9b      	ldrh	r3, [r3, r2]
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d199      	bne.n	800491e <HAL_SPI_TransmitReceive+0x18e>
 80049ea:	e089      	b.n	8004b00 <HAL_SPI_TransmitReceive+0x370>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_SPI_TransmitReceive+0x270>
 80049f4:	2312      	movs	r3, #18
 80049f6:	18fb      	adds	r3, r7, r3
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d000      	beq.n	8004a00 <HAL_SPI_TransmitReceive+0x270>
 80049fe:	e074      	b.n	8004aea <HAL_SPI_TransmitReceive+0x35a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	7812      	ldrb	r2, [r2, #0]
 8004a0c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a1c:	b29b      	uxth	r3, r3
 8004a1e:	3b01      	subs	r3, #1
 8004a20:	b29a      	uxth	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004a26:	e060      	b.n	8004aea <HAL_SPI_TransmitReceive+0x35a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b02      	cmp	r3, #2
 8004a34:	d11c      	bne.n	8004a70 <HAL_SPI_TransmitReceive+0x2e0>
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d017      	beq.n	8004a70 <HAL_SPI_TransmitReceive+0x2e0>
 8004a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d114      	bne.n	8004a70 <HAL_SPI_TransmitReceive+0x2e0>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	330c      	adds	r3, #12
 8004a50:	7812      	ldrb	r2, [r2, #0]
 8004a52:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	3b01      	subs	r3, #1
 8004a66:	b29a      	uxth	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	2201      	movs	r2, #1
 8004a78:	4013      	ands	r3, r2
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d11e      	bne.n	8004abc <HAL_SPI_TransmitReceive+0x32c>
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2246      	movs	r2, #70	@ 0x46
 8004a82:	5a9b      	ldrh	r3, [r3, r2]
 8004a84:	b29b      	uxth	r3, r3
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d018      	beq.n	8004abc <HAL_SPI_TransmitReceive+0x32c>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	330c      	adds	r3, #12
 8004a90:	001a      	movs	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a96:	7812      	ldrb	r2, [r2, #0]
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2246      	movs	r2, #70	@ 0x46
 8004aaa:	5a9b      	ldrh	r3, [r3, r2]
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b299      	uxth	r1, r3
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2246      	movs	r2, #70	@ 0x46
 8004ab6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004ab8:	2301      	movs	r3, #1
 8004aba:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004abc:	f7fd f9b4 	bl	8001e28 <HAL_GetTick>
 8004ac0:	0002      	movs	r2, r0
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d802      	bhi.n	8004ad2 <HAL_SPI_TransmitReceive+0x342>
 8004acc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ace:	3301      	adds	r3, #1
 8004ad0:	d102      	bne.n	8004ad8 <HAL_SPI_TransmitReceive+0x348>
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d108      	bne.n	8004aea <HAL_SPI_TransmitReceive+0x35a>
      {
        errorcode = HAL_TIMEOUT;
 8004ad8:	2323      	movs	r3, #35	@ 0x23
 8004ada:	18fb      	adds	r3, r7, r3
 8004adc:	2203      	movs	r2, #3
 8004ade:	701a      	strb	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	225d      	movs	r2, #93	@ 0x5d
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	5499      	strb	r1, [r3, r2]
        goto error;
 8004ae8:	e026      	b.n	8004b38 <HAL_SPI_TransmitReceive+0x3a8>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d199      	bne.n	8004a28 <HAL_SPI_TransmitReceive+0x298>
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2246      	movs	r2, #70	@ 0x46
 8004af8:	5a9b      	ldrh	r3, [r3, r2]
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d193      	bne.n	8004a28 <HAL_SPI_TransmitReceive+0x298>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004b00:	69fa      	ldr	r2, [r7, #28]
 8004b02:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	0018      	movs	r0, r3
 8004b08:	f000 f954 	bl	8004db4 <SPI_EndRxTxTransaction>
 8004b0c:	1e03      	subs	r3, r0, #0
 8004b0e:	d006      	beq.n	8004b1e <HAL_SPI_TransmitReceive+0x38e>
  {
    errorcode = HAL_ERROR;
 8004b10:	2323      	movs	r3, #35	@ 0x23
 8004b12:	18fb      	adds	r3, r7, r3
 8004b14:	2201      	movs	r2, #1
 8004b16:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d004      	beq.n	8004b30 <HAL_SPI_TransmitReceive+0x3a0>
  {
    errorcode = HAL_ERROR;
 8004b26:	2323      	movs	r3, #35	@ 0x23
 8004b28:	18fb      	adds	r3, r7, r3
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	e003      	b.n	8004b38 <HAL_SPI_TransmitReceive+0x3a8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	225d      	movs	r2, #93	@ 0x5d
 8004b34:	2101      	movs	r1, #1
 8004b36:	5499      	strb	r1, [r3, r2]
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	225c      	movs	r2, #92	@ 0x5c
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8004b40:	2323      	movs	r3, #35	@ 0x23
 8004b42:	18fb      	adds	r3, r7, r3
 8004b44:	781b      	ldrb	r3, [r3, #0]
}
 8004b46:	0018      	movs	r0, r3
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	b00a      	add	sp, #40	@ 0x28
 8004b4c:	bd80      	pop	{r7, pc}
 8004b4e:	46c0      	nop			@ (mov r8, r8)
 8004b50:	ffffefff 	.word	0xffffefff

08004b54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	603b      	str	r3, [r7, #0]
 8004b60:	1dfb      	adds	r3, r7, #7
 8004b62:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004b64:	f7fd f960 	bl	8001e28 <HAL_GetTick>
 8004b68:	0002      	movs	r2, r0
 8004b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	18d3      	adds	r3, r2, r3
 8004b72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004b74:	f7fd f958 	bl	8001e28 <HAL_GetTick>
 8004b78:	0003      	movs	r3, r0
 8004b7a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004b7c:	4b3a      	ldr	r3, [pc, #232]	@ (8004c68 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	015b      	lsls	r3, r3, #5
 8004b82:	0d1b      	lsrs	r3, r3, #20
 8004b84:	69fa      	ldr	r2, [r7, #28]
 8004b86:	4353      	muls	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004b8a:	e058      	b.n	8004c3e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	3301      	adds	r3, #1
 8004b90:	d055      	beq.n	8004c3e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004b92:	f7fd f949 	bl	8001e28 <HAL_GetTick>
 8004b96:	0002      	movs	r2, r0
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	69fa      	ldr	r2, [r7, #28]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d902      	bls.n	8004ba8 <SPI_WaitFlagStateUntilTimeout+0x54>
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d142      	bne.n	8004c2e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685a      	ldr	r2, [r3, #4]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	21e0      	movs	r1, #224	@ 0xe0
 8004bb4:	438a      	bics	r2, r1
 8004bb6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	2382      	movs	r3, #130	@ 0x82
 8004bbe:	005b      	lsls	r3, r3, #1
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d113      	bne.n	8004bec <SPI_WaitFlagStateUntilTimeout+0x98>
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	689a      	ldr	r2, [r3, #8]
 8004bc8:	2380      	movs	r3, #128	@ 0x80
 8004bca:	021b      	lsls	r3, r3, #8
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d005      	beq.n	8004bdc <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	2380      	movs	r3, #128	@ 0x80
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d107      	bne.n	8004bec <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2140      	movs	r1, #64	@ 0x40
 8004be8:	438a      	bics	r2, r1
 8004bea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004bf0:	2380      	movs	r3, #128	@ 0x80
 8004bf2:	019b      	lsls	r3, r3, #6
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d110      	bne.n	8004c1a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	491a      	ldr	r1, [pc, #104]	@ (8004c6c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8004c04:	400a      	ands	r2, r1
 8004c06:	601a      	str	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2180      	movs	r1, #128	@ 0x80
 8004c14:	0189      	lsls	r1, r1, #6
 8004c16:	430a      	orrs	r2, r1
 8004c18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	225d      	movs	r2, #93	@ 0x5d
 8004c1e:	2101      	movs	r1, #1
 8004c20:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	225c      	movs	r2, #92	@ 0x5c
 8004c26:	2100      	movs	r1, #0
 8004c28:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e017      	b.n	8004c5e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d101      	bne.n	8004c38 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	3b01      	subs	r3, #1
 8004c3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	68ba      	ldr	r2, [r7, #8]
 8004c46:	4013      	ands	r3, r2
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	425a      	negs	r2, r3
 8004c4e:	4153      	adcs	r3, r2
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	001a      	movs	r2, r3
 8004c54:	1dfb      	adds	r3, r7, #7
 8004c56:	781b      	ldrb	r3, [r3, #0]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d197      	bne.n	8004b8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004c5c:	2300      	movs	r3, #0
}
 8004c5e:	0018      	movs	r0, r3
 8004c60:	46bd      	mov	sp, r7
 8004c62:	b008      	add	sp, #32
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	46c0      	nop			@ (mov r8, r8)
 8004c68:	20000000 	.word	0x20000000
 8004c6c:	ffffdfff 	.word	0xffffdfff

08004c70 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b08a      	sub	sp, #40	@ 0x28
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	60b9      	str	r1, [r7, #8]
 8004c7a:	607a      	str	r2, [r7, #4]
 8004c7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004c7e:	2317      	movs	r3, #23
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004c86:	f7fd f8cf 	bl	8001e28 <HAL_GetTick>
 8004c8a:	0002      	movs	r2, r0
 8004c8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c8e:	1a9b      	subs	r3, r3, r2
 8004c90:	683a      	ldr	r2, [r7, #0]
 8004c92:	18d3      	adds	r3, r2, r3
 8004c94:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004c96:	f7fd f8c7 	bl	8001e28 <HAL_GetTick>
 8004c9a:	0003      	movs	r3, r0
 8004c9c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	330c      	adds	r3, #12
 8004ca4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004ca6:	4b41      	ldr	r3, [pc, #260]	@ (8004dac <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	0013      	movs	r3, r2
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	189b      	adds	r3, r3, r2
 8004cb0:	00da      	lsls	r2, r3, #3
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	0d1b      	lsrs	r3, r3, #20
 8004cb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cb8:	4353      	muls	r3, r2
 8004cba:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004cbc:	e068      	b.n	8004d90 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004cbe:	68ba      	ldr	r2, [r7, #8]
 8004cc0:	23c0      	movs	r3, #192	@ 0xc0
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d10a      	bne.n	8004cde <SPI_WaitFifoStateUntilTimeout+0x6e>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d107      	bne.n	8004cde <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	b2da      	uxtb	r2, r3
 8004cd4:	2117      	movs	r1, #23
 8004cd6:	187b      	adds	r3, r7, r1
 8004cd8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004cda:	187b      	adds	r3, r7, r1
 8004cdc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	3301      	adds	r3, #1
 8004ce2:	d055      	beq.n	8004d90 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ce4:	f7fd f8a0 	bl	8001e28 <HAL_GetTick>
 8004ce8:	0002      	movs	r2, r0
 8004cea:	6a3b      	ldr	r3, [r7, #32]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d902      	bls.n	8004cfa <SPI_WaitFifoStateUntilTimeout+0x8a>
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d142      	bne.n	8004d80 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	21e0      	movs	r1, #224	@ 0xe0
 8004d06:	438a      	bics	r2, r1
 8004d08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	2382      	movs	r3, #130	@ 0x82
 8004d10:	005b      	lsls	r3, r3, #1
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d113      	bne.n	8004d3e <SPI_WaitFifoStateUntilTimeout+0xce>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	689a      	ldr	r2, [r3, #8]
 8004d1a:	2380      	movs	r3, #128	@ 0x80
 8004d1c:	021b      	lsls	r3, r3, #8
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d005      	beq.n	8004d2e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	2380      	movs	r3, #128	@ 0x80
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d107      	bne.n	8004d3e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	2140      	movs	r1, #64	@ 0x40
 8004d3a:	438a      	bics	r2, r1
 8004d3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d42:	2380      	movs	r3, #128	@ 0x80
 8004d44:	019b      	lsls	r3, r3, #6
 8004d46:	429a      	cmp	r2, r3
 8004d48:	d110      	bne.n	8004d6c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4916      	ldr	r1, [pc, #88]	@ (8004db0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8004d56:	400a      	ands	r2, r1
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2180      	movs	r1, #128	@ 0x80
 8004d66:	0189      	lsls	r1, r1, #6
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	225d      	movs	r2, #93	@ 0x5d
 8004d70:	2101      	movs	r1, #1
 8004d72:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	225c      	movs	r2, #92	@ 0x5c
 8004d78:	2100      	movs	r1, #0
 8004d7a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e010      	b.n	8004da2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8004d86:	2300      	movs	r3, #0
 8004d88:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	68ba      	ldr	r2, [r7, #8]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d18e      	bne.n	8004cbe <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	0018      	movs	r0, r3
 8004da4:	46bd      	mov	sp, r7
 8004da6:	b00a      	add	sp, #40	@ 0x28
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	46c0      	nop			@ (mov r8, r8)
 8004dac:	20000000 	.word	0x20000000
 8004db0:	ffffdfff 	.word	0xffffdfff

08004db4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af02      	add	r7, sp, #8
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004dc0:	68ba      	ldr	r2, [r7, #8]
 8004dc2:	23c0      	movs	r3, #192	@ 0xc0
 8004dc4:	0159      	lsls	r1, r3, #5
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	9300      	str	r3, [sp, #0]
 8004dcc:	0013      	movs	r3, r2
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f7ff ff4e 	bl	8004c70 <SPI_WaitFifoStateUntilTimeout>
 8004dd4:	1e03      	subs	r3, r0, #0
 8004dd6:	d007      	beq.n	8004de8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ddc:	2220      	movs	r2, #32
 8004dde:	431a      	orrs	r2, r3
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004de4:	2303      	movs	r3, #3
 8004de6:	e027      	b.n	8004e38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	68f8      	ldr	r0, [r7, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	0013      	movs	r3, r2
 8004df2:	2200      	movs	r2, #0
 8004df4:	2180      	movs	r1, #128	@ 0x80
 8004df6:	f7ff fead 	bl	8004b54 <SPI_WaitFlagStateUntilTimeout>
 8004dfa:	1e03      	subs	r3, r0, #0
 8004dfc:	d007      	beq.n	8004e0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e02:	2220      	movs	r2, #32
 8004e04:	431a      	orrs	r2, r3
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e014      	b.n	8004e38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004e0e:	68ba      	ldr	r2, [r7, #8]
 8004e10:	23c0      	movs	r3, #192	@ 0xc0
 8004e12:	00d9      	lsls	r1, r3, #3
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	9300      	str	r3, [sp, #0]
 8004e1a:	0013      	movs	r3, r2
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f7ff ff27 	bl	8004c70 <SPI_WaitFifoStateUntilTimeout>
 8004e22:	1e03      	subs	r3, r0, #0
 8004e24:	d007      	beq.n	8004e36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e2a:	2220      	movs	r2, #32
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e000      	b.n	8004e38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	0018      	movs	r0, r3
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	b004      	add	sp, #16
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e04a      	b.n	8004ee8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	223d      	movs	r2, #61	@ 0x3d
 8004e56:	5c9b      	ldrb	r3, [r3, r2]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d107      	bne.n	8004e6e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	223c      	movs	r2, #60	@ 0x3c
 8004e62:	2100      	movs	r1, #0
 8004e64:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f7fc fed5 	bl	8001c18 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	223d      	movs	r2, #61	@ 0x3d
 8004e72:	2102      	movs	r1, #2
 8004e74:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	0019      	movs	r1, r3
 8004e80:	0010      	movs	r0, r2
 8004e82:	f000 f957 	bl	8005134 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2248      	movs	r2, #72	@ 0x48
 8004e8a:	2101      	movs	r1, #1
 8004e8c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	223e      	movs	r2, #62	@ 0x3e
 8004e92:	2101      	movs	r1, #1
 8004e94:	5499      	strb	r1, [r3, r2]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	223f      	movs	r2, #63	@ 0x3f
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	5499      	strb	r1, [r3, r2]
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2240      	movs	r2, #64	@ 0x40
 8004ea2:	2101      	movs	r1, #1
 8004ea4:	5499      	strb	r1, [r3, r2]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2241      	movs	r2, #65	@ 0x41
 8004eaa:	2101      	movs	r1, #1
 8004eac:	5499      	strb	r1, [r3, r2]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2242      	movs	r2, #66	@ 0x42
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	5499      	strb	r1, [r3, r2]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2243      	movs	r2, #67	@ 0x43
 8004eba:	2101      	movs	r1, #1
 8004ebc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2244      	movs	r2, #68	@ 0x44
 8004ec2:	2101      	movs	r1, #1
 8004ec4:	5499      	strb	r1, [r3, r2]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2245      	movs	r2, #69	@ 0x45
 8004eca:	2101      	movs	r1, #1
 8004ecc:	5499      	strb	r1, [r3, r2]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	2246      	movs	r2, #70	@ 0x46
 8004ed2:	2101      	movs	r1, #1
 8004ed4:	5499      	strb	r1, [r3, r2]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2247      	movs	r2, #71	@ 0x47
 8004eda:	2101      	movs	r1, #1
 8004edc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	223d      	movs	r2, #61	@ 0x3d
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004ee6:	2300      	movs	r3, #0
}
 8004ee8:	0018      	movs	r0, r3
 8004eea:	46bd      	mov	sp, r7
 8004eec:	b002      	add	sp, #8
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	223d      	movs	r2, #61	@ 0x3d
 8004efc:	5c9b      	ldrb	r3, [r3, r2]
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d001      	beq.n	8004f08 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e035      	b.n	8004f74 <HAL_TIM_Base_Start+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	223d      	movs	r2, #61	@ 0x3d
 8004f0c:	2102      	movs	r1, #2
 8004f0e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a19      	ldr	r2, [pc, #100]	@ (8004f7c <HAL_TIM_Base_Start+0x8c>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d00a      	beq.n	8004f30 <HAL_TIM_Base_Start+0x40>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	2380      	movs	r3, #128	@ 0x80
 8004f20:	05db      	lsls	r3, r3, #23
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d004      	beq.n	8004f30 <HAL_TIM_Base_Start+0x40>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a15      	ldr	r2, [pc, #84]	@ (8004f80 <HAL_TIM_Base_Start+0x90>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d116      	bne.n	8004f5e <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	4a13      	ldr	r2, [pc, #76]	@ (8004f84 <HAL_TIM_Base_Start+0x94>)
 8004f38:	4013      	ands	r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	2b06      	cmp	r3, #6
 8004f40:	d016      	beq.n	8004f70 <HAL_TIM_Base_Start+0x80>
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	2380      	movs	r3, #128	@ 0x80
 8004f46:	025b      	lsls	r3, r3, #9
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d011      	beq.n	8004f70 <HAL_TIM_Base_Start+0x80>
    {
      __HAL_TIM_ENABLE(htim);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2101      	movs	r1, #1
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5c:	e008      	b.n	8004f70 <HAL_TIM_Base_Start+0x80>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2101      	movs	r1, #1
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	e000      	b.n	8004f72 <HAL_TIM_Base_Start+0x82>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f70:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	0018      	movs	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	b004      	add	sp, #16
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	40012c00 	.word	0x40012c00
 8004f80:	40000400 	.word	0x40000400
 8004f84:	00010007 	.word	0x00010007

08004f88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b084      	sub	sp, #16
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f92:	230f      	movs	r3, #15
 8004f94:	18fb      	adds	r3, r7, r3
 8004f96:	2200      	movs	r2, #0
 8004f98:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	223c      	movs	r2, #60	@ 0x3c
 8004f9e:	5c9b      	ldrb	r3, [r3, r2]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d101      	bne.n	8004fa8 <HAL_TIM_ConfigClockSource+0x20>
 8004fa4:	2302      	movs	r3, #2
 8004fa6:	e0bc      	b.n	8005122 <HAL_TIM_ConfigClockSource+0x19a>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	223c      	movs	r2, #60	@ 0x3c
 8004fac:	2101      	movs	r1, #1
 8004fae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	223d      	movs	r2, #61	@ 0x3d
 8004fb4:	2102      	movs	r1, #2
 8004fb6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4a5a      	ldr	r2, [pc, #360]	@ (800512c <HAL_TIM_ConfigClockSource+0x1a4>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	4a59      	ldr	r2, [pc, #356]	@ (8005130 <HAL_TIM_ConfigClockSource+0x1a8>)
 8004fcc:	4013      	ands	r3, r2
 8004fce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68ba      	ldr	r2, [r7, #8]
 8004fd6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2280      	movs	r2, #128	@ 0x80
 8004fde:	0192      	lsls	r2, r2, #6
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d040      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0xde>
 8004fe4:	2280      	movs	r2, #128	@ 0x80
 8004fe6:	0192      	lsls	r2, r2, #6
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d900      	bls.n	8004fee <HAL_TIM_ConfigClockSource+0x66>
 8004fec:	e088      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x178>
 8004fee:	2280      	movs	r2, #128	@ 0x80
 8004ff0:	0152      	lsls	r2, r2, #5
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d100      	bne.n	8004ff8 <HAL_TIM_ConfigClockSource+0x70>
 8004ff6:	e088      	b.n	800510a <HAL_TIM_ConfigClockSource+0x182>
 8004ff8:	2280      	movs	r2, #128	@ 0x80
 8004ffa:	0152      	lsls	r2, r2, #5
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d900      	bls.n	8005002 <HAL_TIM_ConfigClockSource+0x7a>
 8005000:	e07e      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x178>
 8005002:	2b70      	cmp	r3, #112	@ 0x70
 8005004:	d018      	beq.n	8005038 <HAL_TIM_ConfigClockSource+0xb0>
 8005006:	d900      	bls.n	800500a <HAL_TIM_ConfigClockSource+0x82>
 8005008:	e07a      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x178>
 800500a:	2b60      	cmp	r3, #96	@ 0x60
 800500c:	d04f      	beq.n	80050ae <HAL_TIM_ConfigClockSource+0x126>
 800500e:	d900      	bls.n	8005012 <HAL_TIM_ConfigClockSource+0x8a>
 8005010:	e076      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x178>
 8005012:	2b50      	cmp	r3, #80	@ 0x50
 8005014:	d03b      	beq.n	800508e <HAL_TIM_ConfigClockSource+0x106>
 8005016:	d900      	bls.n	800501a <HAL_TIM_ConfigClockSource+0x92>
 8005018:	e072      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x178>
 800501a:	2b40      	cmp	r3, #64	@ 0x40
 800501c:	d057      	beq.n	80050ce <HAL_TIM_ConfigClockSource+0x146>
 800501e:	d900      	bls.n	8005022 <HAL_TIM_ConfigClockSource+0x9a>
 8005020:	e06e      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x178>
 8005022:	2b30      	cmp	r3, #48	@ 0x30
 8005024:	d063      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x166>
 8005026:	d86b      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x178>
 8005028:	2b20      	cmp	r3, #32
 800502a:	d060      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x166>
 800502c:	d868      	bhi.n	8005100 <HAL_TIM_ConfigClockSource+0x178>
 800502e:	2b00      	cmp	r3, #0
 8005030:	d05d      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x166>
 8005032:	2b10      	cmp	r3, #16
 8005034:	d05b      	beq.n	80050ee <HAL_TIM_ConfigClockSource+0x166>
 8005036:	e063      	b.n	8005100 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005048:	f000 f974 	bl	8005334 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	2277      	movs	r2, #119	@ 0x77
 8005058:	4313      	orrs	r3, r2
 800505a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68ba      	ldr	r2, [r7, #8]
 8005062:	609a      	str	r2, [r3, #8]
      break;
 8005064:	e052      	b.n	800510c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005076:	f000 f95d 	bl	8005334 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	689a      	ldr	r2, [r3, #8]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2180      	movs	r1, #128	@ 0x80
 8005086:	01c9      	lsls	r1, r1, #7
 8005088:	430a      	orrs	r2, r1
 800508a:	609a      	str	r2, [r3, #8]
      break;
 800508c:	e03e      	b.n	800510c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800509a:	001a      	movs	r2, r3
 800509c:	f000 f8ce 	bl	800523c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	2150      	movs	r1, #80	@ 0x50
 80050a6:	0018      	movs	r0, r3
 80050a8:	f000 f928 	bl	80052fc <TIM_ITRx_SetConfig>
      break;
 80050ac:	e02e      	b.n	800510c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050ba:	001a      	movs	r2, r3
 80050bc:	f000 f8ec 	bl	8005298 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	2160      	movs	r1, #96	@ 0x60
 80050c6:	0018      	movs	r0, r3
 80050c8:	f000 f918 	bl	80052fc <TIM_ITRx_SetConfig>
      break;
 80050cc:	e01e      	b.n	800510c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050da:	001a      	movs	r2, r3
 80050dc:	f000 f8ae 	bl	800523c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2140      	movs	r1, #64	@ 0x40
 80050e6:	0018      	movs	r0, r3
 80050e8:	f000 f908 	bl	80052fc <TIM_ITRx_SetConfig>
      break;
 80050ec:	e00e      	b.n	800510c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	0019      	movs	r1, r3
 80050f8:	0010      	movs	r0, r2
 80050fa:	f000 f8ff 	bl	80052fc <TIM_ITRx_SetConfig>
      break;
 80050fe:	e005      	b.n	800510c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8005100:	230f      	movs	r3, #15
 8005102:	18fb      	adds	r3, r7, r3
 8005104:	2201      	movs	r2, #1
 8005106:	701a      	strb	r2, [r3, #0]
      break;
 8005108:	e000      	b.n	800510c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800510a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	223d      	movs	r2, #61	@ 0x3d
 8005110:	2101      	movs	r1, #1
 8005112:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	223c      	movs	r2, #60	@ 0x3c
 8005118:	2100      	movs	r1, #0
 800511a:	5499      	strb	r1, [r3, r2]

  return status;
 800511c:	230f      	movs	r3, #15
 800511e:	18fb      	adds	r3, r7, r3
 8005120:	781b      	ldrb	r3, [r3, #0]
}
 8005122:	0018      	movs	r0, r3
 8005124:	46bd      	mov	sp, r7
 8005126:	b004      	add	sp, #16
 8005128:	bd80      	pop	{r7, pc}
 800512a:	46c0      	nop			@ (mov r8, r8)
 800512c:	ffceff88 	.word	0xffceff88
 8005130:	ffff00ff 	.word	0xffff00ff

08005134 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a37      	ldr	r2, [pc, #220]	@ (8005224 <TIM_Base_SetConfig+0xf0>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d008      	beq.n	800515e <TIM_Base_SetConfig+0x2a>
 800514c:	687a      	ldr	r2, [r7, #4]
 800514e:	2380      	movs	r3, #128	@ 0x80
 8005150:	05db      	lsls	r3, r3, #23
 8005152:	429a      	cmp	r2, r3
 8005154:	d003      	beq.n	800515e <TIM_Base_SetConfig+0x2a>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a33      	ldr	r2, [pc, #204]	@ (8005228 <TIM_Base_SetConfig+0xf4>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d108      	bne.n	8005170 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2270      	movs	r2, #112	@ 0x70
 8005162:	4393      	bics	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685b      	ldr	r3, [r3, #4]
 800516a:	68fa      	ldr	r2, [r7, #12]
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	4a2c      	ldr	r2, [pc, #176]	@ (8005224 <TIM_Base_SetConfig+0xf0>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d014      	beq.n	80051a2 <TIM_Base_SetConfig+0x6e>
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	2380      	movs	r3, #128	@ 0x80
 800517c:	05db      	lsls	r3, r3, #23
 800517e:	429a      	cmp	r2, r3
 8005180:	d00f      	beq.n	80051a2 <TIM_Base_SetConfig+0x6e>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a28      	ldr	r2, [pc, #160]	@ (8005228 <TIM_Base_SetConfig+0xf4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00b      	beq.n	80051a2 <TIM_Base_SetConfig+0x6e>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a27      	ldr	r2, [pc, #156]	@ (800522c <TIM_Base_SetConfig+0xf8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d007      	beq.n	80051a2 <TIM_Base_SetConfig+0x6e>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a26      	ldr	r2, [pc, #152]	@ (8005230 <TIM_Base_SetConfig+0xfc>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d003      	beq.n	80051a2 <TIM_Base_SetConfig+0x6e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a25      	ldr	r2, [pc, #148]	@ (8005234 <TIM_Base_SetConfig+0x100>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d108      	bne.n	80051b4 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a24      	ldr	r2, [pc, #144]	@ (8005238 <TIM_Base_SetConfig+0x104>)
 80051a6:	4013      	ands	r3, r2
 80051a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	2280      	movs	r2, #128	@ 0x80
 80051b8:	4393      	bics	r3, r2
 80051ba:	001a      	movs	r2, r3
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	4313      	orrs	r3, r2
 80051c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a11      	ldr	r2, [pc, #68]	@ (8005224 <TIM_Base_SetConfig+0xf0>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d007      	beq.n	80051f2 <TIM_Base_SetConfig+0xbe>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4a12      	ldr	r2, [pc, #72]	@ (8005230 <TIM_Base_SetConfig+0xfc>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d003      	beq.n	80051f2 <TIM_Base_SetConfig+0xbe>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	4a11      	ldr	r2, [pc, #68]	@ (8005234 <TIM_Base_SetConfig+0x100>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d103      	bne.n	80051fa <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	691a      	ldr	r2, [r3, #16]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	691b      	ldr	r3, [r3, #16]
 8005204:	2201      	movs	r2, #1
 8005206:	4013      	ands	r3, r2
 8005208:	2b01      	cmp	r3, #1
 800520a:	d106      	bne.n	800521a <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	2201      	movs	r2, #1
 8005212:	4393      	bics	r3, r2
 8005214:	001a      	movs	r2, r3
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	611a      	str	r2, [r3, #16]
  }
}
 800521a:	46c0      	nop			@ (mov r8, r8)
 800521c:	46bd      	mov	sp, r7
 800521e:	b004      	add	sp, #16
 8005220:	bd80      	pop	{r7, pc}
 8005222:	46c0      	nop			@ (mov r8, r8)
 8005224:	40012c00 	.word	0x40012c00
 8005228:	40000400 	.word	0x40000400
 800522c:	40002000 	.word	0x40002000
 8005230:	40014400 	.word	0x40014400
 8005234:	40014800 	.word	0x40014800
 8005238:	fffffcff 	.word	0xfffffcff

0800523c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	6a1b      	ldr	r3, [r3, #32]
 800524c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	2201      	movs	r2, #1
 8005254:	4393      	bics	r3, r2
 8005256:	001a      	movs	r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	22f0      	movs	r2, #240	@ 0xf0
 8005266:	4393      	bics	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	220a      	movs	r2, #10
 8005278:	4393      	bics	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800527c:	697a      	ldr	r2, [r7, #20]
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	4313      	orrs	r3, r2
 8005282:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	621a      	str	r2, [r3, #32]
}
 8005290:	46c0      	nop			@ (mov r8, r8)
 8005292:	46bd      	mov	sp, r7
 8005294:	b006      	add	sp, #24
 8005296:	bd80      	pop	{r7, pc}

08005298 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	60f8      	str	r0, [r7, #12]
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	6a1b      	ldr	r3, [r3, #32]
 80052ae:	2210      	movs	r2, #16
 80052b0:	4393      	bics	r3, r2
 80052b2:	001a      	movs	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	4a0d      	ldr	r2, [pc, #52]	@ (80052f8 <TIM_TI2_ConfigInputStage+0x60>)
 80052c2:	4013      	ands	r3, r2
 80052c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	031b      	lsls	r3, r3, #12
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	22a0      	movs	r2, #160	@ 0xa0
 80052d4:	4393      	bics	r3, r2
 80052d6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	011b      	lsls	r3, r3, #4
 80052dc:	697a      	ldr	r2, [r7, #20]
 80052de:	4313      	orrs	r3, r2
 80052e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	697a      	ldr	r2, [r7, #20]
 80052ec:	621a      	str	r2, [r3, #32]
}
 80052ee:	46c0      	nop			@ (mov r8, r8)
 80052f0:	46bd      	mov	sp, r7
 80052f2:	b006      	add	sp, #24
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	46c0      	nop			@ (mov r8, r8)
 80052f8:	ffff0fff 	.word	0xffff0fff

080052fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	4a08      	ldr	r2, [pc, #32]	@ (8005330 <TIM_ITRx_SetConfig+0x34>)
 8005310:	4013      	ands	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	2207      	movs	r2, #7
 800531c:	4313      	orrs	r3, r2
 800531e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	609a      	str	r2, [r3, #8]
}
 8005326:	46c0      	nop			@ (mov r8, r8)
 8005328:	46bd      	mov	sp, r7
 800532a:	b004      	add	sp, #16
 800532c:	bd80      	pop	{r7, pc}
 800532e:	46c0      	nop			@ (mov r8, r8)
 8005330:	ffcfff8f 	.word	0xffcfff8f

08005334 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b086      	sub	sp, #24
 8005338:	af00      	add	r7, sp, #0
 800533a:	60f8      	str	r0, [r7, #12]
 800533c:	60b9      	str	r1, [r7, #8]
 800533e:	607a      	str	r2, [r7, #4]
 8005340:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	4a09      	ldr	r2, [pc, #36]	@ (8005370 <TIM_ETR_SetConfig+0x3c>)
 800534c:	4013      	ands	r3, r2
 800534e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	021a      	lsls	r2, r3, #8
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	431a      	orrs	r2, r3
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4313      	orrs	r3, r2
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4313      	orrs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	609a      	str	r2, [r3, #8]
}
 8005368:	46c0      	nop			@ (mov r8, r8)
 800536a:	46bd      	mov	sp, r7
 800536c:	b006      	add	sp, #24
 800536e:	bd80      	pop	{r7, pc}
 8005370:	ffff00ff 	.word	0xffff00ff

08005374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005374:	b580      	push	{r7, lr}
 8005376:	b084      	sub	sp, #16
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
 800537c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	223c      	movs	r2, #60	@ 0x3c
 8005382:	5c9b      	ldrb	r3, [r3, r2]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005388:	2302      	movs	r3, #2
 800538a:	e050      	b.n	800542e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	223c      	movs	r2, #60	@ 0x3c
 8005390:	2101      	movs	r1, #1
 8005392:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	223d      	movs	r2, #61	@ 0x3d
 8005398:	2102      	movs	r1, #2
 800539a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a21      	ldr	r2, [pc, #132]	@ (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d108      	bne.n	80053c8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	4a20      	ldr	r2, [pc, #128]	@ (800543c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80053ba:	4013      	ands	r3, r2
 80053bc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2270      	movs	r2, #112	@ 0x70
 80053cc:	4393      	bics	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a14      	ldr	r2, [pc, #80]	@ (8005438 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d00a      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	2380      	movs	r3, #128	@ 0x80
 80053f2:	05db      	lsls	r3, r3, #23
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d004      	beq.n	8005402 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a10      	ldr	r2, [pc, #64]	@ (8005440 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d10c      	bne.n	800541c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	2280      	movs	r2, #128	@ 0x80
 8005406:	4393      	bics	r3, r2
 8005408:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	68ba      	ldr	r2, [r7, #8]
 8005410:	4313      	orrs	r3, r2
 8005412:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	223d      	movs	r2, #61	@ 0x3d
 8005420:	2101      	movs	r1, #1
 8005422:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	223c      	movs	r2, #60	@ 0x3c
 8005428:	2100      	movs	r1, #0
 800542a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	0018      	movs	r0, r3
 8005430:	46bd      	mov	sp, r7
 8005432:	b004      	add	sp, #16
 8005434:	bd80      	pop	{r7, pc}
 8005436:	46c0      	nop			@ (mov r8, r8)
 8005438:	40012c00 	.word	0x40012c00
 800543c:	ff0fffff 	.word	0xff0fffff
 8005440:	40000400 	.word	0x40000400

08005444 <memset>:
 8005444:	0003      	movs	r3, r0
 8005446:	1882      	adds	r2, r0, r2
 8005448:	4293      	cmp	r3, r2
 800544a:	d100      	bne.n	800544e <memset+0xa>
 800544c:	4770      	bx	lr
 800544e:	7019      	strb	r1, [r3, #0]
 8005450:	3301      	adds	r3, #1
 8005452:	e7f9      	b.n	8005448 <memset+0x4>

08005454 <__libc_init_array>:
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	2600      	movs	r6, #0
 8005458:	4c0c      	ldr	r4, [pc, #48]	@ (800548c <__libc_init_array+0x38>)
 800545a:	4d0d      	ldr	r5, [pc, #52]	@ (8005490 <__libc_init_array+0x3c>)
 800545c:	1b64      	subs	r4, r4, r5
 800545e:	10a4      	asrs	r4, r4, #2
 8005460:	42a6      	cmp	r6, r4
 8005462:	d109      	bne.n	8005478 <__libc_init_array+0x24>
 8005464:	2600      	movs	r6, #0
 8005466:	f000 f819 	bl	800549c <_init>
 800546a:	4c0a      	ldr	r4, [pc, #40]	@ (8005494 <__libc_init_array+0x40>)
 800546c:	4d0a      	ldr	r5, [pc, #40]	@ (8005498 <__libc_init_array+0x44>)
 800546e:	1b64      	subs	r4, r4, r5
 8005470:	10a4      	asrs	r4, r4, #2
 8005472:	42a6      	cmp	r6, r4
 8005474:	d105      	bne.n	8005482 <__libc_init_array+0x2e>
 8005476:	bd70      	pop	{r4, r5, r6, pc}
 8005478:	00b3      	lsls	r3, r6, #2
 800547a:	58eb      	ldr	r3, [r5, r3]
 800547c:	4798      	blx	r3
 800547e:	3601      	adds	r6, #1
 8005480:	e7ee      	b.n	8005460 <__libc_init_array+0xc>
 8005482:	00b3      	lsls	r3, r6, #2
 8005484:	58eb      	ldr	r3, [r5, r3]
 8005486:	4798      	blx	r3
 8005488:	3601      	adds	r6, #1
 800548a:	e7f2      	b.n	8005472 <__libc_init_array+0x1e>
 800548c:	08005578 	.word	0x08005578
 8005490:	08005578 	.word	0x08005578
 8005494:	0800557c 	.word	0x0800557c
 8005498:	08005578 	.word	0x08005578

0800549c <_init>:
 800549c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800549e:	46c0      	nop			@ (mov r8, r8)
 80054a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a2:	bc08      	pop	{r3}
 80054a4:	469e      	mov	lr, r3
 80054a6:	4770      	bx	lr

080054a8 <_fini>:
 80054a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054aa:	46c0      	nop			@ (mov r8, r8)
 80054ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ae:	bc08      	pop	{r3}
 80054b0:	469e      	mov	lr, r3
 80054b2:	4770      	bx	lr
